// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// AuthAuthenticateContext provides the authenticate auth action context.
type AuthAuthenticateContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AuthenticatePayload
}

// NewAuthAuthenticateContext parses the incoming request URL and body, performs validations and creates the
// context used by the authenticate controller auth action.
func NewAuthAuthenticateContext(ctx context.Context, r *http.Request, service *goa.Service) (*AuthAuthenticateContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AuthAuthenticateContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AuthAuthenticateContext) OK(r *Authtoken) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.authtoken+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AuthAuthenticateContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *AuthAuthenticateContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AuthAuthenticateContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *AuthAuthenticateContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateAuthorsContext provides the authors create action context.
type CreateAuthorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateAuthorsPayload
}

// NewCreateAuthorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the authors controller create action.
func NewCreateAuthorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateAuthorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateAuthorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createAuthorsPayload is the authors create action payload.
type createAuthorsPayload struct {
	// Author Name
	AuthorName *string `form:"author_name,omitempty" json:"author_name,omitempty" yaml:"author_name,omitempty" xml:"author_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createAuthorsPayload) Validate() (err error) {
	if payload.AuthorName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "author_name"))
	}
	if payload.AuthorName != nil {
		if utf8.RuneCountInString(*payload.AuthorName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.author_name`, *payload.AuthorName, utf8.RuneCountInString(*payload.AuthorName), 1, true))
		}
	}
	if payload.AuthorName != nil {
		if utf8.RuneCountInString(*payload.AuthorName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.author_name`, *payload.AuthorName, utf8.RuneCountInString(*payload.AuthorName), 128, false))
		}
	}
	return
}

// Publicize creates CreateAuthorsPayload from createAuthorsPayload
func (payload *createAuthorsPayload) Publicize() *CreateAuthorsPayload {
	var pub CreateAuthorsPayload
	if payload.AuthorName != nil {
		pub.AuthorName = *payload.AuthorName
	}
	return &pub
}

// CreateAuthorsPayload is the authors create action payload.
type CreateAuthorsPayload struct {
	// Author Name
	AuthorName string `form:"author_name" json:"author_name" yaml:"author_name" xml:"author_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateAuthorsPayload) Validate() (err error) {
	if payload.AuthorName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "author_name"))
	}
	if utf8.RuneCountInString(payload.AuthorName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.author_name`, payload.AuthorName, utf8.RuneCountInString(payload.AuthorName), 1, true))
	}
	if utf8.RuneCountInString(payload.AuthorName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.author_name`, payload.AuthorName, utf8.RuneCountInString(payload.AuthorName), 128, false))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateAuthorsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateAuthorsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateAuthorsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateAuthorsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateAuthorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateAuthorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteAuthorsContext provides the authors delete action context.
type DeleteAuthorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorID int
}

// NewDeleteAuthorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the authors controller delete action.
func NewDeleteAuthorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteAuthorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteAuthorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := strconv.Atoi(rawAuthorID); err2 == nil {
			rctx.AuthorID = authorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "integer"))
		}
		if rctx.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`author_id`, rctx.AuthorID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteAuthorsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAuthorsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteAuthorsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteAuthorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteAuthorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteAuthorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListAuthorsContext provides the authors list action context.
type ListAuthorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListAuthorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the authors controller list action.
func NewListAuthorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAuthorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAuthorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAuthorsContext) OK(r AuthorCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.author+json; type=collection")
	}
	if r == nil {
		r = AuthorCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListAuthorsContext) OKLink(r AuthorLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.author+json; type=collection")
	}
	if r == nil {
		r = AuthorLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListAuthorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListAuthorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowAuthorsContext provides the authors show action context.
type ShowAuthorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorID int
}

// NewShowAuthorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the authors controller show action.
func NewShowAuthorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowAuthorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowAuthorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := strconv.Atoi(rawAuthorID); err2 == nil {
			rctx.AuthorID = authorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "integer"))
		}
		if rctx.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`author_id`, rctx.AuthorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAuthorsContext) OK(r *Author) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.author+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowAuthorsContext) OKLink(r *AuthorLink) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.author+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowAuthorsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAuthorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowAuthorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowAuthorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdateAuthorsContext provides the authors update action context.
type UpdateAuthorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorID int
	Payload  *UpdateAuthorsPayload
}

// NewUpdateAuthorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the authors controller update action.
func NewUpdateAuthorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateAuthorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateAuthorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := strconv.Atoi(rawAuthorID); err2 == nil {
			rctx.AuthorID = authorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "integer"))
		}
		if rctx.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`author_id`, rctx.AuthorID, 1, true))
		}
	}
	return &rctx, err
}

// updateAuthorsPayload is the authors update action payload.
type updateAuthorsPayload struct {
	// Author Name
	AuthorName *string `form:"author_name,omitempty" json:"author_name,omitempty" yaml:"author_name,omitempty" xml:"author_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateAuthorsPayload) Validate() (err error) {
	if payload.AuthorName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "author_name"))
	}
	if payload.AuthorName != nil {
		if utf8.RuneCountInString(*payload.AuthorName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.author_name`, *payload.AuthorName, utf8.RuneCountInString(*payload.AuthorName), 1, true))
		}
	}
	if payload.AuthorName != nil {
		if utf8.RuneCountInString(*payload.AuthorName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.author_name`, *payload.AuthorName, utf8.RuneCountInString(*payload.AuthorName), 128, false))
		}
	}
	return
}

// Publicize creates UpdateAuthorsPayload from updateAuthorsPayload
func (payload *updateAuthorsPayload) Publicize() *UpdateAuthorsPayload {
	var pub UpdateAuthorsPayload
	if payload.AuthorName != nil {
		pub.AuthorName = *payload.AuthorName
	}
	return &pub
}

// UpdateAuthorsPayload is the authors update action payload.
type UpdateAuthorsPayload struct {
	// Author Name
	AuthorName string `form:"author_name" json:"author_name" yaml:"author_name" xml:"author_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateAuthorsPayload) Validate() (err error) {
	if payload.AuthorName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "author_name"))
	}
	if utf8.RuneCountInString(payload.AuthorName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.author_name`, payload.AuthorName, utf8.RuneCountInString(payload.AuthorName), 1, true))
	}
	if utf8.RuneCountInString(payload.AuthorName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.author_name`, payload.AuthorName, utf8.RuneCountInString(payload.AuthorName), 128, false))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateAuthorsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateAuthorsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateAuthorsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateAuthorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdateAuthorsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateAuthorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdateAuthorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateAuthorshipsContext provides the authorships create action context.
type CreateAuthorshipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateAuthorshipsPayload
}

// NewCreateAuthorshipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the authorships controller create action.
func NewCreateAuthorshipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateAuthorshipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateAuthorshipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createAuthorshipsPayload is the authorships create action payload.
type createAuthorshipsPayload struct {
	// Unique Author ID
	AuthorID *int `form:"author_id,omitempty" json:"author_id,omitempty" yaml:"author_id,omitempty" xml:"author_id,omitempty"`
	// Unique Book ID
	BookID *int `form:"book_id,omitempty" json:"book_id,omitempty" yaml:"book_id,omitempty" xml:"book_id,omitempty"`
	// Unique Role ID
	RoleID *int `form:"role_id,omitempty" json:"role_id,omitempty" yaml:"role_id,omitempty" xml:"role_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createAuthorshipsPayload) Validate() (err error) {
	if payload.AuthorID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "author_id"))
	}
	if payload.BookID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "book_id"))
	}
	if payload.RoleID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "role_id"))
	}
	if payload.AuthorID != nil {
		if *payload.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.author_id`, *payload.AuthorID, 1, true))
		}
	}
	if payload.BookID != nil {
		if *payload.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.book_id`, *payload.BookID, 1, true))
		}
	}
	if payload.RoleID != nil {
		if *payload.RoleID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.role_id`, *payload.RoleID, 1, true))
		}
	}
	return
}

// Publicize creates CreateAuthorshipsPayload from createAuthorshipsPayload
func (payload *createAuthorshipsPayload) Publicize() *CreateAuthorshipsPayload {
	var pub CreateAuthorshipsPayload
	if payload.AuthorID != nil {
		pub.AuthorID = *payload.AuthorID
	}
	if payload.BookID != nil {
		pub.BookID = *payload.BookID
	}
	if payload.RoleID != nil {
		pub.RoleID = *payload.RoleID
	}
	return &pub
}

// CreateAuthorshipsPayload is the authorships create action payload.
type CreateAuthorshipsPayload struct {
	// Unique Author ID
	AuthorID int `form:"author_id" json:"author_id" yaml:"author_id" xml:"author_id"`
	// Unique Book ID
	BookID int `form:"book_id" json:"book_id" yaml:"book_id" xml:"book_id"`
	// Unique Role ID
	RoleID int `form:"role_id" json:"role_id" yaml:"role_id" xml:"role_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateAuthorshipsPayload) Validate() (err error) {

	if payload.AuthorID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.author_id`, payload.AuthorID, 1, true))
	}
	if payload.BookID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.book_id`, payload.BookID, 1, true))
	}
	if payload.RoleID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.role_id`, payload.RoleID, 1, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateAuthorshipsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateAuthorshipsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateAuthorshipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateAuthorshipsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateAuthorshipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateAuthorshipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteAuthorshipsContext provides the authorships delete action context.
type DeleteAuthorshipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorshipID int
}

// NewDeleteAuthorshipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the authorships controller delete action.
func NewDeleteAuthorshipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteAuthorshipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteAuthorshipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorshipID := req.Params["authorship_id"]
	if len(paramAuthorshipID) > 0 {
		rawAuthorshipID := paramAuthorshipID[0]
		if authorshipID, err2 := strconv.Atoi(rawAuthorshipID); err2 == nil {
			rctx.AuthorshipID = authorshipID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("authorship_id", rawAuthorshipID, "integer"))
		}
		if rctx.AuthorshipID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`authorship_id`, rctx.AuthorshipID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteAuthorshipsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAuthorshipsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteAuthorshipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteAuthorshipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteAuthorshipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteAuthorshipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListAuthorshipsContext provides the authorships list action context.
type ListAuthorshipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListAuthorshipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the authorships controller list action.
func NewListAuthorshipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAuthorshipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAuthorshipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAuthorshipsContext) OK(r AuthorshipCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.authorship+json; type=collection")
	}
	if r == nil {
		r = AuthorshipCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListAuthorshipsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListAuthorshipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListAuthorshipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListAuthorshipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListAuthorshipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowAuthorshipsContext provides the authorships show action context.
type ShowAuthorshipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorshipID int
}

// NewShowAuthorshipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the authorships controller show action.
func NewShowAuthorshipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowAuthorshipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowAuthorshipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorshipID := req.Params["authorship_id"]
	if len(paramAuthorshipID) > 0 {
		rawAuthorshipID := paramAuthorshipID[0]
		if authorshipID, err2 := strconv.Atoi(rawAuthorshipID); err2 == nil {
			rctx.AuthorshipID = authorshipID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("authorship_id", rawAuthorshipID, "integer"))
		}
		if rctx.AuthorshipID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`authorship_id`, rctx.AuthorshipID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAuthorshipsContext) OK(r *Authorship) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.authorship+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowAuthorshipsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowAuthorshipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAuthorshipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowAuthorshipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowAuthorshipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateBooksContext provides the books create action context.
type CreateBooksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateBooksPayload
}

// NewCreateBooksContext parses the incoming request URL and body, performs validations and creates the
// context used by the books controller create action.
func NewCreateBooksContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateBooksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateBooksContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createBooksPayload is the books create action payload.
type createBooksPayload struct {
	// Book ISBN
	BookIsbn *string `form:"book_isbn,omitempty" json:"book_isbn,omitempty" yaml:"book_isbn,omitempty" xml:"book_isbn,omitempty"`
	// Book Name
	BookName *string `form:"book_name,omitempty" json:"book_name,omitempty" yaml:"book_name,omitempty" xml:"book_name,omitempty"`
	// Unique Series ID
	SeriesID *int `form:"series_id,omitempty" json:"series_id,omitempty" yaml:"series_id,omitempty" xml:"series_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createBooksPayload) Validate() (err error) {
	if payload.BookIsbn == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "book_isbn"))
	}
	if payload.BookName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "book_name"))
	}
	if payload.SeriesID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "series_id"))
	}
	if payload.BookIsbn != nil {
		if utf8.RuneCountInString(*payload.BookIsbn) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_isbn`, *payload.BookIsbn, utf8.RuneCountInString(*payload.BookIsbn), 1, true))
		}
	}
	if payload.BookIsbn != nil {
		if utf8.RuneCountInString(*payload.BookIsbn) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_isbn`, *payload.BookIsbn, utf8.RuneCountInString(*payload.BookIsbn), 128, false))
		}
	}
	if payload.BookName != nil {
		if utf8.RuneCountInString(*payload.BookName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_name`, *payload.BookName, utf8.RuneCountInString(*payload.BookName), 1, true))
		}
	}
	if payload.BookName != nil {
		if utf8.RuneCountInString(*payload.BookName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_name`, *payload.BookName, utf8.RuneCountInString(*payload.BookName), 128, false))
		}
	}
	if payload.SeriesID != nil {
		if *payload.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.series_id`, *payload.SeriesID, 1, true))
		}
	}
	return
}

// Publicize creates CreateBooksPayload from createBooksPayload
func (payload *createBooksPayload) Publicize() *CreateBooksPayload {
	var pub CreateBooksPayload
	if payload.BookIsbn != nil {
		pub.BookIsbn = *payload.BookIsbn
	}
	if payload.BookName != nil {
		pub.BookName = *payload.BookName
	}
	if payload.SeriesID != nil {
		pub.SeriesID = *payload.SeriesID
	}
	return &pub
}

// CreateBooksPayload is the books create action payload.
type CreateBooksPayload struct {
	// Book ISBN
	BookIsbn string `form:"book_isbn" json:"book_isbn" yaml:"book_isbn" xml:"book_isbn"`
	// Book Name
	BookName string `form:"book_name" json:"book_name" yaml:"book_name" xml:"book_name"`
	// Unique Series ID
	SeriesID int `form:"series_id" json:"series_id" yaml:"series_id" xml:"series_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateBooksPayload) Validate() (err error) {
	if payload.BookIsbn == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "book_isbn"))
	}
	if payload.BookName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "book_name"))
	}

	if utf8.RuneCountInString(payload.BookIsbn) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_isbn`, payload.BookIsbn, utf8.RuneCountInString(payload.BookIsbn), 1, true))
	}
	if utf8.RuneCountInString(payload.BookIsbn) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_isbn`, payload.BookIsbn, utf8.RuneCountInString(payload.BookIsbn), 128, false))
	}
	if utf8.RuneCountInString(payload.BookName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_name`, payload.BookName, utf8.RuneCountInString(payload.BookName), 1, true))
	}
	if utf8.RuneCountInString(payload.BookName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_name`, payload.BookName, utf8.RuneCountInString(payload.BookName), 128, false))
	}
	if payload.SeriesID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.series_id`, payload.SeriesID, 1, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateBooksContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateBooksContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateBooksContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateBooksContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateBooksContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateBooksContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteBooksContext provides the books delete action context.
type DeleteBooksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID int
}

// NewDeleteBooksContext parses the incoming request URL and body, performs validations and creates the
// context used by the books controller delete action.
func NewDeleteBooksContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteBooksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteBooksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["book_id"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("book_id", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`book_id`, rctx.BookID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteBooksContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteBooksContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteBooksContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteBooksContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteBooksContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteBooksContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksContext provides the books list action context.
type ListBooksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListBooksContext parses the incoming request URL and body, performs validations and creates the
// context used by the books controller list action.
func NewListBooksContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowBooksContext provides the books show action context.
type ShowBooksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID int
}

// NewShowBooksContext parses the incoming request URL and body, performs validations and creates the
// context used by the books controller show action.
func NewShowBooksContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowBooksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowBooksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["book_id"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("book_id", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`book_id`, rctx.BookID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowBooksContext) OK(r *Book) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowBooksContext) OKLink(r *BookLink) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowBooksContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowBooksContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowBooksContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowBooksContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdateBooksContext provides the books update action context.
type UpdateBooksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID  int
	Payload *UpdateBooksPayload
}

// NewUpdateBooksContext parses the incoming request URL and body, performs validations and creates the
// context used by the books controller update action.
func NewUpdateBooksContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateBooksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateBooksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["book_id"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("book_id", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`book_id`, rctx.BookID, 1, true))
		}
	}
	return &rctx, err
}

// updateBooksPayload is the books update action payload.
type updateBooksPayload struct {
	// Book Name
	BookName *string `form:"book_name,omitempty" json:"book_name,omitempty" yaml:"book_name,omitempty" xml:"book_name,omitempty"`
	// Unique Series ID
	SeriesID *int `form:"series_id,omitempty" json:"series_id,omitempty" yaml:"series_id,omitempty" xml:"series_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateBooksPayload) Validate() (err error) {
	if payload.BookName != nil {
		if utf8.RuneCountInString(*payload.BookName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_name`, *payload.BookName, utf8.RuneCountInString(*payload.BookName), 1, true))
		}
	}
	if payload.BookName != nil {
		if utf8.RuneCountInString(*payload.BookName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_name`, *payload.BookName, utf8.RuneCountInString(*payload.BookName), 128, false))
		}
	}
	if payload.SeriesID != nil {
		if *payload.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.series_id`, *payload.SeriesID, 1, true))
		}
	}
	return
}

// Publicize creates UpdateBooksPayload from updateBooksPayload
func (payload *updateBooksPayload) Publicize() *UpdateBooksPayload {
	var pub UpdateBooksPayload
	if payload.BookName != nil {
		pub.BookName = payload.BookName
	}
	if payload.SeriesID != nil {
		pub.SeriesID = payload.SeriesID
	}
	return &pub
}

// UpdateBooksPayload is the books update action payload.
type UpdateBooksPayload struct {
	// Book Name
	BookName *string `form:"book_name,omitempty" json:"book_name,omitempty" yaml:"book_name,omitempty" xml:"book_name,omitempty"`
	// Unique Series ID
	SeriesID *int `form:"series_id,omitempty" json:"series_id,omitempty" yaml:"series_id,omitempty" xml:"series_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateBooksPayload) Validate() (err error) {
	if payload.BookName != nil {
		if utf8.RuneCountInString(*payload.BookName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_name`, *payload.BookName, utf8.RuneCountInString(*payload.BookName), 1, true))
		}
	}
	if payload.BookName != nil {
		if utf8.RuneCountInString(*payload.BookName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_name`, *payload.BookName, utf8.RuneCountInString(*payload.BookName), 128, false))
		}
	}
	if payload.SeriesID != nil {
		if *payload.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.series_id`, *payload.SeriesID, 1, true))
		}
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateBooksContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateBooksContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateBooksContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateBooksContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdateBooksContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateBooksContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdateBooksContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateCategoriesContext provides the categories create action context.
type CreateCategoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateCategoriesPayload
}

// NewCreateCategoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the categories controller create action.
func NewCreateCategoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCategoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCategoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createCategoriesPayload is the categories create action payload.
type createCategoriesPayload struct {
	// Category Name (Shonen/Shojo/Seinen)
	CategoryName *string `form:"category_name,omitempty" json:"category_name,omitempty" yaml:"category_name,omitempty" xml:"category_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createCategoriesPayload) Validate() (err error) {
	if payload.CategoryName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "category_name"))
	}
	if payload.CategoryName != nil {
		if utf8.RuneCountInString(*payload.CategoryName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.category_name`, *payload.CategoryName, utf8.RuneCountInString(*payload.CategoryName), 1, true))
		}
	}
	if payload.CategoryName != nil {
		if utf8.RuneCountInString(*payload.CategoryName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.category_name`, *payload.CategoryName, utf8.RuneCountInString(*payload.CategoryName), 128, false))
		}
	}
	return
}

// Publicize creates CreateCategoriesPayload from createCategoriesPayload
func (payload *createCategoriesPayload) Publicize() *CreateCategoriesPayload {
	var pub CreateCategoriesPayload
	if payload.CategoryName != nil {
		pub.CategoryName = *payload.CategoryName
	}
	return &pub
}

// CreateCategoriesPayload is the categories create action payload.
type CreateCategoriesPayload struct {
	// Category Name (Shonen/Shojo/Seinen)
	CategoryName string `form:"category_name" json:"category_name" yaml:"category_name" xml:"category_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateCategoriesPayload) Validate() (err error) {
	if payload.CategoryName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "category_name"))
	}
	if utf8.RuneCountInString(payload.CategoryName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.category_name`, payload.CategoryName, utf8.RuneCountInString(payload.CategoryName), 1, true))
	}
	if utf8.RuneCountInString(payload.CategoryName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.category_name`, payload.CategoryName, utf8.RuneCountInString(payload.CategoryName), 128, false))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateCategoriesContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateCategoriesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateCategoriesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateCategoriesContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateCategoriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateCategoriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteCategoriesContext provides the categories delete action context.
type DeleteCategoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CategoryID int
}

// NewDeleteCategoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the categories controller delete action.
func NewDeleteCategoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCategoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCategoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCategoryID := req.Params["category_id"]
	if len(paramCategoryID) > 0 {
		rawCategoryID := paramCategoryID[0]
		if categoryID, err2 := strconv.Atoi(rawCategoryID); err2 == nil {
			rctx.CategoryID = categoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("category_id", rawCategoryID, "integer"))
		}
		if rctx.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`category_id`, rctx.CategoryID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteCategoriesContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteCategoriesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteCategoriesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteCategoriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteCategoriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteCategoriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCategoriesContext provides the categories list action context.
type ListCategoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListCategoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the categories controller list action.
func NewListCategoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCategoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCategoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCategoriesContext) OK(r CategoryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.category+json; type=collection")
	}
	if r == nil {
		r = CategoryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCategoriesContext) OKLink(r CategoryLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.category+json; type=collection")
	}
	if r == nil {
		r = CategoryLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCategoriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCategoriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowCategoriesContext provides the categories show action context.
type ShowCategoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CategoryID int
}

// NewShowCategoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the categories controller show action.
func NewShowCategoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCategoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCategoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCategoryID := req.Params["category_id"]
	if len(paramCategoryID) > 0 {
		rawCategoryID := paramCategoryID[0]
		if categoryID, err2 := strconv.Atoi(rawCategoryID); err2 == nil {
			rctx.CategoryID = categoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("category_id", rawCategoryID, "integer"))
		}
		if rctx.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`category_id`, rctx.CategoryID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCategoriesContext) OK(r *Category) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.category+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowCategoriesContext) OKLink(r *CategoryLink) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.category+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowCategoriesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCategoriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowCategoriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowCategoriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdateCategoriesContext provides the categories update action context.
type UpdateCategoriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CategoryID int
	Payload    *UpdateCategoriesPayload
}

// NewUpdateCategoriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the categories controller update action.
func NewUpdateCategoriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCategoriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCategoriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCategoryID := req.Params["category_id"]
	if len(paramCategoryID) > 0 {
		rawCategoryID := paramCategoryID[0]
		if categoryID, err2 := strconv.Atoi(rawCategoryID); err2 == nil {
			rctx.CategoryID = categoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("category_id", rawCategoryID, "integer"))
		}
		if rctx.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`category_id`, rctx.CategoryID, 1, true))
		}
	}
	return &rctx, err
}

// updateCategoriesPayload is the categories update action payload.
type updateCategoriesPayload struct {
	// Category Name (Shonen/Shojo/Seinen)
	CategoryName *string `form:"category_name,omitempty" json:"category_name,omitempty" yaml:"category_name,omitempty" xml:"category_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateCategoriesPayload) Validate() (err error) {
	if payload.CategoryName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "category_name"))
	}
	if payload.CategoryName != nil {
		if utf8.RuneCountInString(*payload.CategoryName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.category_name`, *payload.CategoryName, utf8.RuneCountInString(*payload.CategoryName), 1, true))
		}
	}
	if payload.CategoryName != nil {
		if utf8.RuneCountInString(*payload.CategoryName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.category_name`, *payload.CategoryName, utf8.RuneCountInString(*payload.CategoryName), 128, false))
		}
	}
	return
}

// Publicize creates UpdateCategoriesPayload from updateCategoriesPayload
func (payload *updateCategoriesPayload) Publicize() *UpdateCategoriesPayload {
	var pub UpdateCategoriesPayload
	if payload.CategoryName != nil {
		pub.CategoryName = *payload.CategoryName
	}
	return &pub
}

// UpdateCategoriesPayload is the categories update action payload.
type UpdateCategoriesPayload struct {
	// Category Name (Shonen/Shojo/Seinen)
	CategoryName string `form:"category_name" json:"category_name" yaml:"category_name" xml:"category_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateCategoriesPayload) Validate() (err error) {
	if payload.CategoryName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "category_name"))
	}
	if utf8.RuneCountInString(payload.CategoryName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.category_name`, payload.CategoryName, utf8.RuneCountInString(payload.CategoryName), 1, true))
	}
	if utf8.RuneCountInString(payload.CategoryName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.category_name`, payload.CategoryName, utf8.RuneCountInString(payload.CategoryName), 128, false))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateCategoriesContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCategoriesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateCategoriesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateCategoriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdateCategoriesContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateCategoriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdateCategoriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateClassesContext provides the classes create action context.
type CreateClassesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateClassesPayload
}

// NewCreateClassesContext parses the incoming request URL and body, performs validations and creates the
// context used by the classes controller create action.
func NewCreateClassesContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateClassesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateClassesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createClassesPayload is the classes create action payload.
type createClassesPayload struct {
	// Class Name (Thriller/Romance/...)
	ClassName *string `form:"class_name,omitempty" json:"class_name,omitempty" yaml:"class_name,omitempty" xml:"class_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createClassesPayload) Validate() (err error) {
	if payload.ClassName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "class_name"))
	}
	if payload.ClassName != nil {
		if utf8.RuneCountInString(*payload.ClassName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.class_name`, *payload.ClassName, utf8.RuneCountInString(*payload.ClassName), 1, true))
		}
	}
	if payload.ClassName != nil {
		if utf8.RuneCountInString(*payload.ClassName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.class_name`, *payload.ClassName, utf8.RuneCountInString(*payload.ClassName), 128, false))
		}
	}
	return
}

// Publicize creates CreateClassesPayload from createClassesPayload
func (payload *createClassesPayload) Publicize() *CreateClassesPayload {
	var pub CreateClassesPayload
	if payload.ClassName != nil {
		pub.ClassName = *payload.ClassName
	}
	return &pub
}

// CreateClassesPayload is the classes create action payload.
type CreateClassesPayload struct {
	// Class Name (Thriller/Romance/...)
	ClassName string `form:"class_name" json:"class_name" yaml:"class_name" xml:"class_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateClassesPayload) Validate() (err error) {
	if payload.ClassName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "class_name"))
	}
	if utf8.RuneCountInString(payload.ClassName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.class_name`, payload.ClassName, utf8.RuneCountInString(payload.ClassName), 1, true))
	}
	if utf8.RuneCountInString(payload.ClassName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.class_name`, payload.ClassName, utf8.RuneCountInString(payload.ClassName), 128, false))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateClassesContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateClassesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateClassesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateClassesContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateClassesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateClassesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteClassesContext provides the classes delete action context.
type DeleteClassesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClassID int
}

// NewDeleteClassesContext parses the incoming request URL and body, performs validations and creates the
// context used by the classes controller delete action.
func NewDeleteClassesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteClassesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteClassesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := strconv.Atoi(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "integer"))
		}
		if rctx.ClassID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`class_id`, rctx.ClassID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteClassesContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteClassesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteClassesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteClassesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteClassesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteClassesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListClassesContext provides the classes list action context.
type ListClassesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListClassesContext parses the incoming request URL and body, performs validations and creates the
// context used by the classes controller list action.
func NewListClassesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListClassesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListClassesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListClassesContext) OK(r ClassCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.class+json; type=collection")
	}
	if r == nil {
		r = ClassCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListClassesContext) OKLink(r ClassLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.class+json; type=collection")
	}
	if r == nil {
		r = ClassLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListClassesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListClassesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowClassesContext provides the classes show action context.
type ShowClassesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClassID int
}

// NewShowClassesContext parses the incoming request URL and body, performs validations and creates the
// context used by the classes controller show action.
func NewShowClassesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowClassesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowClassesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := strconv.Atoi(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "integer"))
		}
		if rctx.ClassID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`class_id`, rctx.ClassID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowClassesContext) OK(r *Class) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.class+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowClassesContext) OKLink(r *ClassLink) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.class+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowClassesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowClassesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowClassesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowClassesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdateClassesContext provides the classes update action context.
type UpdateClassesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClassID int
	Payload *UpdateClassesPayload
}

// NewUpdateClassesContext parses the incoming request URL and body, performs validations and creates the
// context used by the classes controller update action.
func NewUpdateClassesContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateClassesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateClassesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := strconv.Atoi(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "integer"))
		}
		if rctx.ClassID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`class_id`, rctx.ClassID, 1, true))
		}
	}
	return &rctx, err
}

// updateClassesPayload is the classes update action payload.
type updateClassesPayload struct {
	// Class Name (Thriller/Romance/...)
	ClassName *string `form:"class_name,omitempty" json:"class_name,omitempty" yaml:"class_name,omitempty" xml:"class_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateClassesPayload) Validate() (err error) {
	if payload.ClassName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "class_name"))
	}
	if payload.ClassName != nil {
		if utf8.RuneCountInString(*payload.ClassName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.class_name`, *payload.ClassName, utf8.RuneCountInString(*payload.ClassName), 1, true))
		}
	}
	if payload.ClassName != nil {
		if utf8.RuneCountInString(*payload.ClassName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.class_name`, *payload.ClassName, utf8.RuneCountInString(*payload.ClassName), 128, false))
		}
	}
	return
}

// Publicize creates UpdateClassesPayload from updateClassesPayload
func (payload *updateClassesPayload) Publicize() *UpdateClassesPayload {
	var pub UpdateClassesPayload
	if payload.ClassName != nil {
		pub.ClassName = *payload.ClassName
	}
	return &pub
}

// UpdateClassesPayload is the classes update action payload.
type UpdateClassesPayload struct {
	// Class Name (Thriller/Romance/...)
	ClassName string `form:"class_name" json:"class_name" yaml:"class_name" xml:"class_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateClassesPayload) Validate() (err error) {
	if payload.ClassName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "class_name"))
	}
	if utf8.RuneCountInString(payload.ClassName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.class_name`, payload.ClassName, utf8.RuneCountInString(payload.ClassName), 1, true))
	}
	if utf8.RuneCountInString(payload.ClassName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.class_name`, payload.ClassName, utf8.RuneCountInString(payload.ClassName), 128, false))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateClassesContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateClassesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateClassesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateClassesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdateClassesContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateClassesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdateClassesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateClassificationsContext provides the classifications create action context.
type CreateClassificationsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SeriesID int
	Payload  *CreateClassificationsPayload
}

// NewCreateClassificationsContext parses the incoming request URL and body, performs validations and creates the
// context used by the classifications controller create action.
func NewCreateClassificationsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateClassificationsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateClassificationsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// createClassificationsPayload is the classifications create action payload.
type createClassificationsPayload struct {
	// Unique Class ID
	ClassID *int `form:"class_id,omitempty" json:"class_id,omitempty" yaml:"class_id,omitempty" xml:"class_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createClassificationsPayload) Validate() (err error) {
	if payload.ClassID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "class_id"))
	}
	if payload.ClassID != nil {
		if *payload.ClassID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.class_id`, *payload.ClassID, 1, true))
		}
	}
	return
}

// Publicize creates CreateClassificationsPayload from createClassificationsPayload
func (payload *createClassificationsPayload) Publicize() *CreateClassificationsPayload {
	var pub CreateClassificationsPayload
	if payload.ClassID != nil {
		pub.ClassID = *payload.ClassID
	}
	return &pub
}

// CreateClassificationsPayload is the classifications create action payload.
type CreateClassificationsPayload struct {
	// Unique Class ID
	ClassID int `form:"class_id" json:"class_id" yaml:"class_id" xml:"class_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateClassificationsPayload) Validate() (err error) {
	if payload.ClassID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.class_id`, payload.ClassID, 1, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateClassificationsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateClassificationsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateClassificationsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateClassificationsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateClassificationsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateClassificationsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateClassificationsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteClassificationsContext provides the classifications delete action context.
type DeleteClassificationsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClassID  int
	SeriesID int
}

// NewDeleteClassificationsContext parses the incoming request URL and body, performs validations and creates the
// context used by the classifications controller delete action.
func NewDeleteClassificationsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteClassificationsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteClassificationsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := strconv.Atoi(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "integer"))
		}
		if rctx.ClassID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`class_id`, rctx.ClassID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteClassificationsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteClassificationsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteClassificationsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteClassificationsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteClassificationsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteClassificationsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListClassificationsContext provides the classifications list action context.
type ListClassificationsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SeriesID int
}

// NewListClassificationsContext parses the incoming request URL and body, performs validations and creates the
// context used by the classifications controller list action.
func NewListClassificationsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListClassificationsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListClassificationsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListClassificationsContext) OK(r ClassificationCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.classification+json; type=collection")
	}
	if r == nil {
		r = ClassificationCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListClassificationsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListClassificationsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListClassificationsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListClassificationsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListClassificationsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowClassificationsContext provides the classifications show action context.
type ShowClassificationsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClassID  int
	SeriesID int
}

// NewShowClassificationsContext parses the incoming request URL and body, performs validations and creates the
// context used by the classifications controller show action.
func NewShowClassificationsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowClassificationsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowClassificationsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := strconv.Atoi(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "integer"))
		}
		if rctx.ClassID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`class_id`, rctx.ClassID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowClassificationsContext) OK(r *Classification) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.classification+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowClassificationsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowClassificationsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowClassificationsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowClassificationsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowClassificationsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateCollectionsContext provides the collections create action context.
type CreateCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateCollectionsPayload
}

// NewCreateCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the collections controller create action.
func NewCreateCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createCollectionsPayload is the collections create action payload.
type createCollectionsPayload struct {
	// Collection Name (Découverte/Shonen)
	CollectionName *string `form:"collection_name,omitempty" json:"collection_name,omitempty" yaml:"collection_name,omitempty" xml:"collection_name,omitempty"`
	// Unique Editor ID
	EditorID *int `form:"editor_id,omitempty" json:"editor_id,omitempty" yaml:"editor_id,omitempty" xml:"editor_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createCollectionsPayload) Validate() (err error) {
	if payload.CollectionName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "collection_name"))
	}
	if payload.EditorID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "editor_id"))
	}
	if payload.CollectionName != nil {
		if utf8.RuneCountInString(*payload.CollectionName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.collection_name`, *payload.CollectionName, utf8.RuneCountInString(*payload.CollectionName), 1, true))
		}
	}
	if payload.CollectionName != nil {
		if utf8.RuneCountInString(*payload.CollectionName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.collection_name`, *payload.CollectionName, utf8.RuneCountInString(*payload.CollectionName), 128, false))
		}
	}
	if payload.EditorID != nil {
		if *payload.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.editor_id`, *payload.EditorID, 1, true))
		}
	}
	return
}

// Publicize creates CreateCollectionsPayload from createCollectionsPayload
func (payload *createCollectionsPayload) Publicize() *CreateCollectionsPayload {
	var pub CreateCollectionsPayload
	if payload.CollectionName != nil {
		pub.CollectionName = *payload.CollectionName
	}
	if payload.EditorID != nil {
		pub.EditorID = *payload.EditorID
	}
	return &pub
}

// CreateCollectionsPayload is the collections create action payload.
type CreateCollectionsPayload struct {
	// Collection Name (Découverte/Shonen)
	CollectionName string `form:"collection_name" json:"collection_name" yaml:"collection_name" xml:"collection_name"`
	// Unique Editor ID
	EditorID int `form:"editor_id" json:"editor_id" yaml:"editor_id" xml:"editor_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateCollectionsPayload) Validate() (err error) {
	if payload.CollectionName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "collection_name"))
	}

	if utf8.RuneCountInString(payload.CollectionName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.collection_name`, payload.CollectionName, utf8.RuneCountInString(payload.CollectionName), 1, true))
	}
	if utf8.RuneCountInString(payload.CollectionName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.collection_name`, payload.CollectionName, utf8.RuneCountInString(payload.CollectionName), 128, false))
	}
	if payload.EditorID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.editor_id`, payload.EditorID, 1, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateCollectionsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateCollectionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateCollectionsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateCollectionsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteCollectionsContext provides the collections delete action context.
type DeleteCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
}

// NewDeleteCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the collections controller delete action.
func NewDeleteCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteCollectionsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteCollectionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteCollectionsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsContext provides the collections list action context.
type ListCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the collections controller list action.
func NewListCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowCollectionsContext provides the collections show action context.
type ShowCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
}

// NewShowCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the collections controller show action.
func NewShowCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCollectionsContext) OK(r *Collection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowCollectionsContext) OKLink(r *CollectionLink) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowCollectionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdateCollectionsContext provides the collections update action context.
type UpdateCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	Payload      *UpdateCollectionsPayload
}

// NewUpdateCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the collections controller update action.
func NewUpdateCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	return &rctx, err
}

// updateCollectionsPayload is the collections update action payload.
type updateCollectionsPayload struct {
	// Collection Name (Découverte/Shonen)
	CollectionName *string `form:"collection_name,omitempty" json:"collection_name,omitempty" yaml:"collection_name,omitempty" xml:"collection_name,omitempty"`
	// Unique Editor ID
	EditorID *int `form:"editor_id,omitempty" json:"editor_id,omitempty" yaml:"editor_id,omitempty" xml:"editor_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateCollectionsPayload) Validate() (err error) {
	if payload.CollectionName != nil {
		if utf8.RuneCountInString(*payload.CollectionName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.collection_name`, *payload.CollectionName, utf8.RuneCountInString(*payload.CollectionName), 1, true))
		}
	}
	if payload.CollectionName != nil {
		if utf8.RuneCountInString(*payload.CollectionName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.collection_name`, *payload.CollectionName, utf8.RuneCountInString(*payload.CollectionName), 128, false))
		}
	}
	if payload.EditorID != nil {
		if *payload.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.editor_id`, *payload.EditorID, 1, true))
		}
	}
	return
}

// Publicize creates UpdateCollectionsPayload from updateCollectionsPayload
func (payload *updateCollectionsPayload) Publicize() *UpdateCollectionsPayload {
	var pub UpdateCollectionsPayload
	if payload.CollectionName != nil {
		pub.CollectionName = payload.CollectionName
	}
	if payload.EditorID != nil {
		pub.EditorID = payload.EditorID
	}
	return &pub
}

// UpdateCollectionsPayload is the collections update action payload.
type UpdateCollectionsPayload struct {
	// Collection Name (Découverte/Shonen)
	CollectionName *string `form:"collection_name,omitempty" json:"collection_name,omitempty" yaml:"collection_name,omitempty" xml:"collection_name,omitempty"`
	// Unique Editor ID
	EditorID *int `form:"editor_id,omitempty" json:"editor_id,omitempty" yaml:"editor_id,omitempty" xml:"editor_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateCollectionsPayload) Validate() (err error) {
	if payload.CollectionName != nil {
		if utf8.RuneCountInString(*payload.CollectionName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.collection_name`, *payload.CollectionName, utf8.RuneCountInString(*payload.CollectionName), 1, true))
		}
	}
	if payload.CollectionName != nil {
		if utf8.RuneCountInString(*payload.CollectionName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.collection_name`, *payload.CollectionName, utf8.RuneCountInString(*payload.CollectionName), 128, false))
		}
	}
	if payload.EditorID != nil {
		if *payload.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.editor_id`, *payload.EditorID, 1, true))
		}
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateCollectionsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCollectionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateCollectionsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdateCollectionsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdateCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateEditionsContext provides the editions create action context.
type CreateEditionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateEditionsPayload
}

// NewCreateEditionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the editions controller create action.
func NewCreateEditionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateEditionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateEditionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createEditionsPayload is the editions create action payload.
type createEditionsPayload struct {
	// Unique Book ID
	BookID *int `form:"book_id,omitempty" json:"book_id,omitempty" yaml:"book_id,omitempty" xml:"book_id,omitempty"`
	// Unique Collection ID
	CollectionID *int `form:"collection_id,omitempty" json:"collection_id,omitempty" yaml:"collection_id,omitempty" xml:"collection_id,omitempty"`
	// Unique Print ID
	PrintID *int `form:"print_id,omitempty" json:"print_id,omitempty" yaml:"print_id,omitempty" xml:"print_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createEditionsPayload) Validate() (err error) {
	if payload.BookID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "book_id"))
	}
	if payload.CollectionID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "collection_id"))
	}
	if payload.PrintID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "print_id"))
	}
	if payload.BookID != nil {
		if *payload.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.book_id`, *payload.BookID, 1, true))
		}
	}
	if payload.CollectionID != nil {
		if *payload.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.collection_id`, *payload.CollectionID, 1, true))
		}
	}
	if payload.PrintID != nil {
		if *payload.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.print_id`, *payload.PrintID, 1, true))
		}
	}
	return
}

// Publicize creates CreateEditionsPayload from createEditionsPayload
func (payload *createEditionsPayload) Publicize() *CreateEditionsPayload {
	var pub CreateEditionsPayload
	if payload.BookID != nil {
		pub.BookID = *payload.BookID
	}
	if payload.CollectionID != nil {
		pub.CollectionID = *payload.CollectionID
	}
	if payload.PrintID != nil {
		pub.PrintID = *payload.PrintID
	}
	return &pub
}

// CreateEditionsPayload is the editions create action payload.
type CreateEditionsPayload struct {
	// Unique Book ID
	BookID int `form:"book_id" json:"book_id" yaml:"book_id" xml:"book_id"`
	// Unique Collection ID
	CollectionID int `form:"collection_id" json:"collection_id" yaml:"collection_id" xml:"collection_id"`
	// Unique Print ID
	PrintID int `form:"print_id" json:"print_id" yaml:"print_id" xml:"print_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateEditionsPayload) Validate() (err error) {

	if payload.BookID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.book_id`, payload.BookID, 1, true))
	}
	if payload.CollectionID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.collection_id`, payload.CollectionID, 1, true))
	}
	if payload.PrintID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.print_id`, payload.PrintID, 1, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateEditionsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateEditionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateEditionsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateEditionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateEditionsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateEditionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateEditionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteEditionsContext provides the editions delete action context.
type DeleteEditionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditionID int
}

// NewDeleteEditionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the editions controller delete action.
func NewDeleteEditionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteEditionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteEditionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditionID := req.Params["edition_id"]
	if len(paramEditionID) > 0 {
		rawEditionID := paramEditionID[0]
		if editionID, err2 := strconv.Atoi(rawEditionID); err2 == nil {
			rctx.EditionID = editionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("edition_id", rawEditionID, "integer"))
		}
		if rctx.EditionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`edition_id`, rctx.EditionID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteEditionsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteEditionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteEditionsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteEditionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteEditionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteEditionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListEditionsContext provides the editions list action context.
type ListEditionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListEditionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the editions controller list action.
func NewListEditionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListEditionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListEditionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListEditionsContext) OK(r EditionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.edition+json; type=collection")
	}
	if r == nil {
		r = EditionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListEditionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListEditionsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListEditionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListEditionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListEditionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowEditionsContext provides the editions show action context.
type ShowEditionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditionID int
}

// NewShowEditionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the editions controller show action.
func NewShowEditionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowEditionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowEditionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditionID := req.Params["edition_id"]
	if len(paramEditionID) > 0 {
		rawEditionID := paramEditionID[0]
		if editionID, err2 := strconv.Atoi(rawEditionID); err2 == nil {
			rctx.EditionID = editionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("edition_id", rawEditionID, "integer"))
		}
		if rctx.EditionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`edition_id`, rctx.EditionID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowEditionsContext) OK(r *Edition) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.edition+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowEditionsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowEditionsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowEditionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowEditionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowEditionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateEditorsContext provides the editors create action context.
type CreateEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateEditorsPayload
}

// NewCreateEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the editors controller create action.
func NewCreateEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createEditorsPayload is the editors create action payload.
type createEditorsPayload struct {
	// Editor Name (Glénat/Delcourt)
	EditorName *string `form:"editor_name,omitempty" json:"editor_name,omitempty" yaml:"editor_name,omitempty" xml:"editor_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createEditorsPayload) Validate() (err error) {
	if payload.EditorName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "editor_name"))
	}
	if payload.EditorName != nil {
		if utf8.RuneCountInString(*payload.EditorName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.editor_name`, *payload.EditorName, utf8.RuneCountInString(*payload.EditorName), 1, true))
		}
	}
	if payload.EditorName != nil {
		if utf8.RuneCountInString(*payload.EditorName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.editor_name`, *payload.EditorName, utf8.RuneCountInString(*payload.EditorName), 128, false))
		}
	}
	return
}

// Publicize creates CreateEditorsPayload from createEditorsPayload
func (payload *createEditorsPayload) Publicize() *CreateEditorsPayload {
	var pub CreateEditorsPayload
	if payload.EditorName != nil {
		pub.EditorName = *payload.EditorName
	}
	return &pub
}

// CreateEditorsPayload is the editors create action payload.
type CreateEditorsPayload struct {
	// Editor Name (Glénat/Delcourt)
	EditorName string `form:"editor_name" json:"editor_name" yaml:"editor_name" xml:"editor_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateEditorsPayload) Validate() (err error) {
	if payload.EditorName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "editor_name"))
	}
	if utf8.RuneCountInString(payload.EditorName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.editor_name`, payload.EditorName, utf8.RuneCountInString(payload.EditorName), 1, true))
	}
	if utf8.RuneCountInString(payload.EditorName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.editor_name`, payload.EditorName, utf8.RuneCountInString(payload.EditorName), 128, false))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateEditorsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateEditorsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateEditorsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateEditorsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteEditorsContext provides the editors delete action context.
type DeleteEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
}

// NewDeleteEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the editors controller delete action.
func NewDeleteEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteEditorsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteEditorsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteEditorsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListEditorsContext provides the editors list action context.
type ListEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the editors controller list action.
func NewListEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListEditorsContext) OK(r EditorCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListEditorsContext) OKLink(r EditorLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowEditorsContext provides the editors show action context.
type ShowEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
}

// NewShowEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the editors controller show action.
func NewShowEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowEditorsContext) OK(r *Editor) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowEditorsContext) OKLink(r *EditorLink) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowEditorsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdateEditorsContext provides the editors update action context.
type UpdateEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	Payload  *UpdateEditorsPayload
}

// NewUpdateEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the editors controller update action.
func NewUpdateEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	return &rctx, err
}

// updateEditorsPayload is the editors update action payload.
type updateEditorsPayload struct {
	// Editor Name (Glénat/Delcourt)
	EditorName *string `form:"editor_name,omitempty" json:"editor_name,omitempty" yaml:"editor_name,omitempty" xml:"editor_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateEditorsPayload) Validate() (err error) {
	if payload.EditorName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "editor_name"))
	}
	if payload.EditorName != nil {
		if utf8.RuneCountInString(*payload.EditorName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.editor_name`, *payload.EditorName, utf8.RuneCountInString(*payload.EditorName), 1, true))
		}
	}
	if payload.EditorName != nil {
		if utf8.RuneCountInString(*payload.EditorName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.editor_name`, *payload.EditorName, utf8.RuneCountInString(*payload.EditorName), 128, false))
		}
	}
	return
}

// Publicize creates UpdateEditorsPayload from updateEditorsPayload
func (payload *updateEditorsPayload) Publicize() *UpdateEditorsPayload {
	var pub UpdateEditorsPayload
	if payload.EditorName != nil {
		pub.EditorName = *payload.EditorName
	}
	return &pub
}

// UpdateEditorsPayload is the editors update action payload.
type UpdateEditorsPayload struct {
	// Editor Name (Glénat/Delcourt)
	EditorName string `form:"editor_name" json:"editor_name" yaml:"editor_name" xml:"editor_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateEditorsPayload) Validate() (err error) {
	if payload.EditorName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "editor_name"))
	}
	if utf8.RuneCountInString(payload.EditorName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.editor_name`, payload.EditorName, utf8.RuneCountInString(payload.EditorName), 1, true))
	}
	if utf8.RuneCountInString(payload.EditorName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.editor_name`, payload.EditorName, utf8.RuneCountInString(payload.EditorName), 128, false))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateEditorsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateEditorsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateEditorsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdateEditorsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdateEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *HealthHealthContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// AddOwnershipsContext provides the ownerships add action context.
type AddOwnershipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *AddOwnershipsPayload
}

// NewAddOwnershipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the ownerships controller add action.
func NewAddOwnershipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddOwnershipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddOwnershipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// addOwnershipsPayload is the ownerships add action payload.
type addOwnershipsPayload struct {
	// Book ISBN
	BookIsbn *string `form:"book_isbn,omitempty" json:"book_isbn,omitempty" yaml:"book_isbn,omitempty" xml:"book_isbn,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *addOwnershipsPayload) Validate() (err error) {
	if payload.BookIsbn == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "book_isbn"))
	}
	if payload.BookIsbn != nil {
		if utf8.RuneCountInString(*payload.BookIsbn) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_isbn`, *payload.BookIsbn, utf8.RuneCountInString(*payload.BookIsbn), 1, true))
		}
	}
	if payload.BookIsbn != nil {
		if utf8.RuneCountInString(*payload.BookIsbn) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_isbn`, *payload.BookIsbn, utf8.RuneCountInString(*payload.BookIsbn), 128, false))
		}
	}
	return
}

// Publicize creates AddOwnershipsPayload from addOwnershipsPayload
func (payload *addOwnershipsPayload) Publicize() *AddOwnershipsPayload {
	var pub AddOwnershipsPayload
	if payload.BookIsbn != nil {
		pub.BookIsbn = *payload.BookIsbn
	}
	return &pub
}

// AddOwnershipsPayload is the ownerships add action payload.
type AddOwnershipsPayload struct {
	// Book ISBN
	BookIsbn string `form:"book_isbn" json:"book_isbn" yaml:"book_isbn" xml:"book_isbn"`
}

// Validate runs the validation rules defined in the design.
func (payload *AddOwnershipsPayload) Validate() (err error) {
	if payload.BookIsbn == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "book_isbn"))
	}
	if utf8.RuneCountInString(payload.BookIsbn) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_isbn`, payload.BookIsbn, utf8.RuneCountInString(payload.BookIsbn), 1, true))
	}
	if utf8.RuneCountInString(payload.BookIsbn) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.book_isbn`, payload.BookIsbn, utf8.RuneCountInString(payload.BookIsbn), 128, false))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *AddOwnershipsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddOwnershipsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *AddOwnershipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *AddOwnershipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *AddOwnershipsContext) UnprocessableEntity(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 422, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddOwnershipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *AddOwnershipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateOwnershipsContext provides the ownerships create action context.
type CreateOwnershipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *CreateOwnershipsPayload
}

// NewCreateOwnershipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the ownerships controller create action.
func NewCreateOwnershipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateOwnershipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateOwnershipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// createOwnershipsPayload is the ownerships create action payload.
type createOwnershipsPayload struct {
	// Unique Book ID
	BookID *int `form:"book_id,omitempty" json:"book_id,omitempty" yaml:"book_id,omitempty" xml:"book_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createOwnershipsPayload) Validate() (err error) {
	if payload.BookID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "book_id"))
	}
	if payload.BookID != nil {
		if *payload.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.book_id`, *payload.BookID, 1, true))
		}
	}
	return
}

// Publicize creates CreateOwnershipsPayload from createOwnershipsPayload
func (payload *createOwnershipsPayload) Publicize() *CreateOwnershipsPayload {
	var pub CreateOwnershipsPayload
	if payload.BookID != nil {
		pub.BookID = *payload.BookID
	}
	return &pub
}

// CreateOwnershipsPayload is the ownerships create action payload.
type CreateOwnershipsPayload struct {
	// Unique Book ID
	BookID int `form:"book_id" json:"book_id" yaml:"book_id" xml:"book_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateOwnershipsPayload) Validate() (err error) {
	if payload.BookID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.book_id`, payload.BookID, 1, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateOwnershipsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateOwnershipsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateOwnershipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateOwnershipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateOwnershipsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateOwnershipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateOwnershipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteOwnershipsContext provides the ownerships delete action context.
type DeleteOwnershipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID int
	UserID int
}

// NewDeleteOwnershipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the ownerships controller delete action.
func NewDeleteOwnershipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteOwnershipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteOwnershipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["book_id"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("book_id", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`book_id`, rctx.BookID, 1, true))
		}
	}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteOwnershipsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteOwnershipsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteOwnershipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteOwnershipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteOwnershipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteOwnershipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListOwnershipsContext provides the ownerships list action context.
type ListOwnershipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewListOwnershipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the ownerships controller list action.
func NewListOwnershipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListOwnershipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListOwnershipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListOwnershipsContext) OK(r OwnershipCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.ownership+json; type=collection")
	}
	if r == nil {
		r = OwnershipCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListOwnershipsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListOwnershipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListOwnershipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListOwnershipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListOwnershipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowOwnershipsContext provides the ownerships show action context.
type ShowOwnershipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID int
	UserID int
}

// NewShowOwnershipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the ownerships controller show action.
func NewShowOwnershipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowOwnershipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowOwnershipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["book_id"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("book_id", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`book_id`, rctx.BookID, 1, true))
		}
	}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowOwnershipsContext) OK(r *Ownership) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.ownership+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowOwnershipsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowOwnershipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowOwnershipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowOwnershipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowOwnershipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// GetPasswordContext provides the password get action context.
type GetPasswordContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email string
}

// NewGetPasswordContext parses the incoming request URL and body, performs validations and creates the
// context used by the password controller get action.
func NewGetPasswordContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetPasswordContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetPasswordContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("email"))
	} else {
		rawEmail := paramEmail[0]
		rctx.Email = rawEmail
		if err2 := goa.ValidateFormat(goa.FormatEmail, rctx.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, rctx.Email, goa.FormatEmail, err2))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *GetPasswordContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetPasswordContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *GetPasswordContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetPasswordContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *GetPasswordContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdatePasswordContext provides the password update action context.
type UpdatePasswordContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *PasswordChangePayload
}

// NewUpdatePasswordContext parses the incoming request URL and body, performs validations and creates the
// context used by the password controller update action.
func NewUpdatePasswordContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdatePasswordContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdatePasswordContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdatePasswordContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdatePasswordContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdatePasswordContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdatePasswordContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdatePasswordContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreatePrintsContext provides the prints create action context.
type CreatePrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreatePrintsPayload
}

// NewCreatePrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the prints controller create action.
func NewCreatePrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreatePrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreatePrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createPrintsPayload is the prints create action payload.
type createPrintsPayload struct {
	// Print Name (Deluxe/Ultimate/Pocket)
	PrintName *string `form:"print_name,omitempty" json:"print_name,omitempty" yaml:"print_name,omitempty" xml:"print_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createPrintsPayload) Validate() (err error) {
	if payload.PrintName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "print_name"))
	}
	if payload.PrintName != nil {
		if utf8.RuneCountInString(*payload.PrintName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.print_name`, *payload.PrintName, utf8.RuneCountInString(*payload.PrintName), 1, true))
		}
	}
	if payload.PrintName != nil {
		if utf8.RuneCountInString(*payload.PrintName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.print_name`, *payload.PrintName, utf8.RuneCountInString(*payload.PrintName), 128, false))
		}
	}
	return
}

// Publicize creates CreatePrintsPayload from createPrintsPayload
func (payload *createPrintsPayload) Publicize() *CreatePrintsPayload {
	var pub CreatePrintsPayload
	if payload.PrintName != nil {
		pub.PrintName = *payload.PrintName
	}
	return &pub
}

// CreatePrintsPayload is the prints create action payload.
type CreatePrintsPayload struct {
	// Print Name (Deluxe/Ultimate/Pocket)
	PrintName string `form:"print_name" json:"print_name" yaml:"print_name" xml:"print_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreatePrintsPayload) Validate() (err error) {
	if payload.PrintName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "print_name"))
	}
	if utf8.RuneCountInString(payload.PrintName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.print_name`, payload.PrintName, utf8.RuneCountInString(payload.PrintName), 1, true))
	}
	if utf8.RuneCountInString(payload.PrintName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.print_name`, payload.PrintName, utf8.RuneCountInString(payload.PrintName), 128, false))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePrintsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreatePrintsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreatePrintsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreatePrintsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreatePrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreatePrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeletePrintsContext provides the prints delete action context.
type DeletePrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID int
}

// NewDeletePrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the prints controller delete action.
func NewDeletePrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeletePrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeletePrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeletePrintsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeletePrintsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeletePrintsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeletePrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeletePrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeletePrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsContext provides the prints list action context.
type ListPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the prints controller list action.
func NewListPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowPrintsContext provides the prints show action context.
type ShowPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID int
}

// NewShowPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the prints controller show action.
func NewShowPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPrintsContext) OK(r *Print) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowPrintsContext) OKLink(r *PrintLink) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowPrintsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdatePrintsContext provides the prints update action context.
type UpdatePrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID int
	Payload *UpdatePrintsPayload
}

// NewUpdatePrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the prints controller update action.
func NewUpdatePrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdatePrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdatePrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// updatePrintsPayload is the prints update action payload.
type updatePrintsPayload struct {
	// Print Name (Deluxe/Ultimate/Pocket)
	PrintName *string `form:"print_name,omitempty" json:"print_name,omitempty" yaml:"print_name,omitempty" xml:"print_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updatePrintsPayload) Validate() (err error) {
	if payload.PrintName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "print_name"))
	}
	if payload.PrintName != nil {
		if utf8.RuneCountInString(*payload.PrintName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.print_name`, *payload.PrintName, utf8.RuneCountInString(*payload.PrintName), 1, true))
		}
	}
	if payload.PrintName != nil {
		if utf8.RuneCountInString(*payload.PrintName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.print_name`, *payload.PrintName, utf8.RuneCountInString(*payload.PrintName), 128, false))
		}
	}
	return
}

// Publicize creates UpdatePrintsPayload from updatePrintsPayload
func (payload *updatePrintsPayload) Publicize() *UpdatePrintsPayload {
	var pub UpdatePrintsPayload
	if payload.PrintName != nil {
		pub.PrintName = *payload.PrintName
	}
	return &pub
}

// UpdatePrintsPayload is the prints update action payload.
type UpdatePrintsPayload struct {
	// Print Name (Deluxe/Ultimate/Pocket)
	PrintName string `form:"print_name" json:"print_name" yaml:"print_name" xml:"print_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdatePrintsPayload) Validate() (err error) {
	if payload.PrintName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "print_name"))
	}
	if utf8.RuneCountInString(payload.PrintName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.print_name`, payload.PrintName, utf8.RuneCountInString(payload.PrintName), 1, true))
	}
	if utf8.RuneCountInString(payload.PrintName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.print_name`, payload.PrintName, utf8.RuneCountInString(payload.PrintName), 128, false))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdatePrintsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdatePrintsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdatePrintsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdatePrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdatePrintsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdatePrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdatePrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCategoriesRelationAuthorContext provides the relationAuthor listCategories action context.
type ListCategoriesRelationAuthorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorID int
}

// NewListCategoriesRelationAuthorContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationAuthor controller listCategories action.
func NewListCategoriesRelationAuthorContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCategoriesRelationAuthorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCategoriesRelationAuthorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := strconv.Atoi(rawAuthorID); err2 == nil {
			rctx.AuthorID = authorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "integer"))
		}
		if rctx.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`author_id`, rctx.AuthorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCategoriesRelationAuthorContext) OK(r CategoryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.category+json; type=collection")
	}
	if r == nil {
		r = CategoryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCategoriesRelationAuthorContext) OKLink(r CategoryLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.category+json; type=collection")
	}
	if r == nil {
		r = CategoryLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCategoriesRelationAuthorContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCategoriesRelationAuthorContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCategoriesRelationAuthorContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListClassesRelationAuthorContext provides the relationAuthor listClasses action context.
type ListClassesRelationAuthorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorID int
}

// NewListClassesRelationAuthorContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationAuthor controller listClasses action.
func NewListClassesRelationAuthorContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListClassesRelationAuthorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListClassesRelationAuthorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := strconv.Atoi(rawAuthorID); err2 == nil {
			rctx.AuthorID = authorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "integer"))
		}
		if rctx.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`author_id`, rctx.AuthorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListClassesRelationAuthorContext) OK(r ClassCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.class+json; type=collection")
	}
	if r == nil {
		r = ClassCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListClassesRelationAuthorContext) OKLink(r ClassLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.class+json; type=collection")
	}
	if r == nil {
		r = ClassLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListClassesRelationAuthorContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListClassesRelationAuthorContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListClassesRelationAuthorContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListRolesRelationAuthorContext provides the relationAuthor listRoles action context.
type ListRolesRelationAuthorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorID int
}

// NewListRolesRelationAuthorContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationAuthor controller listRoles action.
func NewListRolesRelationAuthorContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListRolesRelationAuthorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListRolesRelationAuthorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := strconv.Atoi(rawAuthorID); err2 == nil {
			rctx.AuthorID = authorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "integer"))
		}
		if rctx.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`author_id`, rctx.AuthorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListRolesRelationAuthorContext) OK(r RoleCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.role+json; type=collection")
	}
	if r == nil {
		r = RoleCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListRolesRelationAuthorContext) OKLink(r RoleLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.role+json; type=collection")
	}
	if r == nil {
		r = RoleLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListRolesRelationAuthorContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListRolesRelationAuthorContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListRolesRelationAuthorContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesRelationAuthorContext provides the relationAuthor listSeries action context.
type ListSeriesRelationAuthorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorID int
}

// NewListSeriesRelationAuthorContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationAuthor controller listSeries action.
func NewListSeriesRelationAuthorContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesRelationAuthorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesRelationAuthorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := strconv.Atoi(rawAuthorID); err2 == nil {
			rctx.AuthorID = authorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "integer"))
		}
		if rctx.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`author_id`, rctx.AuthorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationAuthorContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationAuthorContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesRelationAuthorContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesRelationAuthorContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesRelationAuthorContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesByCategoryRelationAuthorContext provides the relationAuthor listSeriesByCategory action context.
type ListSeriesByCategoryRelationAuthorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorID   int
	CategoryID int
}

// NewListSeriesByCategoryRelationAuthorContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationAuthor controller listSeriesByCategory action.
func NewListSeriesByCategoryRelationAuthorContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesByCategoryRelationAuthorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesByCategoryRelationAuthorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := strconv.Atoi(rawAuthorID); err2 == nil {
			rctx.AuthorID = authorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "integer"))
		}
		if rctx.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`author_id`, rctx.AuthorID, 1, true))
		}
	}
	paramCategoryID := req.Params["category_id"]
	if len(paramCategoryID) > 0 {
		rawCategoryID := paramCategoryID[0]
		if categoryID, err2 := strconv.Atoi(rawCategoryID); err2 == nil {
			rctx.CategoryID = categoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("category_id", rawCategoryID, "integer"))
		}
		if rctx.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`category_id`, rctx.CategoryID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesByCategoryRelationAuthorContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesByCategoryRelationAuthorContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesByCategoryRelationAuthorContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesByCategoryRelationAuthorContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesByCategoryRelationAuthorContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesByClassRelationAuthorContext provides the relationAuthor listSeriesByClass action context.
type ListSeriesByClassRelationAuthorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorID int
	ClassID  int
}

// NewListSeriesByClassRelationAuthorContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationAuthor controller listSeriesByClass action.
func NewListSeriesByClassRelationAuthorContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesByClassRelationAuthorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesByClassRelationAuthorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := strconv.Atoi(rawAuthorID); err2 == nil {
			rctx.AuthorID = authorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "integer"))
		}
		if rctx.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`author_id`, rctx.AuthorID, 1, true))
		}
	}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := strconv.Atoi(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "integer"))
		}
		if rctx.ClassID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`class_id`, rctx.ClassID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesByClassRelationAuthorContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesByClassRelationAuthorContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesByClassRelationAuthorContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesByClassRelationAuthorContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesByClassRelationAuthorContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesByRoleRelationAuthorContext provides the relationAuthor listSeriesByRole action context.
type ListSeriesByRoleRelationAuthorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorID int
	RoleID   int
}

// NewListSeriesByRoleRelationAuthorContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationAuthor controller listSeriesByRole action.
func NewListSeriesByRoleRelationAuthorContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesByRoleRelationAuthorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesByRoleRelationAuthorContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := strconv.Atoi(rawAuthorID); err2 == nil {
			rctx.AuthorID = authorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "integer"))
		}
		if rctx.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`author_id`, rctx.AuthorID, 1, true))
		}
	}
	paramRoleID := req.Params["role_id"]
	if len(paramRoleID) > 0 {
		rawRoleID := paramRoleID[0]
		if roleID, err2 := strconv.Atoi(rawRoleID); err2 == nil {
			rctx.RoleID = roleID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("role_id", rawRoleID, "integer"))
		}
		if rctx.RoleID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`role_id`, rctx.RoleID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesByRoleRelationAuthorContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesByRoleRelationAuthorContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesByRoleRelationAuthorContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesByRoleRelationAuthorContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesByRoleRelationAuthorContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListAuthorsRelationCategoryContext provides the relationCategory listAuthors action context.
type ListAuthorsRelationCategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CategoryID int
}

// NewListAuthorsRelationCategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCategory controller listAuthors action.
func NewListAuthorsRelationCategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAuthorsRelationCategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAuthorsRelationCategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCategoryID := req.Params["category_id"]
	if len(paramCategoryID) > 0 {
		rawCategoryID := paramCategoryID[0]
		if categoryID, err2 := strconv.Atoi(rawCategoryID); err2 == nil {
			rctx.CategoryID = categoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("category_id", rawCategoryID, "integer"))
		}
		if rctx.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`category_id`, rctx.CategoryID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAuthorsRelationCategoryContext) OK(r AuthorCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.author+json; type=collection")
	}
	if r == nil {
		r = AuthorCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListAuthorsRelationCategoryContext) OKLink(r AuthorLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.author+json; type=collection")
	}
	if r == nil {
		r = AuthorLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListAuthorsRelationCategoryContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListAuthorsRelationCategoryContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListAuthorsRelationCategoryContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListClassesRelationCategoryContext provides the relationCategory listClasses action context.
type ListClassesRelationCategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CategoryID int
}

// NewListClassesRelationCategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCategory controller listClasses action.
func NewListClassesRelationCategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListClassesRelationCategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListClassesRelationCategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCategoryID := req.Params["category_id"]
	if len(paramCategoryID) > 0 {
		rawCategoryID := paramCategoryID[0]
		if categoryID, err2 := strconv.Atoi(rawCategoryID); err2 == nil {
			rctx.CategoryID = categoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("category_id", rawCategoryID, "integer"))
		}
		if rctx.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`category_id`, rctx.CategoryID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListClassesRelationCategoryContext) OK(r ClassCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.class+json; type=collection")
	}
	if r == nil {
		r = ClassCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListClassesRelationCategoryContext) OKLink(r ClassLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.class+json; type=collection")
	}
	if r == nil {
		r = ClassLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListClassesRelationCategoryContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListClassesRelationCategoryContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListClassesRelationCategoryContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesRelationCategoryContext provides the relationCategory listSeries action context.
type ListSeriesRelationCategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CategoryID int
}

// NewListSeriesRelationCategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCategory controller listSeries action.
func NewListSeriesRelationCategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesRelationCategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesRelationCategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCategoryID := req.Params["category_id"]
	if len(paramCategoryID) > 0 {
		rawCategoryID := paramCategoryID[0]
		if categoryID, err2 := strconv.Atoi(rawCategoryID); err2 == nil {
			rctx.CategoryID = categoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("category_id", rawCategoryID, "integer"))
		}
		if rctx.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`category_id`, rctx.CategoryID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationCategoryContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationCategoryContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesRelationCategoryContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesRelationCategoryContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesRelationCategoryContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesByClassRelationCategoryContext provides the relationCategory listSeriesByClass action context.
type ListSeriesByClassRelationCategoryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CategoryID int
	ClassID    int
}

// NewListSeriesByClassRelationCategoryContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCategory controller listSeriesByClass action.
func NewListSeriesByClassRelationCategoryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesByClassRelationCategoryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesByClassRelationCategoryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCategoryID := req.Params["category_id"]
	if len(paramCategoryID) > 0 {
		rawCategoryID := paramCategoryID[0]
		if categoryID, err2 := strconv.Atoi(rawCategoryID); err2 == nil {
			rctx.CategoryID = categoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("category_id", rawCategoryID, "integer"))
		}
		if rctx.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`category_id`, rctx.CategoryID, 1, true))
		}
	}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := strconv.Atoi(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "integer"))
		}
		if rctx.ClassID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`class_id`, rctx.ClassID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesByClassRelationCategoryContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesByClassRelationCategoryContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesByClassRelationCategoryContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesByClassRelationCategoryContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesByClassRelationCategoryContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCategoriesRelationClassContext provides the relationClass listCategories action context.
type ListCategoriesRelationClassContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClassID int
}

// NewListCategoriesRelationClassContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationClass controller listCategories action.
func NewListCategoriesRelationClassContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCategoriesRelationClassContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCategoriesRelationClassContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := strconv.Atoi(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "integer"))
		}
		if rctx.ClassID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`class_id`, rctx.ClassID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCategoriesRelationClassContext) OK(r CategoryCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.category+json; type=collection")
	}
	if r == nil {
		r = CategoryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCategoriesRelationClassContext) OKLink(r CategoryLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.category+json; type=collection")
	}
	if r == nil {
		r = CategoryLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCategoriesRelationClassContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCategoriesRelationClassContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCategoriesRelationClassContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesRelationClassContext provides the relationClass listSeries action context.
type ListSeriesRelationClassContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ClassID int
}

// NewListSeriesRelationClassContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationClass controller listSeries action.
func NewListSeriesRelationClassContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesRelationClassContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesRelationClassContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := strconv.Atoi(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "integer"))
		}
		if rctx.ClassID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`class_id`, rctx.ClassID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationClassContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationClassContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesRelationClassContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesRelationClassContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesRelationClassContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesByCategoryRelationClassContext provides the relationClass listSeriesByCategory action context.
type ListSeriesByCategoryRelationClassContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CategoryID int
	ClassID    int
}

// NewListSeriesByCategoryRelationClassContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationClass controller listSeriesByCategory action.
func NewListSeriesByCategoryRelationClassContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesByCategoryRelationClassContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesByCategoryRelationClassContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCategoryID := req.Params["category_id"]
	if len(paramCategoryID) > 0 {
		rawCategoryID := paramCategoryID[0]
		if categoryID, err2 := strconv.Atoi(rawCategoryID); err2 == nil {
			rctx.CategoryID = categoryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("category_id", rawCategoryID, "integer"))
		}
		if rctx.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`category_id`, rctx.CategoryID, 1, true))
		}
	}
	paramClassID := req.Params["class_id"]
	if len(paramClassID) > 0 {
		rawClassID := paramClassID[0]
		if classID, err2 := strconv.Atoi(rawClassID); err2 == nil {
			rctx.ClassID = classID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("class_id", rawClassID, "integer"))
		}
		if rctx.ClassID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`class_id`, rctx.ClassID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesByCategoryRelationClassContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesByCategoryRelationClassContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesByCategoryRelationClassContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesByCategoryRelationClassContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesByCategoryRelationClassContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationCollectionContext provides the relationCollection listBooks action context.
type ListBooksRelationCollectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
}

// NewListBooksRelationCollectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCollection controller listBooks action.
func NewListBooksRelationCollectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationCollectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationCollectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationCollectionContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationCollectionContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationCollectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationCollectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationCollectionContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByPrintRelationCollectionContext provides the relationCollection listBooksByPrint action context.
type ListBooksByPrintRelationCollectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	PrintID      int
}

// NewListBooksByPrintRelationCollectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCollection controller listBooksByPrint action.
func NewListBooksByPrintRelationCollectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByPrintRelationCollectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByPrintRelationCollectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintRelationCollectionContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintRelationCollectionContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByPrintRelationCollectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByPrintRelationCollectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByPrintRelationCollectionContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByPrintSeriesRelationCollectionContext provides the relationCollection listBooksByPrintSeries action context.
type ListBooksByPrintSeriesRelationCollectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	PrintID      int
	SeriesID     int
}

// NewListBooksByPrintSeriesRelationCollectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCollection controller listBooksByPrintSeries action.
func NewListBooksByPrintSeriesRelationCollectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByPrintSeriesRelationCollectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByPrintSeriesRelationCollectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintSeriesRelationCollectionContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintSeriesRelationCollectionContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByPrintSeriesRelationCollectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByPrintSeriesRelationCollectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByPrintSeriesRelationCollectionContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksBySeriesRelationCollectionContext provides the relationCollection listBooksBySeries action context.
type ListBooksBySeriesRelationCollectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	SeriesID     int
}

// NewListBooksBySeriesRelationCollectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCollection controller listBooksBySeries action.
func NewListBooksBySeriesRelationCollectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksBySeriesRelationCollectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksBySeriesRelationCollectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesRelationCollectionContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesRelationCollectionContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksBySeriesRelationCollectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksBySeriesRelationCollectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksBySeriesRelationCollectionContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksBySeriesPrintRelationCollectionContext provides the relationCollection listBooksBySeriesPrint action context.
type ListBooksBySeriesPrintRelationCollectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	PrintID      int
	SeriesID     int
}

// NewListBooksBySeriesPrintRelationCollectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCollection controller listBooksBySeriesPrint action.
func NewListBooksBySeriesPrintRelationCollectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksBySeriesPrintRelationCollectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksBySeriesPrintRelationCollectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesPrintRelationCollectionContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesPrintRelationCollectionContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksBySeriesPrintRelationCollectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksBySeriesPrintRelationCollectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksBySeriesPrintRelationCollectionContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsRelationCollectionContext provides the relationCollection listPrints action context.
type ListPrintsRelationCollectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
}

// NewListPrintsRelationCollectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCollection controller listPrints action.
func NewListPrintsRelationCollectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsRelationCollectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsRelationCollectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationCollectionContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationCollectionContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPrintsRelationCollectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsRelationCollectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsRelationCollectionContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsBySeriesRelationCollectionContext provides the relationCollection listPrintsBySeries action context.
type ListPrintsBySeriesRelationCollectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	SeriesID     int
}

// NewListPrintsBySeriesRelationCollectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCollection controller listPrintsBySeries action.
func NewListPrintsBySeriesRelationCollectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsBySeriesRelationCollectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsBySeriesRelationCollectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsBySeriesRelationCollectionContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsBySeriesRelationCollectionContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPrintsBySeriesRelationCollectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsBySeriesRelationCollectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsBySeriesRelationCollectionContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesRelationCollectionContext provides the relationCollection listSeries action context.
type ListSeriesRelationCollectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
}

// NewListSeriesRelationCollectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCollection controller listSeries action.
func NewListSeriesRelationCollectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesRelationCollectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesRelationCollectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationCollectionContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationCollectionContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesRelationCollectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesRelationCollectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesRelationCollectionContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesByPrintRelationCollectionContext provides the relationCollection listSeriesByPrint action context.
type ListSeriesByPrintRelationCollectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	PrintID      int
}

// NewListSeriesByPrintRelationCollectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationCollection controller listSeriesByPrint action.
func NewListSeriesByPrintRelationCollectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesByPrintRelationCollectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesByPrintRelationCollectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesByPrintRelationCollectionContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesByPrintRelationCollectionContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesByPrintRelationCollectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesByPrintRelationCollectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesByPrintRelationCollectionContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationEditorsContext provides the relationEditors listBooks action context.
type ListBooksRelationEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
}

// NewListBooksRelationEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditors controller listBooks action.
func NewListBooksRelationEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationEditorsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationEditorsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsRelationEditorsContext provides the relationEditors listCollections action context.
type ListCollectionsRelationEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
}

// NewListCollectionsRelationEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditors controller listCollections action.
func NewListCollectionsRelationEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsRelationEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsRelationEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationEditorsContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationEditorsContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsRelationEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsRelationEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsRelationEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsRelationEditorsContext provides the relationEditors listPrints action context.
type ListPrintsRelationEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
}

// NewListPrintsRelationEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditors controller listPrints action.
func NewListPrintsRelationEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsRelationEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsRelationEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationEditorsContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationEditorsContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPrintsRelationEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsRelationEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsRelationEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesRelationEditorsContext provides the relationEditors listSeries action context.
type ListSeriesRelationEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
}

// NewListSeriesRelationEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditors controller listSeries action.
func NewListSeriesRelationEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesRelationEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesRelationEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationEditorsContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationEditorsContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesRelationEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesRelationEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesRelationEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationEditorsCollectionsContext provides the relationEditorsCollections listBooks action context.
type ListBooksRelationEditorsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
}

// NewListBooksRelationEditorsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsCollections controller listBooks action.
func NewListBooksRelationEditorsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationEditorsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationEditorsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationEditorsCollectionsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationEditorsCollectionsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationEditorsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationEditorsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationEditorsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByPrintRelationEditorsCollectionsContext provides the relationEditorsCollections listBooksByPrint action context.
type ListBooksByPrintRelationEditorsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
}

// NewListBooksByPrintRelationEditorsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsCollections controller listBooksByPrint action.
func NewListBooksByPrintRelationEditorsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByPrintRelationEditorsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByPrintRelationEditorsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintRelationEditorsCollectionsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintRelationEditorsCollectionsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByPrintRelationEditorsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByPrintRelationEditorsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByPrintRelationEditorsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByPrintSeriesRelationEditorsCollectionsContext provides the relationEditorsCollections listBooksByPrintSeries action context.
type ListBooksByPrintSeriesRelationEditorsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksByPrintSeriesRelationEditorsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsCollections controller listBooksByPrintSeries action.
func NewListBooksByPrintSeriesRelationEditorsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByPrintSeriesRelationEditorsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByPrintSeriesRelationEditorsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintSeriesRelationEditorsCollectionsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintSeriesRelationEditorsCollectionsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByPrintSeriesRelationEditorsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByPrintSeriesRelationEditorsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByPrintSeriesRelationEditorsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksBySeriesRelationEditorsCollectionsContext provides the relationEditorsCollections listBooksBySeries action context.
type ListBooksBySeriesRelationEditorsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	SeriesID     int
}

// NewListBooksBySeriesRelationEditorsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsCollections controller listBooksBySeries action.
func NewListBooksBySeriesRelationEditorsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksBySeriesRelationEditorsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksBySeriesRelationEditorsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesRelationEditorsCollectionsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesRelationEditorsCollectionsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksBySeriesRelationEditorsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksBySeriesRelationEditorsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksBySeriesRelationEditorsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksBySeriesPrintRelationEditorsCollectionsContext provides the relationEditorsCollections listBooksBySeriesPrint action context.
type ListBooksBySeriesPrintRelationEditorsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksBySeriesPrintRelationEditorsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsCollections controller listBooksBySeriesPrint action.
func NewListBooksBySeriesPrintRelationEditorsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksBySeriesPrintRelationEditorsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksBySeriesPrintRelationEditorsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesPrintRelationEditorsCollectionsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesPrintRelationEditorsCollectionsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksBySeriesPrintRelationEditorsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksBySeriesPrintRelationEditorsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksBySeriesPrintRelationEditorsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsRelationEditorsCollectionsContext provides the relationEditorsCollections listPrints action context.
type ListPrintsRelationEditorsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
}

// NewListPrintsRelationEditorsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsCollections controller listPrints action.
func NewListPrintsRelationEditorsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsRelationEditorsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsRelationEditorsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationEditorsCollectionsContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationEditorsCollectionsContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPrintsRelationEditorsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsRelationEditorsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsRelationEditorsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsBySeriesRelationEditorsCollectionsContext provides the relationEditorsCollections listPrintsBySeries action context.
type ListPrintsBySeriesRelationEditorsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	SeriesID     int
}

// NewListPrintsBySeriesRelationEditorsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsCollections controller listPrintsBySeries action.
func NewListPrintsBySeriesRelationEditorsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsBySeriesRelationEditorsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsBySeriesRelationEditorsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsBySeriesRelationEditorsCollectionsContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsBySeriesRelationEditorsCollectionsContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPrintsBySeriesRelationEditorsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsBySeriesRelationEditorsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsBySeriesRelationEditorsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesRelationEditorsCollectionsContext provides the relationEditorsCollections listSeries action context.
type ListSeriesRelationEditorsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
}

// NewListSeriesRelationEditorsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsCollections controller listSeries action.
func NewListSeriesRelationEditorsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesRelationEditorsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesRelationEditorsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationEditorsCollectionsContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationEditorsCollectionsContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesRelationEditorsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesRelationEditorsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesRelationEditorsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesByPrintRelationEditorsCollectionsContext provides the relationEditorsCollections listSeriesByPrint action context.
type ListSeriesByPrintRelationEditorsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
}

// NewListSeriesByPrintRelationEditorsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsCollections controller listSeriesByPrint action.
func NewListSeriesByPrintRelationEditorsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesByPrintRelationEditorsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesByPrintRelationEditorsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesByPrintRelationEditorsCollectionsContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesByPrintRelationEditorsCollectionsContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesByPrintRelationEditorsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesByPrintRelationEditorsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesByPrintRelationEditorsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationEditorsPrintsContext provides the relationEditorsPrints listBooks action context.
type ListBooksRelationEditorsPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
}

// NewListBooksRelationEditorsPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsPrints controller listBooks action.
func NewListBooksRelationEditorsPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationEditorsPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationEditorsPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationEditorsPrintsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationEditorsPrintsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationEditorsPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationEditorsPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationEditorsPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByCollectionRelationEditorsPrintsContext provides the relationEditorsPrints listBooksByCollection action context.
type ListBooksByCollectionRelationEditorsPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
}

// NewListBooksByCollectionRelationEditorsPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsPrints controller listBooksByCollection action.
func NewListBooksByCollectionRelationEditorsPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByCollectionRelationEditorsPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByCollectionRelationEditorsPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionRelationEditorsPrintsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionRelationEditorsPrintsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByCollectionRelationEditorsPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByCollectionRelationEditorsPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByCollectionRelationEditorsPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByCollectionSeriesRelationEditorsPrintsContext provides the relationEditorsPrints listBooksByCollectionSeries action context.
type ListBooksByCollectionSeriesRelationEditorsPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksByCollectionSeriesRelationEditorsPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsPrints controller listBooksByCollectionSeries action.
func NewListBooksByCollectionSeriesRelationEditorsPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByCollectionSeriesRelationEditorsPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByCollectionSeriesRelationEditorsPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionSeriesRelationEditorsPrintsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionSeriesRelationEditorsPrintsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByCollectionSeriesRelationEditorsPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByCollectionSeriesRelationEditorsPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByCollectionSeriesRelationEditorsPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksBySeriesRelationEditorsPrintsContext provides the relationEditorsPrints listBooksBySeries action context.
type ListBooksBySeriesRelationEditorsPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListBooksBySeriesRelationEditorsPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsPrints controller listBooksBySeries action.
func NewListBooksBySeriesRelationEditorsPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksBySeriesRelationEditorsPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksBySeriesRelationEditorsPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesRelationEditorsPrintsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesRelationEditorsPrintsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksBySeriesRelationEditorsPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksBySeriesRelationEditorsPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksBySeriesRelationEditorsPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksBySeriesCollectionRelationEditorsPrintsContext provides the relationEditorsPrints listBooksBySeriesCollection action context.
type ListBooksBySeriesCollectionRelationEditorsPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksBySeriesCollectionRelationEditorsPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsPrints controller listBooksBySeriesCollection action.
func NewListBooksBySeriesCollectionRelationEditorsPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksBySeriesCollectionRelationEditorsPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksBySeriesCollectionRelationEditorsPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesCollectionRelationEditorsPrintsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesCollectionRelationEditorsPrintsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksBySeriesCollectionRelationEditorsPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksBySeriesCollectionRelationEditorsPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksBySeriesCollectionRelationEditorsPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsRelationEditorsPrintsContext provides the relationEditorsPrints listCollections action context.
type ListCollectionsRelationEditorsPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
}

// NewListCollectionsRelationEditorsPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsPrints controller listCollections action.
func NewListCollectionsRelationEditorsPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsRelationEditorsPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsRelationEditorsPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationEditorsPrintsContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationEditorsPrintsContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsRelationEditorsPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsRelationEditorsPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsRelationEditorsPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsBySeriesRelationEditorsPrintsContext provides the relationEditorsPrints listCollectionsBySeries action context.
type ListCollectionsBySeriesRelationEditorsPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListCollectionsBySeriesRelationEditorsPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsPrints controller listCollectionsBySeries action.
func NewListCollectionsBySeriesRelationEditorsPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsBySeriesRelationEditorsPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsBySeriesRelationEditorsPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsBySeriesRelationEditorsPrintsContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsBySeriesRelationEditorsPrintsContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsBySeriesRelationEditorsPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsBySeriesRelationEditorsPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsBySeriesRelationEditorsPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesRelationEditorsPrintsContext provides the relationEditorsPrints listSeries action context.
type ListSeriesRelationEditorsPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
}

// NewListSeriesRelationEditorsPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsPrints controller listSeries action.
func NewListSeriesRelationEditorsPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesRelationEditorsPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesRelationEditorsPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationEditorsPrintsContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationEditorsPrintsContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesRelationEditorsPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesRelationEditorsPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesRelationEditorsPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesByCollectionRelationEditorsPrintsContext provides the relationEditorsPrints listSeriesByCollection action context.
type ListSeriesByCollectionRelationEditorsPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
}

// NewListSeriesByCollectionRelationEditorsPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsPrints controller listSeriesByCollection action.
func NewListSeriesByCollectionRelationEditorsPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesByCollectionRelationEditorsPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesByCollectionRelationEditorsPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesByCollectionRelationEditorsPrintsContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesByCollectionRelationEditorsPrintsContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesByCollectionRelationEditorsPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesByCollectionRelationEditorsPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesByCollectionRelationEditorsPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationEditorsSeriesContext provides the relationEditorsSeries listBooks action context.
type ListBooksRelationEditorsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	SeriesID int
}

// NewListBooksRelationEditorsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsSeries controller listBooks action.
func NewListBooksRelationEditorsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationEditorsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationEditorsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationEditorsSeriesContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationEditorsSeriesContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationEditorsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationEditorsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationEditorsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByCollectionRelationEditorsSeriesContext provides the relationEditorsSeries listBooksByCollection action context.
type ListBooksByCollectionRelationEditorsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	SeriesID     int
}

// NewListBooksByCollectionRelationEditorsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsSeries controller listBooksByCollection action.
func NewListBooksByCollectionRelationEditorsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByCollectionRelationEditorsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByCollectionRelationEditorsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionRelationEditorsSeriesContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionRelationEditorsSeriesContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByCollectionRelationEditorsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByCollectionRelationEditorsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByCollectionRelationEditorsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByCollectionPrintRelationEditorsSeriesContext provides the relationEditorsSeries listBooksByCollectionPrint action context.
type ListBooksByCollectionPrintRelationEditorsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksByCollectionPrintRelationEditorsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsSeries controller listBooksByCollectionPrint action.
func NewListBooksByCollectionPrintRelationEditorsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByCollectionPrintRelationEditorsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByCollectionPrintRelationEditorsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionPrintRelationEditorsSeriesContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionPrintRelationEditorsSeriesContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByCollectionPrintRelationEditorsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByCollectionPrintRelationEditorsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByCollectionPrintRelationEditorsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByPrintRelationEditorsSeriesContext provides the relationEditorsSeries listBooksByPrint action context.
type ListBooksByPrintRelationEditorsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListBooksByPrintRelationEditorsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsSeries controller listBooksByPrint action.
func NewListBooksByPrintRelationEditorsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByPrintRelationEditorsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByPrintRelationEditorsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintRelationEditorsSeriesContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintRelationEditorsSeriesContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByPrintRelationEditorsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByPrintRelationEditorsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByPrintRelationEditorsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByPrintCollectionRelationEditorsSeriesContext provides the relationEditorsSeries listBooksByPrintCollection action context.
type ListBooksByPrintCollectionRelationEditorsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksByPrintCollectionRelationEditorsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsSeries controller listBooksByPrintCollection action.
func NewListBooksByPrintCollectionRelationEditorsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByPrintCollectionRelationEditorsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByPrintCollectionRelationEditorsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintCollectionRelationEditorsSeriesContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintCollectionRelationEditorsSeriesContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByPrintCollectionRelationEditorsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByPrintCollectionRelationEditorsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByPrintCollectionRelationEditorsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsRelationEditorsSeriesContext provides the relationEditorsSeries listCollections action context.
type ListCollectionsRelationEditorsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	SeriesID int
}

// NewListCollectionsRelationEditorsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsSeries controller listCollections action.
func NewListCollectionsRelationEditorsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsRelationEditorsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsRelationEditorsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationEditorsSeriesContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationEditorsSeriesContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsRelationEditorsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsRelationEditorsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsRelationEditorsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsByPrintRelationEditorsSeriesContext provides the relationEditorsSeries listCollectionsByPrint action context.
type ListCollectionsByPrintRelationEditorsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListCollectionsByPrintRelationEditorsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsSeries controller listCollectionsByPrint action.
func NewListCollectionsByPrintRelationEditorsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsByPrintRelationEditorsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsByPrintRelationEditorsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsByPrintRelationEditorsSeriesContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsByPrintRelationEditorsSeriesContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsByPrintRelationEditorsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsByPrintRelationEditorsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsByPrintRelationEditorsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsRelationEditorsSeriesContext provides the relationEditorsSeries listPrints action context.
type ListPrintsRelationEditorsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	SeriesID int
}

// NewListPrintsRelationEditorsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsSeries controller listPrints action.
func NewListPrintsRelationEditorsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsRelationEditorsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsRelationEditorsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationEditorsSeriesContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationEditorsSeriesContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPrintsRelationEditorsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsRelationEditorsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsRelationEditorsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsByCollectionRelationEditorsSeriesContext provides the relationEditorsSeries listPrintsByCollection action context.
type ListPrintsByCollectionRelationEditorsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	SeriesID     int
}

// NewListPrintsByCollectionRelationEditorsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationEditorsSeries controller listPrintsByCollection action.
func NewListPrintsByCollectionRelationEditorsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsByCollectionRelationEditorsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsByCollectionRelationEditorsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsByCollectionRelationEditorsSeriesContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsByCollectionRelationEditorsSeriesContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPrintsByCollectionRelationEditorsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsByCollectionRelationEditorsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsByCollectionRelationEditorsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationPrintsContext provides the relationPrints listBooks action context.
type ListBooksRelationPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID int
}

// NewListBooksRelationPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrints controller listBooks action.
func NewListBooksRelationPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationPrintsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationPrintsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsRelationPrintsContext provides the relationPrints listCollections action context.
type ListCollectionsRelationPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID int
}

// NewListCollectionsRelationPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrints controller listCollections action.
func NewListCollectionsRelationPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsRelationPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsRelationPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationPrintsContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationPrintsContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsRelationPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsRelationPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsRelationPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListEditorsRelationPrintsContext provides the relationPrints listEditors action context.
type ListEditorsRelationPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID int
}

// NewListEditorsRelationPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrints controller listEditors action.
func NewListEditorsRelationPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListEditorsRelationPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListEditorsRelationPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListEditorsRelationPrintsContext) OK(r EditorCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListEditorsRelationPrintsContext) OKLink(r EditorLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListEditorsRelationPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListEditorsRelationPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListEditorsRelationPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesRelationPrintsContext provides the relationPrints listSeries action context.
type ListSeriesRelationPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID int
}

// NewListSeriesRelationPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrints controller listSeries action.
func NewListSeriesRelationPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesRelationPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesRelationPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationPrintsContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationPrintsContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesRelationPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesRelationPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesRelationPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationPrintsCollectionsContext provides the relationPrintsCollections listBooks action context.
type ListBooksRelationPrintsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	PrintID      int
}

// NewListBooksRelationPrintsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsCollections controller listBooks action.
func NewListBooksRelationPrintsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationPrintsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationPrintsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationPrintsCollectionsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationPrintsCollectionsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationPrintsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationPrintsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationPrintsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksBySeriesRelationPrintsCollectionsContext provides the relationPrintsCollections listBooksBySeries action context.
type ListBooksBySeriesRelationPrintsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	PrintID      int
	SeriesID     int
}

// NewListBooksBySeriesRelationPrintsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsCollections controller listBooksBySeries action.
func NewListBooksBySeriesRelationPrintsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksBySeriesRelationPrintsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksBySeriesRelationPrintsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesRelationPrintsCollectionsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesRelationPrintsCollectionsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksBySeriesRelationPrintsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksBySeriesRelationPrintsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksBySeriesRelationPrintsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesRelationPrintsCollectionsContext provides the relationPrintsCollections listSeries action context.
type ListSeriesRelationPrintsCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	PrintID      int
}

// NewListSeriesRelationPrintsCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsCollections controller listSeries action.
func NewListSeriesRelationPrintsCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesRelationPrintsCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesRelationPrintsCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationPrintsCollectionsContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationPrintsCollectionsContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesRelationPrintsCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesRelationPrintsCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesRelationPrintsCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationPrintsEditorsContext provides the relationPrintsEditors listBooks action context.
type ListBooksRelationPrintsEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
}

// NewListBooksRelationPrintsEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsEditors controller listBooks action.
func NewListBooksRelationPrintsEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationPrintsEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationPrintsEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationPrintsEditorsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationPrintsEditorsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationPrintsEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationPrintsEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationPrintsEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByCollectionRelationPrintsEditorsContext provides the relationPrintsEditors listBooksByCollection action context.
type ListBooksByCollectionRelationPrintsEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
}

// NewListBooksByCollectionRelationPrintsEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsEditors controller listBooksByCollection action.
func NewListBooksByCollectionRelationPrintsEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByCollectionRelationPrintsEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByCollectionRelationPrintsEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionRelationPrintsEditorsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionRelationPrintsEditorsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByCollectionRelationPrintsEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByCollectionRelationPrintsEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByCollectionRelationPrintsEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByCollectionSeriesRelationPrintsEditorsContext provides the relationPrintsEditors listBooksByCollectionSeries action context.
type ListBooksByCollectionSeriesRelationPrintsEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksByCollectionSeriesRelationPrintsEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsEditors controller listBooksByCollectionSeries action.
func NewListBooksByCollectionSeriesRelationPrintsEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByCollectionSeriesRelationPrintsEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByCollectionSeriesRelationPrintsEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionSeriesRelationPrintsEditorsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionSeriesRelationPrintsEditorsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByCollectionSeriesRelationPrintsEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByCollectionSeriesRelationPrintsEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByCollectionSeriesRelationPrintsEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksBySeriesRelationPrintsEditorsContext provides the relationPrintsEditors listBooksBySeries action context.
type ListBooksBySeriesRelationPrintsEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListBooksBySeriesRelationPrintsEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsEditors controller listBooksBySeries action.
func NewListBooksBySeriesRelationPrintsEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksBySeriesRelationPrintsEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksBySeriesRelationPrintsEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesRelationPrintsEditorsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesRelationPrintsEditorsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksBySeriesRelationPrintsEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksBySeriesRelationPrintsEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksBySeriesRelationPrintsEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksBySeriesCollectionRelationPrintsEditorsContext provides the relationPrintsEditors listBooksBySeriesCollection action context.
type ListBooksBySeriesCollectionRelationPrintsEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksBySeriesCollectionRelationPrintsEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsEditors controller listBooksBySeriesCollection action.
func NewListBooksBySeriesCollectionRelationPrintsEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksBySeriesCollectionRelationPrintsEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksBySeriesCollectionRelationPrintsEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesCollectionRelationPrintsEditorsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksBySeriesCollectionRelationPrintsEditorsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksBySeriesCollectionRelationPrintsEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksBySeriesCollectionRelationPrintsEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksBySeriesCollectionRelationPrintsEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsRelationPrintsEditorsContext provides the relationPrintsEditors listCollections action context.
type ListCollectionsRelationPrintsEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
}

// NewListCollectionsRelationPrintsEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsEditors controller listCollections action.
func NewListCollectionsRelationPrintsEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsRelationPrintsEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsRelationPrintsEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationPrintsEditorsContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationPrintsEditorsContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsRelationPrintsEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsRelationPrintsEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsRelationPrintsEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsBySeriesRelationPrintsEditorsContext provides the relationPrintsEditors listCollectionsBySeries action context.
type ListCollectionsBySeriesRelationPrintsEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListCollectionsBySeriesRelationPrintsEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsEditors controller listCollectionsBySeries action.
func NewListCollectionsBySeriesRelationPrintsEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsBySeriesRelationPrintsEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsBySeriesRelationPrintsEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsBySeriesRelationPrintsEditorsContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsBySeriesRelationPrintsEditorsContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsBySeriesRelationPrintsEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsBySeriesRelationPrintsEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsBySeriesRelationPrintsEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesRelationPrintsEditorsContext provides the relationPrintsEditors listSeries action context.
type ListSeriesRelationPrintsEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
}

// NewListSeriesRelationPrintsEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsEditors controller listSeries action.
func NewListSeriesRelationPrintsEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesRelationPrintsEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesRelationPrintsEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationPrintsEditorsContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesRelationPrintsEditorsContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesRelationPrintsEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesRelationPrintsEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesRelationPrintsEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesByCollectionRelationPrintsEditorsContext provides the relationPrintsEditors listSeriesByCollection action context.
type ListSeriesByCollectionRelationPrintsEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
}

// NewListSeriesByCollectionRelationPrintsEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsEditors controller listSeriesByCollection action.
func NewListSeriesByCollectionRelationPrintsEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesByCollectionRelationPrintsEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesByCollectionRelationPrintsEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesByCollectionRelationPrintsEditorsContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesByCollectionRelationPrintsEditorsContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesByCollectionRelationPrintsEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesByCollectionRelationPrintsEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesByCollectionRelationPrintsEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationPrintsSeriesContext provides the relationPrintsSeries listBooks action context.
type ListBooksRelationPrintsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID  int
	SeriesID int
}

// NewListBooksRelationPrintsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsSeries controller listBooks action.
func NewListBooksRelationPrintsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationPrintsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationPrintsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationPrintsSeriesContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationPrintsSeriesContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationPrintsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationPrintsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationPrintsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByCollectionRelationPrintsSeriesContext provides the relationPrintsSeries listBooksByCollection action context.
type ListBooksByCollectionRelationPrintsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	PrintID      int
	SeriesID     int
}

// NewListBooksByCollectionRelationPrintsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsSeries controller listBooksByCollection action.
func NewListBooksByCollectionRelationPrintsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByCollectionRelationPrintsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByCollectionRelationPrintsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionRelationPrintsSeriesContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionRelationPrintsSeriesContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByCollectionRelationPrintsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByCollectionRelationPrintsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByCollectionRelationPrintsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByCollectionEditorRelationPrintsSeriesContext provides the relationPrintsSeries listBooksByCollectionEditor action context.
type ListBooksByCollectionEditorRelationPrintsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksByCollectionEditorRelationPrintsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsSeries controller listBooksByCollectionEditor action.
func NewListBooksByCollectionEditorRelationPrintsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByCollectionEditorRelationPrintsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByCollectionEditorRelationPrintsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionEditorRelationPrintsSeriesContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionEditorRelationPrintsSeriesContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByCollectionEditorRelationPrintsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByCollectionEditorRelationPrintsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByCollectionEditorRelationPrintsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByEditorRelationPrintsSeriesContext provides the relationPrintsSeries listBooksByEditor action context.
type ListBooksByEditorRelationPrintsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListBooksByEditorRelationPrintsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsSeries controller listBooksByEditor action.
func NewListBooksByEditorRelationPrintsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByEditorRelationPrintsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByEditorRelationPrintsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByEditorRelationPrintsSeriesContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByEditorRelationPrintsSeriesContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByEditorRelationPrintsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByEditorRelationPrintsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByEditorRelationPrintsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByEditorCollectionRelationPrintsSeriesContext provides the relationPrintsSeries listBooksByEditorCollection action context.
type ListBooksByEditorCollectionRelationPrintsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksByEditorCollectionRelationPrintsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsSeries controller listBooksByEditorCollection action.
func NewListBooksByEditorCollectionRelationPrintsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByEditorCollectionRelationPrintsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByEditorCollectionRelationPrintsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByEditorCollectionRelationPrintsSeriesContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByEditorCollectionRelationPrintsSeriesContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByEditorCollectionRelationPrintsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByEditorCollectionRelationPrintsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByEditorCollectionRelationPrintsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsRelationPrintsSeriesContext provides the relationPrintsSeries listCollections action context.
type ListCollectionsRelationPrintsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID  int
	SeriesID int
}

// NewListCollectionsRelationPrintsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsSeries controller listCollections action.
func NewListCollectionsRelationPrintsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsRelationPrintsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsRelationPrintsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationPrintsSeriesContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationPrintsSeriesContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsRelationPrintsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsRelationPrintsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsRelationPrintsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsByEditorRelationPrintsSeriesContext provides the relationPrintsSeries listCollectionsByEditor action context.
type ListCollectionsByEditorRelationPrintsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListCollectionsByEditorRelationPrintsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsSeries controller listCollectionsByEditor action.
func NewListCollectionsByEditorRelationPrintsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsByEditorRelationPrintsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsByEditorRelationPrintsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsByEditorRelationPrintsSeriesContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsByEditorRelationPrintsSeriesContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsByEditorRelationPrintsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsByEditorRelationPrintsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsByEditorRelationPrintsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListEditorsRelationPrintsSeriesContext provides the relationPrintsSeries listEditors action context.
type ListEditorsRelationPrintsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID  int
	SeriesID int
}

// NewListEditorsRelationPrintsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsSeries controller listEditors action.
func NewListEditorsRelationPrintsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListEditorsRelationPrintsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListEditorsRelationPrintsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListEditorsRelationPrintsSeriesContext) OK(r EditorCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListEditorsRelationPrintsSeriesContext) OKLink(r EditorLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListEditorsRelationPrintsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListEditorsRelationPrintsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListEditorsRelationPrintsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListEditorsByCollectionRelationPrintsSeriesContext provides the relationPrintsSeries listEditorsByCollection action context.
type ListEditorsByCollectionRelationPrintsSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	PrintID      int
	SeriesID     int
}

// NewListEditorsByCollectionRelationPrintsSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationPrintsSeries controller listEditorsByCollection action.
func NewListEditorsByCollectionRelationPrintsSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListEditorsByCollectionRelationPrintsSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListEditorsByCollectionRelationPrintsSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListEditorsByCollectionRelationPrintsSeriesContext) OK(r EditorCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListEditorsByCollectionRelationPrintsSeriesContext) OKLink(r EditorLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListEditorsByCollectionRelationPrintsSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListEditorsByCollectionRelationPrintsSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListEditorsByCollectionRelationPrintsSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationSeriesContext provides the relationSeries listBooks action context.
type ListBooksRelationSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SeriesID int
}

// NewListBooksRelationSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeries controller listBooks action.
func NewListBooksRelationSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationSeriesContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationSeriesContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsRelationSeriesContext provides the relationSeries listCollections action context.
type ListCollectionsRelationSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SeriesID int
}

// NewListCollectionsRelationSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeries controller listCollections action.
func NewListCollectionsRelationSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsRelationSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsRelationSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationSeriesContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationSeriesContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsRelationSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsRelationSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsRelationSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListEditorsRelationSeriesContext provides the relationSeries listEditors action context.
type ListEditorsRelationSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SeriesID int
}

// NewListEditorsRelationSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeries controller listEditors action.
func NewListEditorsRelationSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListEditorsRelationSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListEditorsRelationSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListEditorsRelationSeriesContext) OK(r EditorCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListEditorsRelationSeriesContext) OKLink(r EditorLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListEditorsRelationSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListEditorsRelationSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListEditorsRelationSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsRelationSeriesContext provides the relationSeries listPrints action context.
type ListPrintsRelationSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SeriesID int
}

// NewListPrintsRelationSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeries controller listPrints action.
func NewListPrintsRelationSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsRelationSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsRelationSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationSeriesContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationSeriesContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPrintsRelationSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsRelationSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsRelationSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationSeriesCollectionsContext provides the relationSeriesCollections listBooks action context.
type ListBooksRelationSeriesCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	SeriesID     int
}

// NewListBooksRelationSeriesCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesCollections controller listBooks action.
func NewListBooksRelationSeriesCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationSeriesCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationSeriesCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationSeriesCollectionsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationSeriesCollectionsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationSeriesCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationSeriesCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationSeriesCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByPrintRelationSeriesCollectionsContext provides the relationSeriesCollections listBooksByPrint action context.
type ListBooksByPrintRelationSeriesCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	PrintID      int
	SeriesID     int
}

// NewListBooksByPrintRelationSeriesCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesCollections controller listBooksByPrint action.
func NewListBooksByPrintRelationSeriesCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByPrintRelationSeriesCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByPrintRelationSeriesCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintRelationSeriesCollectionsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintRelationSeriesCollectionsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByPrintRelationSeriesCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByPrintRelationSeriesCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByPrintRelationSeriesCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsRelationSeriesCollectionsContext provides the relationSeriesCollections listPrints action context.
type ListPrintsRelationSeriesCollectionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	SeriesID     int
}

// NewListPrintsRelationSeriesCollectionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesCollections controller listPrints action.
func NewListPrintsRelationSeriesCollectionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsRelationSeriesCollectionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsRelationSeriesCollectionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationSeriesCollectionsContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationSeriesCollectionsContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPrintsRelationSeriesCollectionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsRelationSeriesCollectionsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsRelationSeriesCollectionsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateRolesContext provides the roles create action context.
type CreateRolesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateRolesPayload
}

// NewCreateRolesContext parses the incoming request URL and body, performs validations and creates the
// context used by the roles controller create action.
func NewCreateRolesContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateRolesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateRolesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createRolesPayload is the roles create action payload.
type createRolesPayload struct {
	// Role Name (Author/Scenarist/Cartoonist)
	RoleName *string `form:"role_name,omitempty" json:"role_name,omitempty" yaml:"role_name,omitempty" xml:"role_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createRolesPayload) Validate() (err error) {
	if payload.RoleName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "role_name"))
	}
	if payload.RoleName != nil {
		if utf8.RuneCountInString(*payload.RoleName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.role_name`, *payload.RoleName, utf8.RuneCountInString(*payload.RoleName), 1, true))
		}
	}
	if payload.RoleName != nil {
		if utf8.RuneCountInString(*payload.RoleName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.role_name`, *payload.RoleName, utf8.RuneCountInString(*payload.RoleName), 128, false))
		}
	}
	return
}

// Publicize creates CreateRolesPayload from createRolesPayload
func (payload *createRolesPayload) Publicize() *CreateRolesPayload {
	var pub CreateRolesPayload
	if payload.RoleName != nil {
		pub.RoleName = *payload.RoleName
	}
	return &pub
}

// CreateRolesPayload is the roles create action payload.
type CreateRolesPayload struct {
	// Role Name (Author/Scenarist/Cartoonist)
	RoleName string `form:"role_name" json:"role_name" yaml:"role_name" xml:"role_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateRolesPayload) Validate() (err error) {
	if payload.RoleName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "role_name"))
	}
	if utf8.RuneCountInString(payload.RoleName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.role_name`, payload.RoleName, utf8.RuneCountInString(payload.RoleName), 1, true))
	}
	if utf8.RuneCountInString(payload.RoleName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.role_name`, payload.RoleName, utf8.RuneCountInString(payload.RoleName), 128, false))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateRolesContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateRolesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateRolesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateRolesContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateRolesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateRolesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteRolesContext provides the roles delete action context.
type DeleteRolesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	RoleID int
}

// NewDeleteRolesContext parses the incoming request URL and body, performs validations and creates the
// context used by the roles controller delete action.
func NewDeleteRolesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteRolesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteRolesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRoleID := req.Params["role_id"]
	if len(paramRoleID) > 0 {
		rawRoleID := paramRoleID[0]
		if roleID, err2 := strconv.Atoi(rawRoleID); err2 == nil {
			rctx.RoleID = roleID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("role_id", rawRoleID, "integer"))
		}
		if rctx.RoleID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`role_id`, rctx.RoleID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteRolesContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteRolesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteRolesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteRolesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteRolesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteRolesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListRolesContext provides the roles list action context.
type ListRolesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListRolesContext parses the incoming request URL and body, performs validations and creates the
// context used by the roles controller list action.
func NewListRolesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListRolesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListRolesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListRolesContext) OK(r RoleCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.role+json; type=collection")
	}
	if r == nil {
		r = RoleCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListRolesContext) OKLink(r RoleLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.role+json; type=collection")
	}
	if r == nil {
		r = RoleLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListRolesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListRolesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowRolesContext provides the roles show action context.
type ShowRolesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	RoleID int
}

// NewShowRolesContext parses the incoming request URL and body, performs validations and creates the
// context used by the roles controller show action.
func NewShowRolesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowRolesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowRolesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRoleID := req.Params["role_id"]
	if len(paramRoleID) > 0 {
		rawRoleID := paramRoleID[0]
		if roleID, err2 := strconv.Atoi(rawRoleID); err2 == nil {
			rctx.RoleID = roleID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("role_id", rawRoleID, "integer"))
		}
		if rctx.RoleID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`role_id`, rctx.RoleID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowRolesContext) OK(r *Role) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.role+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowRolesContext) OKLink(r *RoleLink) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.role+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowRolesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowRolesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowRolesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowRolesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdateRolesContext provides the roles update action context.
type UpdateRolesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	RoleID  int
	Payload *UpdateRolesPayload
}

// NewUpdateRolesContext parses the incoming request URL and body, performs validations and creates the
// context used by the roles controller update action.
func NewUpdateRolesContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateRolesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateRolesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRoleID := req.Params["role_id"]
	if len(paramRoleID) > 0 {
		rawRoleID := paramRoleID[0]
		if roleID, err2 := strconv.Atoi(rawRoleID); err2 == nil {
			rctx.RoleID = roleID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("role_id", rawRoleID, "integer"))
		}
		if rctx.RoleID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`role_id`, rctx.RoleID, 1, true))
		}
	}
	return &rctx, err
}

// updateRolesPayload is the roles update action payload.
type updateRolesPayload struct {
	// Role Name (Author/Scenarist/Cartoonist)
	RoleName *string `form:"role_name,omitempty" json:"role_name,omitempty" yaml:"role_name,omitempty" xml:"role_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateRolesPayload) Validate() (err error) {
	if payload.RoleName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "role_name"))
	}
	if payload.RoleName != nil {
		if utf8.RuneCountInString(*payload.RoleName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.role_name`, *payload.RoleName, utf8.RuneCountInString(*payload.RoleName), 1, true))
		}
	}
	if payload.RoleName != nil {
		if utf8.RuneCountInString(*payload.RoleName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.role_name`, *payload.RoleName, utf8.RuneCountInString(*payload.RoleName), 128, false))
		}
	}
	return
}

// Publicize creates UpdateRolesPayload from updateRolesPayload
func (payload *updateRolesPayload) Publicize() *UpdateRolesPayload {
	var pub UpdateRolesPayload
	if payload.RoleName != nil {
		pub.RoleName = *payload.RoleName
	}
	return &pub
}

// UpdateRolesPayload is the roles update action payload.
type UpdateRolesPayload struct {
	// Role Name (Author/Scenarist/Cartoonist)
	RoleName string `form:"role_name" json:"role_name" yaml:"role_name" xml:"role_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateRolesPayload) Validate() (err error) {
	if payload.RoleName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "role_name"))
	}
	if utf8.RuneCountInString(payload.RoleName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.role_name`, payload.RoleName, utf8.RuneCountInString(payload.RoleName), 1, true))
	}
	if utf8.RuneCountInString(payload.RoleName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.role_name`, payload.RoleName, utf8.RuneCountInString(payload.RoleName), 128, false))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateRolesContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateRolesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateRolesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateRolesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdateRolesContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateRolesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdateRolesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListAuthorsRelationRoleContext provides the relationRole listAuthors action context.
type ListAuthorsRelationRoleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	RoleID int
}

// NewListAuthorsRelationRoleContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationRole controller listAuthors action.
func NewListAuthorsRelationRoleContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAuthorsRelationRoleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAuthorsRelationRoleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRoleID := req.Params["role_id"]
	if len(paramRoleID) > 0 {
		rawRoleID := paramRoleID[0]
		if roleID, err2 := strconv.Atoi(rawRoleID); err2 == nil {
			rctx.RoleID = roleID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("role_id", rawRoleID, "integer"))
		}
		if rctx.RoleID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`role_id`, rctx.RoleID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAuthorsRelationRoleContext) OK(r AuthorCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.author+json; type=collection")
	}
	if r == nil {
		r = AuthorCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListAuthorsRelationRoleContext) OKLink(r AuthorLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.author+json; type=collection")
	}
	if r == nil {
		r = AuthorLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListAuthorsRelationRoleContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListAuthorsRelationRoleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListAuthorsRelationRoleContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesByAuthorRelationRoleContext provides the relationRole listSeriesByAuthor action context.
type ListSeriesByAuthorRelationRoleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AuthorID int
	RoleID   int
}

// NewListSeriesByAuthorRelationRoleContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationRole controller listSeriesByAuthor action.
func NewListSeriesByAuthorRelationRoleContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesByAuthorRelationRoleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesByAuthorRelationRoleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAuthorID := req.Params["author_id"]
	if len(paramAuthorID) > 0 {
		rawAuthorID := paramAuthorID[0]
		if authorID, err2 := strconv.Atoi(rawAuthorID); err2 == nil {
			rctx.AuthorID = authorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("author_id", rawAuthorID, "integer"))
		}
		if rctx.AuthorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`author_id`, rctx.AuthorID, 1, true))
		}
	}
	paramRoleID := req.Params["role_id"]
	if len(paramRoleID) > 0 {
		rawRoleID := paramRoleID[0]
		if roleID, err2 := strconv.Atoi(rawRoleID); err2 == nil {
			rctx.RoleID = roleID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("role_id", rawRoleID, "integer"))
		}
		if rctx.RoleID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`role_id`, rctx.RoleID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesByAuthorRelationRoleContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesByAuthorRelationRoleContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSeriesByAuthorRelationRoleContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesByAuthorRelationRoleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesByAuthorRelationRoleContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationSeriesEditorsContext provides the relationSeriesEditors listBooks action context.
type ListBooksRelationSeriesEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	SeriesID int
}

// NewListBooksRelationSeriesEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesEditors controller listBooks action.
func NewListBooksRelationSeriesEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationSeriesEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationSeriesEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationSeriesEditorsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationSeriesEditorsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationSeriesEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationSeriesEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationSeriesEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByCollectionRelationSeriesEditorsContext provides the relationSeriesEditors listBooksByCollection action context.
type ListBooksByCollectionRelationSeriesEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	SeriesID     int
}

// NewListBooksByCollectionRelationSeriesEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesEditors controller listBooksByCollection action.
func NewListBooksByCollectionRelationSeriesEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByCollectionRelationSeriesEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByCollectionRelationSeriesEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionRelationSeriesEditorsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionRelationSeriesEditorsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByCollectionRelationSeriesEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByCollectionRelationSeriesEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByCollectionRelationSeriesEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByCollectionPrintRelationSeriesEditorsContext provides the relationSeriesEditors listBooksByCollectionPrint action context.
type ListBooksByCollectionPrintRelationSeriesEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksByCollectionPrintRelationSeriesEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesEditors controller listBooksByCollectionPrint action.
func NewListBooksByCollectionPrintRelationSeriesEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByCollectionPrintRelationSeriesEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByCollectionPrintRelationSeriesEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionPrintRelationSeriesEditorsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByCollectionPrintRelationSeriesEditorsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByCollectionPrintRelationSeriesEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByCollectionPrintRelationSeriesEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByCollectionPrintRelationSeriesEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByPrintRelationSeriesEditorsContext provides the relationSeriesEditors listBooksByPrint action context.
type ListBooksByPrintRelationSeriesEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListBooksByPrintRelationSeriesEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesEditors controller listBooksByPrint action.
func NewListBooksByPrintRelationSeriesEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByPrintRelationSeriesEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByPrintRelationSeriesEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintRelationSeriesEditorsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintRelationSeriesEditorsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByPrintRelationSeriesEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByPrintRelationSeriesEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByPrintRelationSeriesEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByPrintCollectionRelationSeriesEditorsContext provides the relationSeriesEditors listBooksByPrintCollection action context.
type ListBooksByPrintCollectionRelationSeriesEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksByPrintCollectionRelationSeriesEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesEditors controller listBooksByPrintCollection action.
func NewListBooksByPrintCollectionRelationSeriesEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByPrintCollectionRelationSeriesEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByPrintCollectionRelationSeriesEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintCollectionRelationSeriesEditorsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByPrintCollectionRelationSeriesEditorsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByPrintCollectionRelationSeriesEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByPrintCollectionRelationSeriesEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByPrintCollectionRelationSeriesEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsRelationSeriesEditorsContext provides the relationSeriesEditors listCollections action context.
type ListCollectionsRelationSeriesEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	SeriesID int
}

// NewListCollectionsRelationSeriesEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesEditors controller listCollections action.
func NewListCollectionsRelationSeriesEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsRelationSeriesEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsRelationSeriesEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationSeriesEditorsContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationSeriesEditorsContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsRelationSeriesEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsRelationSeriesEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsRelationSeriesEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsByPrintRelationSeriesEditorsContext provides the relationSeriesEditors listCollectionsByPrint action context.
type ListCollectionsByPrintRelationSeriesEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListCollectionsByPrintRelationSeriesEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesEditors controller listCollectionsByPrint action.
func NewListCollectionsByPrintRelationSeriesEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsByPrintRelationSeriesEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsByPrintRelationSeriesEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsByPrintRelationSeriesEditorsContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsByPrintRelationSeriesEditorsContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsByPrintRelationSeriesEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsByPrintRelationSeriesEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsByPrintRelationSeriesEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsRelationSeriesEditorsContext provides the relationSeriesEditors listPrints action context.
type ListPrintsRelationSeriesEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	SeriesID int
}

// NewListPrintsRelationSeriesEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesEditors controller listPrints action.
func NewListPrintsRelationSeriesEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsRelationSeriesEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsRelationSeriesEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationSeriesEditorsContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsRelationSeriesEditorsContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPrintsRelationSeriesEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsRelationSeriesEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsRelationSeriesEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListPrintsByCollectionRelationSeriesEditorsContext provides the relationSeriesEditors listPrintsByCollection action context.
type ListPrintsByCollectionRelationSeriesEditorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	SeriesID     int
}

// NewListPrintsByCollectionRelationSeriesEditorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesEditors controller listPrintsByCollection action.
func NewListPrintsByCollectionRelationSeriesEditorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPrintsByCollectionRelationSeriesEditorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPrintsByCollectionRelationSeriesEditorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPrintsByCollectionRelationSeriesEditorsContext) OK(r PrintCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListPrintsByCollectionRelationSeriesEditorsContext) OKLink(r PrintLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.print+json; type=collection")
	}
	if r == nil {
		r = PrintLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPrintsByCollectionRelationSeriesEditorsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPrintsByCollectionRelationSeriesEditorsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListPrintsByCollectionRelationSeriesEditorsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksRelationSeriesPrintsContext provides the relationSeriesPrints listBooks action context.
type ListBooksRelationSeriesPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID  int
	SeriesID int
}

// NewListBooksRelationSeriesPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesPrints controller listBooks action.
func NewListBooksRelationSeriesPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksRelationSeriesPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksRelationSeriesPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksRelationSeriesPrintsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksRelationSeriesPrintsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksRelationSeriesPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksRelationSeriesPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksRelationSeriesPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByEditorRelationSeriesPrintsContext provides the relationSeriesPrints listBooksByEditor action context.
type ListBooksByEditorRelationSeriesPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListBooksByEditorRelationSeriesPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesPrints controller listBooksByEditor action.
func NewListBooksByEditorRelationSeriesPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByEditorRelationSeriesPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByEditorRelationSeriesPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByEditorRelationSeriesPrintsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByEditorRelationSeriesPrintsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByEditorRelationSeriesPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByEditorRelationSeriesPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByEditorRelationSeriesPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksByEditorCollectionRelationSeriesPrintsContext provides the relationSeriesPrints listBooksByEditorCollection action context.
type ListBooksByEditorCollectionRelationSeriesPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CollectionID int
	EditorID     int
	PrintID      int
	SeriesID     int
}

// NewListBooksByEditorCollectionRelationSeriesPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesPrints controller listBooksByEditorCollection action.
func NewListBooksByEditorCollectionRelationSeriesPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksByEditorCollectionRelationSeriesPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksByEditorCollectionRelationSeriesPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCollectionID := req.Params["collection_id"]
	if len(paramCollectionID) > 0 {
		rawCollectionID := paramCollectionID[0]
		if collectionID, err2 := strconv.Atoi(rawCollectionID); err2 == nil {
			rctx.CollectionID = collectionID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("collection_id", rawCollectionID, "integer"))
		}
		if rctx.CollectionID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`collection_id`, rctx.CollectionID, 1, true))
		}
	}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksByEditorCollectionRelationSeriesPrintsContext) OK(r BookCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksByEditorCollectionRelationSeriesPrintsContext) OKLink(r BookLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	}
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListBooksByEditorCollectionRelationSeriesPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksByEditorCollectionRelationSeriesPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksByEditorCollectionRelationSeriesPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsRelationSeriesPrintsContext provides the relationSeriesPrints listCollections action context.
type ListCollectionsRelationSeriesPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID  int
	SeriesID int
}

// NewListCollectionsRelationSeriesPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesPrints controller listCollections action.
func NewListCollectionsRelationSeriesPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsRelationSeriesPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsRelationSeriesPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationSeriesPrintsContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsRelationSeriesPrintsContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsRelationSeriesPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsRelationSeriesPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsRelationSeriesPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListCollectionsByEditorRelationSeriesPrintsContext provides the relationSeriesPrints listCollectionsByEditor action context.
type ListCollectionsByEditorRelationSeriesPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EditorID int
	PrintID  int
	SeriesID int
}

// NewListCollectionsByEditorRelationSeriesPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesPrints controller listCollectionsByEditor action.
func NewListCollectionsByEditorRelationSeriesPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollectionsByEditorRelationSeriesPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollectionsByEditorRelationSeriesPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEditorID := req.Params["editor_id"]
	if len(paramEditorID) > 0 {
		rawEditorID := paramEditorID[0]
		if editorID, err2 := strconv.Atoi(rawEditorID); err2 == nil {
			rctx.EditorID = editorID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("editor_id", rawEditorID, "integer"))
		}
		if rctx.EditorID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`editor_id`, rctx.EditorID, 1, true))
		}
	}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollectionsByEditorRelationSeriesPrintsContext) OK(r CollectionCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListCollectionsByEditorRelationSeriesPrintsContext) OKLink(r CollectionLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.collection+json; type=collection")
	}
	if r == nil {
		r = CollectionLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListCollectionsByEditorRelationSeriesPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollectionsByEditorRelationSeriesPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListCollectionsByEditorRelationSeriesPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListEditorsRelationSeriesPrintsContext provides the relationSeriesPrints listEditors action context.
type ListEditorsRelationSeriesPrintsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PrintID  int
	SeriesID int
}

// NewListEditorsRelationSeriesPrintsContext parses the incoming request URL and body, performs validations and creates the
// context used by the relationSeriesPrints controller listEditors action.
func NewListEditorsRelationSeriesPrintsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListEditorsRelationSeriesPrintsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListEditorsRelationSeriesPrintsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPrintID := req.Params["print_id"]
	if len(paramPrintID) > 0 {
		rawPrintID := paramPrintID[0]
		if printID, err2 := strconv.Atoi(rawPrintID); err2 == nil {
			rctx.PrintID = printID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("print_id", rawPrintID, "integer"))
		}
		if rctx.PrintID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`print_id`, rctx.PrintID, 1, true))
		}
	}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListEditorsRelationSeriesPrintsContext) OK(r EditorCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListEditorsRelationSeriesPrintsContext) OKLink(r EditorLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.editor+json; type=collection")
	}
	if r == nil {
		r = EditorLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListEditorsRelationSeriesPrintsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListEditorsRelationSeriesPrintsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListEditorsRelationSeriesPrintsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateSeriesContext provides the series create action context.
type CreateSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateSeriesPayload
}

// NewCreateSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the series controller create action.
func NewCreateSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createSeriesPayload is the series create action payload.
type createSeriesPayload struct {
	// Unique Category ID
	CategoryID *int `form:"category_id,omitempty" json:"category_id,omitempty" yaml:"category_id,omitempty" xml:"category_id,omitempty"`
	// Series Name (Akira/Dragon ball)
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" yaml:"series_name,omitempty" xml:"series_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createSeriesPayload) Validate() (err error) {
	if payload.SeriesName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "series_name"))
	}
	if payload.CategoryID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "category_id"))
	}
	if payload.CategoryID != nil {
		if *payload.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.category_id`, *payload.CategoryID, 1, true))
		}
	}
	if payload.SeriesName != nil {
		if utf8.RuneCountInString(*payload.SeriesName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.series_name`, *payload.SeriesName, utf8.RuneCountInString(*payload.SeriesName), 1, true))
		}
	}
	if payload.SeriesName != nil {
		if utf8.RuneCountInString(*payload.SeriesName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.series_name`, *payload.SeriesName, utf8.RuneCountInString(*payload.SeriesName), 128, false))
		}
	}
	return
}

// Publicize creates CreateSeriesPayload from createSeriesPayload
func (payload *createSeriesPayload) Publicize() *CreateSeriesPayload {
	var pub CreateSeriesPayload
	if payload.CategoryID != nil {
		pub.CategoryID = *payload.CategoryID
	}
	if payload.SeriesName != nil {
		pub.SeriesName = *payload.SeriesName
	}
	return &pub
}

// CreateSeriesPayload is the series create action payload.
type CreateSeriesPayload struct {
	// Unique Category ID
	CategoryID int `form:"category_id" json:"category_id" yaml:"category_id" xml:"category_id"`
	// Series Name (Akira/Dragon ball)
	SeriesName string `form:"series_name" json:"series_name" yaml:"series_name" xml:"series_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateSeriesPayload) Validate() (err error) {
	if payload.SeriesName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "series_name"))
	}

	if payload.CategoryID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.category_id`, payload.CategoryID, 1, true))
	}
	if utf8.RuneCountInString(payload.SeriesName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.series_name`, payload.SeriesName, utf8.RuneCountInString(payload.SeriesName), 1, true))
	}
	if utf8.RuneCountInString(payload.SeriesName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.series_name`, payload.SeriesName, utf8.RuneCountInString(payload.SeriesName), 128, false))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateSeriesContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateSeriesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateSeriesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateSeriesContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteSeriesContext provides the series delete action context.
type DeleteSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SeriesID int
}

// NewDeleteSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the series controller delete action.
func NewDeleteSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteSeriesContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteSeriesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteSeriesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListSeriesContext provides the series list action context.
type ListSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the series controller list action.
func NewListSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSeriesContext) OK(r SeriesCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListSeriesContext) OKLink(r SeriesLinkCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json; type=collection")
	}
	if r == nil {
		r = SeriesLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowSeriesContext provides the series show action context.
type ShowSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SeriesID int
}

// NewShowSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the series controller show action.
func NewShowSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowSeriesContext) OK(r *Series) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowSeriesContext) OKLink(r *SeriesLink) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.series+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowSeriesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdateSeriesContext provides the series update action context.
type UpdateSeriesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SeriesID int
	Payload  *UpdateSeriesPayload
}

// NewUpdateSeriesContext parses the incoming request URL and body, performs validations and creates the
// context used by the series controller update action.
func NewUpdateSeriesContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateSeriesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateSeriesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSeriesID := req.Params["series_id"]
	if len(paramSeriesID) > 0 {
		rawSeriesID := paramSeriesID[0]
		if seriesID, err2 := strconv.Atoi(rawSeriesID); err2 == nil {
			rctx.SeriesID = seriesID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("series_id", rawSeriesID, "integer"))
		}
		if rctx.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`series_id`, rctx.SeriesID, 1, true))
		}
	}
	return &rctx, err
}

// updateSeriesPayload is the series update action payload.
type updateSeriesPayload struct {
	// Unique Category ID
	CategoryID *int `form:"category_id,omitempty" json:"category_id,omitempty" yaml:"category_id,omitempty" xml:"category_id,omitempty"`
	// Series Name (Akira/Dragon ball)
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" yaml:"series_name,omitempty" xml:"series_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateSeriesPayload) Validate() (err error) {
	if payload.CategoryID != nil {
		if *payload.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.category_id`, *payload.CategoryID, 1, true))
		}
	}
	if payload.SeriesName != nil {
		if utf8.RuneCountInString(*payload.SeriesName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.series_name`, *payload.SeriesName, utf8.RuneCountInString(*payload.SeriesName), 1, true))
		}
	}
	if payload.SeriesName != nil {
		if utf8.RuneCountInString(*payload.SeriesName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.series_name`, *payload.SeriesName, utf8.RuneCountInString(*payload.SeriesName), 128, false))
		}
	}
	return
}

// Publicize creates UpdateSeriesPayload from updateSeriesPayload
func (payload *updateSeriesPayload) Publicize() *UpdateSeriesPayload {
	var pub UpdateSeriesPayload
	if payload.CategoryID != nil {
		pub.CategoryID = payload.CategoryID
	}
	if payload.SeriesName != nil {
		pub.SeriesName = payload.SeriesName
	}
	return &pub
}

// UpdateSeriesPayload is the series update action payload.
type UpdateSeriesPayload struct {
	// Unique Category ID
	CategoryID *int `form:"category_id,omitempty" json:"category_id,omitempty" yaml:"category_id,omitempty" xml:"category_id,omitempty"`
	// Series Name (Akira/Dragon ball)
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" yaml:"series_name,omitempty" xml:"series_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateSeriesPayload) Validate() (err error) {
	if payload.CategoryID != nil {
		if *payload.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.category_id`, *payload.CategoryID, 1, true))
		}
	}
	if payload.SeriesName != nil {
		if utf8.RuneCountInString(*payload.SeriesName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.series_name`, *payload.SeriesName, utf8.RuneCountInString(*payload.SeriesName), 1, true))
		}
	}
	if payload.SeriesName != nil {
		if utf8.RuneCountInString(*payload.SeriesName) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.series_name`, *payload.SeriesName, utf8.RuneCountInString(*payload.SeriesName), 128, false))
		}
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateSeriesContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateSeriesContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateSeriesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateSeriesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdateSeriesContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateSeriesContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdateSeriesContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// AccessTokenContext provides the token access action context.
type AccessTokenContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewAccessTokenContext parses the incoming request URL and body, performs validations and creates the
// context used by the token controller access action.
func NewAccessTokenContext(ctx context.Context, r *http.Request, service *goa.Service) (*AccessTokenContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AccessTokenContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AccessTokenContext) OK(r *Token) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.token+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AccessTokenContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *AccessTokenContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AccessTokenContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *AccessTokenContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// AuthTokenContext provides the token auth action context.
type AuthTokenContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewAuthTokenContext parses the incoming request URL and body, performs validations and creates the
// context used by the token controller auth action.
func NewAuthTokenContext(ctx context.Context, r *http.Request, service *goa.Service) (*AuthTokenContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AuthTokenContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AuthTokenContext) OK(r *Authtoken) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.authtoken+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AuthTokenContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *AuthTokenContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AuthTokenContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *AuthTokenContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateUsersContext provides the users create action context.
type CreateUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UserCreatePayload
}

// NewCreateUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller create action.
func NewCreateUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateUsersContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUsersContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateUsersContext) UnprocessableEntity(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 422, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateUsersContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteUsersContext provides the users delete action context.
type DeleteUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewDeleteUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller delete action.
func NewDeleteUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteUsersContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteUsersContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteUsersContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteUsersContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteUsersContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListUsersContext provides the users list action context.
type ListUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email    *string
	Nickname *string
}

// NewListUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller list action.
func NewListUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) > 0 {
		rawEmail := paramEmail[0]
		rctx.Email = &rawEmail
		if rctx.Email != nil {
			if err2 := goa.ValidateFormat(goa.FormatEmail, *rctx.Email); err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, *rctx.Email, goa.FormatEmail, err2))
			}
		}
	}
	paramNickname := req.Params["nickname"]
	if len(paramNickname) > 0 {
		rawNickname := paramNickname[0]
		rctx.Nickname = &rawNickname
		if rctx.Nickname != nil {
			if utf8.RuneCountInString(*rctx.Nickname) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`nickname`, *rctx.Nickname, utf8.RuneCountInString(*rctx.Nickname), 1, true))
			}
		}
		if rctx.Nickname != nil {
			if utf8.RuneCountInString(*rctx.Nickname) > 32 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`nickname`, *rctx.Nickname, utf8.RuneCountInString(*rctx.Nickname), 32, false))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUsersContext) OK(r UserCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	}
	if r == nil {
		r = UserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListUsersContext) OKTiny(r UserTinyCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	}
	if r == nil {
		r = UserTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListUsersContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowUsersContext provides the users show action context.
type ShowUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewShowUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller show action.
func NewShowUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUsersContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowUsersContext) OKTiny(r *UserTiny) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowUsersContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUsersContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowUsersContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdateUsersContext provides the users update action context.
type UpdateUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *UpdateUsersPayload
}

// NewUpdateUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller update action.
func NewUpdateUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// updateUsersPayload is the users update action payload.
type updateUsersPayload struct {
	// user nickname
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" yaml:"nickname,omitempty" xml:"nickname,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateUsersPayload) Validate() (err error) {
	if payload.Nickname == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "nickname"))
	}
	if payload.Nickname != nil {
		if utf8.RuneCountInString(*payload.Nickname) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.nickname`, *payload.Nickname, utf8.RuneCountInString(*payload.Nickname), 1, true))
		}
	}
	if payload.Nickname != nil {
		if utf8.RuneCountInString(*payload.Nickname) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.nickname`, *payload.Nickname, utf8.RuneCountInString(*payload.Nickname), 32, false))
		}
	}
	return
}

// Publicize creates UpdateUsersPayload from updateUsersPayload
func (payload *updateUsersPayload) Publicize() *UpdateUsersPayload {
	var pub UpdateUsersPayload
	if payload.Nickname != nil {
		pub.Nickname = *payload.Nickname
	}
	return &pub
}

// UpdateUsersPayload is the users update action payload.
type UpdateUsersPayload struct {
	// user nickname
	Nickname string `form:"nickname" json:"nickname" yaml:"nickname" xml:"nickname"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateUsersPayload) Validate() (err error) {
	if payload.Nickname == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "nickname"))
	}
	if utf8.RuneCountInString(payload.Nickname) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.nickname`, payload.Nickname, utf8.RuneCountInString(payload.Nickname), 1, true))
	}
	if utf8.RuneCountInString(payload.Nickname) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.nickname`, payload.Nickname, utf8.RuneCountInString(payload.Nickname), 32, false))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateUsersContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateUsersContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateUsersContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateUsersContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdateUsersContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdateUsersContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// GetValidationContext provides the validation get action context.
type GetValidationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetValidationContext parses the incoming request URL and body, performs validations and creates the
// context used by the validation controller get action.
func NewGetValidationContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetValidationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetValidationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *GetValidationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetValidationContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetValidationContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetValidationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetValidationContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *GetValidationContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ValidateValidationContext provides the validation validate action context.
type ValidateValidationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ValidateValidationPayload
}

// NewValidateValidationContext parses the incoming request URL and body, performs validations and creates the
// context used by the validation controller validate action.
func NewValidateValidationContext(ctx context.Context, r *http.Request, service *goa.Service) (*ValidateValidationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ValidateValidationContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// validateValidationPayload is the validation validate action payload.
type validateValidationPayload struct {
	// token
	Token *string `form:"token,omitempty" json:"token,omitempty" yaml:"token,omitempty" xml:"token,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *validateValidationPayload) Validate() (err error) {
	if payload.Token == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "token"))
	}
	if payload.Token != nil {
		if utf8.RuneCountInString(*payload.Token) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.token`, *payload.Token, utf8.RuneCountInString(*payload.Token), 1, true))
		}
	}
	return
}

// Publicize creates ValidateValidationPayload from validateValidationPayload
func (payload *validateValidationPayload) Publicize() *ValidateValidationPayload {
	var pub ValidateValidationPayload
	if payload.Token != nil {
		pub.Token = *payload.Token
	}
	return &pub
}

// ValidateValidationPayload is the validation validate action payload.
type ValidateValidationPayload struct {
	// token
	Token string `form:"token" json:"token" yaml:"token" xml:"token"`
}

// Validate runs the validation rules defined in the design.
func (payload *ValidateValidationPayload) Validate() (err error) {
	if payload.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "token"))
	}
	if utf8.RuneCountInString(payload.Token) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.token`, payload.Token, utf8.RuneCountInString(payload.Token), 1, true))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *ValidateValidationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ValidateValidationContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ValidateValidationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *ValidateValidationContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ValidateValidationContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ValidateValidationContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}
