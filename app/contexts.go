// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "my-inventory": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// AuthAuthenticateContext provides the authenticate auth action context.
type AuthAuthenticateContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AuthenticatePayload
}

// NewAuthAuthenticateContext parses the incoming request URL and body, performs validations and creates the
// context used by the authenticate controller auth action.
func NewAuthAuthenticateContext(ctx context.Context, r *http.Request, service *goa.Service) (*AuthAuthenticateContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AuthAuthenticateContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AuthAuthenticateContext) OK(r *Authtoken) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.authtoken+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AuthAuthenticateContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *AuthAuthenticateContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AuthAuthenticateContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *AuthAuthenticateContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateBooksContext provides the books create action context.
type CreateBooksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateBooksPayload
}

// NewCreateBooksContext parses the incoming request URL and body, performs validations and creates the
// context used by the books controller create action.
func NewCreateBooksContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateBooksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateBooksContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createBooksPayload is the books create action payload.
type createBooksPayload struct {
	// Book ISBN
	Isbn *string `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	// Book Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createBooksPayload) Validate() (err error) {
	if payload.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "isbn"))
	}
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Isbn != nil {
		if utf8.RuneCountInString(*payload.Isbn) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.isbn`, *payload.Isbn, utf8.RuneCountInString(*payload.Isbn), 1, true))
		}
	}
	if payload.Isbn != nil {
		if utf8.RuneCountInString(*payload.Isbn) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.isbn`, *payload.Isbn, utf8.RuneCountInString(*payload.Isbn), 128, false))
		}
	}
	if payload.Name != nil {
		if utf8.RuneCountInString(*payload.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, *payload.Name, utf8.RuneCountInString(*payload.Name), 1, true))
		}
	}
	if payload.Name != nil {
		if utf8.RuneCountInString(*payload.Name) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, *payload.Name, utf8.RuneCountInString(*payload.Name), 128, false))
		}
	}
	return
}

// Publicize creates CreateBooksPayload from createBooksPayload
func (payload *createBooksPayload) Publicize() *CreateBooksPayload {
	var pub CreateBooksPayload
	if payload.Isbn != nil {
		pub.Isbn = *payload.Isbn
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// CreateBooksPayload is the books create action payload.
type CreateBooksPayload struct {
	// Book ISBN
	Isbn string `form:"isbn" json:"isbn" xml:"isbn"`
	// Book Name
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateBooksPayload) Validate() (err error) {
	if payload.Isbn == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "isbn"))
	}
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if utf8.RuneCountInString(payload.Isbn) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.isbn`, payload.Isbn, utf8.RuneCountInString(payload.Isbn), 1, true))
	}
	if utf8.RuneCountInString(payload.Isbn) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.isbn`, payload.Isbn, utf8.RuneCountInString(payload.Isbn), 128, false))
	}
	if utf8.RuneCountInString(payload.Name) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, payload.Name, utf8.RuneCountInString(payload.Name), 1, true))
	}
	if utf8.RuneCountInString(payload.Name) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, payload.Name, utf8.RuneCountInString(payload.Name), 128, false))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateBooksContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateBooksContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateBooksContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateBooksContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateBooksContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateBooksContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteBooksContext provides the books delete action context.
type DeleteBooksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID int
}

// NewDeleteBooksContext parses the incoming request URL and body, performs validations and creates the
// context used by the books controller delete action.
func NewDeleteBooksContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteBooksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteBooksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["book_id"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("book_id", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`book_id`, rctx.BookID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteBooksContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteBooksContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteBooksContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteBooksContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteBooksContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteBooksContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListBooksContext provides the books list action context.
type ListBooksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListBooksContext parses the incoming request URL and body, performs validations and creates the
// context used by the books controller list action.
func NewListBooksContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBooksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBooksContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBooksContext) OK(r BookCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	if r == nil {
		r = BookCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ListBooksContext) OKLink(r BookLinkCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json; type=collection")
	if r == nil {
		r = BookLinkCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListBooksContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListBooksContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowBooksContext provides the books show action context.
type ShowBooksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID int
}

// NewShowBooksContext parses the incoming request URL and body, performs validations and creates the
// context used by the books controller show action.
func NewShowBooksContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowBooksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowBooksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["book_id"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("book_id", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`book_id`, rctx.BookID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowBooksContext) OK(r *Book) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKLink sends a HTTP response with status code 200.
func (ctx *ShowBooksContext) OKLink(r *BookLink) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.book+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowBooksContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowBooksContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowBooksContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowBooksContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdateBooksContext provides the books update action context.
type UpdateBooksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID  int
	Payload *UpdateBooksPayload
}

// NewUpdateBooksContext parses the incoming request URL and body, performs validations and creates the
// context used by the books controller update action.
func NewUpdateBooksContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateBooksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateBooksContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["book_id"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("book_id", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`book_id`, rctx.BookID, 1, true))
		}
	}
	return &rctx, err
}

// updateBooksPayload is the books update action payload.
type updateBooksPayload struct {
	// Book Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateBooksPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Name != nil {
		if utf8.RuneCountInString(*payload.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, *payload.Name, utf8.RuneCountInString(*payload.Name), 1, true))
		}
	}
	if payload.Name != nil {
		if utf8.RuneCountInString(*payload.Name) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, *payload.Name, utf8.RuneCountInString(*payload.Name), 128, false))
		}
	}
	return
}

// Publicize creates UpdateBooksPayload from updateBooksPayload
func (payload *updateBooksPayload) Publicize() *UpdateBooksPayload {
	var pub UpdateBooksPayload
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// UpdateBooksPayload is the books update action payload.
type UpdateBooksPayload struct {
	// Book Name
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateBooksPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if utf8.RuneCountInString(payload.Name) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, payload.Name, utf8.RuneCountInString(payload.Name), 1, true))
	}
	if utf8.RuneCountInString(payload.Name) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, payload.Name, utf8.RuneCountInString(payload.Name), 128, false))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateBooksContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateBooksContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateBooksContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateBooksContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdateBooksContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateBooksContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdateBooksContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// AddOwnershipsContext provides the ownerships add action context.
type AddOwnershipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *AddOwnershipsPayload
}

// NewAddOwnershipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the ownerships controller add action.
func NewAddOwnershipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddOwnershipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddOwnershipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// addOwnershipsPayload is the ownerships add action payload.
type addOwnershipsPayload struct {
	// Unique ISBN ID
	Isbn *int `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *addOwnershipsPayload) Validate() (err error) {
	if payload.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "isbn"))
	}
	if payload.Isbn != nil {
		if *payload.Isbn < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.isbn`, *payload.Isbn, 1, true))
		}
	}
	return
}

// Publicize creates AddOwnershipsPayload from addOwnershipsPayload
func (payload *addOwnershipsPayload) Publicize() *AddOwnershipsPayload {
	var pub AddOwnershipsPayload
	if payload.Isbn != nil {
		pub.Isbn = *payload.Isbn
	}
	return &pub
}

// AddOwnershipsPayload is the ownerships add action payload.
type AddOwnershipsPayload struct {
	// Unique ISBN ID
	Isbn int `form:"isbn" json:"isbn" xml:"isbn"`
}

// Validate runs the validation rules defined in the design.
func (payload *AddOwnershipsPayload) Validate() (err error) {
	if payload.Isbn < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.isbn`, payload.Isbn, 1, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *AddOwnershipsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddOwnershipsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *AddOwnershipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *AddOwnershipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *AddOwnershipsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddOwnershipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *AddOwnershipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateOwnershipsContext provides the ownerships create action context.
type CreateOwnershipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *CreateOwnershipsPayload
}

// NewCreateOwnershipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the ownerships controller create action.
func NewCreateOwnershipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateOwnershipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateOwnershipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// createOwnershipsPayload is the ownerships create action payload.
type createOwnershipsPayload struct {
	// Unique Book ID
	BookID *int `form:"book_id,omitempty" json:"book_id,omitempty" xml:"book_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createOwnershipsPayload) Validate() (err error) {
	if payload.BookID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "book_id"))
	}
	if payload.BookID != nil {
		if *payload.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.book_id`, *payload.BookID, 1, true))
		}
	}
	return
}

// Publicize creates CreateOwnershipsPayload from createOwnershipsPayload
func (payload *createOwnershipsPayload) Publicize() *CreateOwnershipsPayload {
	var pub CreateOwnershipsPayload
	if payload.BookID != nil {
		pub.BookID = *payload.BookID
	}
	return &pub
}

// CreateOwnershipsPayload is the ownerships create action payload.
type CreateOwnershipsPayload struct {
	// Unique Book ID
	BookID int `form:"book_id" json:"book_id" xml:"book_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateOwnershipsPayload) Validate() (err error) {
	if payload.BookID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.book_id`, payload.BookID, 1, true))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateOwnershipsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateOwnershipsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateOwnershipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateOwnershipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateOwnershipsContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateOwnershipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateOwnershipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteOwnershipsContext provides the ownerships delete action context.
type DeleteOwnershipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID int
	UserID int
}

// NewDeleteOwnershipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the ownerships controller delete action.
func NewDeleteOwnershipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteOwnershipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteOwnershipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["book_id"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("book_id", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`book_id`, rctx.BookID, 1, true))
		}
	}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteOwnershipsContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteOwnershipsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteOwnershipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteOwnershipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteOwnershipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteOwnershipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListOwnershipsContext provides the ownerships list action context.
type ListOwnershipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewListOwnershipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the ownerships controller list action.
func NewListOwnershipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListOwnershipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListOwnershipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListOwnershipsContext) OK(r OwnershipCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.ownership+json; type=collection")
	if r == nil {
		r = OwnershipCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListOwnershipsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListOwnershipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListOwnershipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListOwnershipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListOwnershipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowOwnershipsContext provides the ownerships show action context.
type ShowOwnershipsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BookID int
	UserID int
}

// NewShowOwnershipsContext parses the incoming request URL and body, performs validations and creates the
// context used by the ownerships controller show action.
func NewShowOwnershipsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowOwnershipsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowOwnershipsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBookID := req.Params["book_id"]
	if len(paramBookID) > 0 {
		rawBookID := paramBookID[0]
		if bookID, err2 := strconv.Atoi(rawBookID); err2 == nil {
			rctx.BookID = bookID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("book_id", rawBookID, "integer"))
		}
		if rctx.BookID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`book_id`, rctx.BookID, 1, true))
		}
	}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowOwnershipsContext) OK(r *Ownership) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.ownership+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowOwnershipsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowOwnershipsContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowOwnershipsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowOwnershipsContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowOwnershipsContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// GetPasswordContext provides the password get action context.
type GetPasswordContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email string
}

// NewGetPasswordContext parses the incoming request URL and body, performs validations and creates the
// context used by the password controller get action.
func NewGetPasswordContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetPasswordContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetPasswordContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("email"))
	} else {
		rawEmail := paramEmail[0]
		rctx.Email = rawEmail
		if err2 := goa.ValidateFormat(goa.FormatEmail, rctx.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, rctx.Email, goa.FormatEmail, err2))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *GetPasswordContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetPasswordContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *GetPasswordContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetPasswordContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *GetPasswordContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdatePasswordContext provides the password update action context.
type UpdatePasswordContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *PasswordChangePayload
}

// NewUpdatePasswordContext parses the incoming request URL and body, performs validations and creates the
// context used by the password controller update action.
func NewUpdatePasswordContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdatePasswordContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdatePasswordContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdatePasswordContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdatePasswordContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdatePasswordContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdatePasswordContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdatePasswordContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// CreateUsersContext provides the users create action context.
type CreateUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UserCreatePayload
}

// NewCreateUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller create action.
func NewCreateUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateUsersContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUsersContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *CreateUsersContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *CreateUsersContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// DeleteUsersContext provides the users delete action context.
type DeleteUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewDeleteUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller delete action.
func NewDeleteUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteUsersContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteUsersContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteUsersContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteUsersContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *DeleteUsersContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ListUsersContext provides the users list action context.
type ListUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email    *string
	Nickname *string
}

// NewListUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller list action.
func NewListUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) > 0 {
		rawEmail := paramEmail[0]
		rctx.Email = &rawEmail
		if rctx.Email != nil {
			if err2 := goa.ValidateFormat(goa.FormatEmail, *rctx.Email); err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, *rctx.Email, goa.FormatEmail, err2))
			}
		}
	}
	paramNickname := req.Params["nickname"]
	if len(paramNickname) > 0 {
		rawNickname := paramNickname[0]
		rctx.Nickname = &rawNickname
		if rctx.Nickname != nil {
			if utf8.RuneCountInString(*rctx.Nickname) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`nickname`, *rctx.Nickname, utf8.RuneCountInString(*rctx.Nickname), 1, true))
			}
		}
		if rctx.Nickname != nil {
			if utf8.RuneCountInString(*rctx.Nickname) > 32 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`nickname`, *rctx.Nickname, utf8.RuneCountInString(*rctx.Nickname), 32, false))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUsersContext) OK(r UserCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListUsersContext) OKTiny(r UserTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ListUsersContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ShowUsersContext provides the users show action context.
type ShowUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewShowUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller show action.
func NewShowUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUsersContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowUsersContext) OKTiny(r *UserTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowUsersContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUsersContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowUsersContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// UpdateUsersContext provides the users update action context.
type UpdateUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *UpdateUsersPayload
}

// NewUpdateUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller update action.
func NewUpdateUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// updateUsersPayload is the users update action payload.
type updateUsersPayload struct {
	// user nickname
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateUsersPayload) Validate() (err error) {
	if payload.Nickname == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "nickname"))
	}
	if payload.Nickname != nil {
		if utf8.RuneCountInString(*payload.Nickname) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.nickname`, *payload.Nickname, utf8.RuneCountInString(*payload.Nickname), 1, true))
		}
	}
	if payload.Nickname != nil {
		if utf8.RuneCountInString(*payload.Nickname) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.nickname`, *payload.Nickname, utf8.RuneCountInString(*payload.Nickname), 32, false))
		}
	}
	return
}

// Publicize creates UpdateUsersPayload from updateUsersPayload
func (payload *updateUsersPayload) Publicize() *UpdateUsersPayload {
	var pub UpdateUsersPayload
	if payload.Nickname != nil {
		pub.Nickname = *payload.Nickname
	}
	return &pub
}

// UpdateUsersPayload is the users update action payload.
type UpdateUsersPayload struct {
	// user nickname
	Nickname string `form:"nickname" json:"nickname" xml:"nickname"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateUsersPayload) Validate() (err error) {
	if payload.Nickname == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "nickname"))
	}
	if utf8.RuneCountInString(payload.Nickname) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.nickname`, payload.Nickname, utf8.RuneCountInString(payload.Nickname), 1, true))
	}
	if utf8.RuneCountInString(payload.Nickname) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.nickname`, payload.Nickname, utf8.RuneCountInString(payload.Nickname), 32, false))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateUsersContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateUsersContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateUsersContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateUsersContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *UpdateUsersContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateUsersContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *UpdateUsersContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// GetValidationContext provides the validation get action context.
type GetValidationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetValidationContext parses the incoming request URL and body, performs validations and creates the
// context used by the validation controller get action.
func NewGetValidationContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetValidationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetValidationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *GetValidationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetValidationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetValidationContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetValidationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *GetValidationContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetValidationContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *GetValidationContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}

// ValidateValidationContext provides the validation validate action context.
type ValidateValidationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *ValidateValidationPayload
}

// NewValidateValidationContext parses the incoming request URL and body, performs validations and creates the
// context used by the validation controller validate action.
func NewValidateValidationContext(ctx context.Context, r *http.Request, service *goa.Service) (*ValidateValidationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ValidateValidationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("user_id", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`user_id`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// validateValidationPayload is the validation validate action payload.
type validateValidationPayload struct {
	// token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *validateValidationPayload) Validate() (err error) {
	if payload.Token == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "token"))
	}
	if payload.Token != nil {
		if utf8.RuneCountInString(*payload.Token) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.token`, *payload.Token, utf8.RuneCountInString(*payload.Token), 1, true))
		}
	}
	return
}

// Publicize creates ValidateValidationPayload from validateValidationPayload
func (payload *validateValidationPayload) Publicize() *ValidateValidationPayload {
	var pub ValidateValidationPayload
	if payload.Token != nil {
		pub.Token = *payload.Token
	}
	return &pub
}

// ValidateValidationPayload is the validation validate action payload.
type ValidateValidationPayload struct {
	// token
	Token string `form:"token" json:"token" xml:"token"`
}

// Validate runs the validation rules defined in the design.
func (payload *ValidateValidationPayload) Validate() (err error) {
	if payload.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "token"))
	}
	if utf8.RuneCountInString(payload.Token) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.token`, payload.Token, utf8.RuneCountInString(payload.Token), 1, true))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *ValidateValidationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ValidateValidationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ValidateValidationContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UnprocessableEntity sends a HTTP response with status code 422.
func (ctx *ValidateValidationContext) UnprocessableEntity() error {
	ctx.ResponseData.WriteHeader(422)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ValidateValidationContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ValidateValidationContext) ServiceUnavailable() error {
	ctx.ResponseData.WriteHeader(503)
	return nil
}
