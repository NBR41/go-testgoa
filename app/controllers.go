// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// AuthenticateController is the controller interface for the Authenticate actions.
type AuthenticateController interface {
	goa.Muxer
	Auth(*AuthAuthenticateContext) error
}

// MountAuthenticateController "mounts" a Authenticate resource controller on the given service.
func MountAuthenticateController(service *goa.Service, ctrl AuthenticateController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/authenticate", ctrl.MuxHandler("preflight", handleAuthenticateOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAuthAuthenticateContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AuthenticatePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Auth(rctx)
	}
	h = handleAuthenticateOrigin(h)
	service.Mux.Handle("POST", "/authenticate", ctrl.MuxHandler("auth", h, unmarshalAuthAuthenticatePayload))
	service.LogInfo("mount", "ctrl", "Authenticate", "action", "Auth", "route", "POST /authenticate")
}

// handleAuthenticateOrigin applies the CORS response headers corresponding to the origin.
func handleAuthenticateOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalAuthAuthenticatePayload unmarshals the request body into the context request data Payload field.
func unmarshalAuthAuthenticatePayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &authenticatePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// AuthorsController is the controller interface for the Authors actions.
type AuthorsController interface {
	goa.Muxer
	Create(*CreateAuthorsContext) error
	Delete(*DeleteAuthorsContext) error
	List(*ListAuthorsContext) error
	Show(*ShowAuthorsContext) error
	Update(*UpdateAuthorsContext) error
}

// MountAuthorsController "mounts" a Authors resource controller on the given service.
func MountAuthorsController(service *goa.Service, ctrl AuthorsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/authors", ctrl.MuxHandler("preflight", handleAuthorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/authors/:author_id", ctrl.MuxHandler("preflight", handleAuthorsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateAuthorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateAuthorsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleAuthorsOrigin(h)
	service.Mux.Handle("POST", "/authors", ctrl.MuxHandler("create", h, unmarshalCreateAuthorsPayload))
	service.LogInfo("mount", "ctrl", "Authors", "action", "Create", "route", "POST /authors", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteAuthorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleAuthorsOrigin(h)
	service.Mux.Handle("DELETE", "/authors/:author_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Authors", "action", "Delete", "route", "DELETE /authors/:author_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListAuthorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleAuthorsOrigin(h)
	service.Mux.Handle("GET", "/authors", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Authors", "action", "List", "route", "GET /authors")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowAuthorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleAuthorsOrigin(h)
	service.Mux.Handle("GET", "/authors/:author_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Authors", "action", "Show", "route", "GET /authors/:author_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateAuthorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateAuthorsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleAuthorsOrigin(h)
	service.Mux.Handle("PUT", "/authors/:author_id", ctrl.MuxHandler("update", h, unmarshalUpdateAuthorsPayload))
	service.LogInfo("mount", "ctrl", "Authors", "action", "Update", "route", "PUT /authors/:author_id", "security", "JWTSec")
}

// handleAuthorsOrigin applies the CORS response headers corresponding to the origin.
func handleAuthorsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateAuthorsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateAuthorsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createAuthorsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateAuthorsPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateAuthorsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateAuthorsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// AuthorshipsController is the controller interface for the Authorships actions.
type AuthorshipsController interface {
	goa.Muxer
	Create(*CreateAuthorshipsContext) error
	Delete(*DeleteAuthorshipsContext) error
	List(*ListAuthorshipsContext) error
	Show(*ShowAuthorshipsContext) error
}

// MountAuthorshipsController "mounts" a Authorships resource controller on the given service.
func MountAuthorshipsController(service *goa.Service, ctrl AuthorshipsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/authorships", ctrl.MuxHandler("preflight", handleAuthorshipsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/authorships/:authorship_id", ctrl.MuxHandler("preflight", handleAuthorshipsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateAuthorshipsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateAuthorshipsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleAuthorshipsOrigin(h)
	service.Mux.Handle("POST", "/authorships", ctrl.MuxHandler("create", h, unmarshalCreateAuthorshipsPayload))
	service.LogInfo("mount", "ctrl", "Authorships", "action", "Create", "route", "POST /authorships", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteAuthorshipsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleAuthorshipsOrigin(h)
	service.Mux.Handle("DELETE", "/authorships/:authorship_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Authorships", "action", "Delete", "route", "DELETE /authorships/:authorship_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListAuthorshipsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleAuthorshipsOrigin(h)
	service.Mux.Handle("GET", "/authorships", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Authorships", "action", "List", "route", "GET /authorships", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowAuthorshipsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleAuthorshipsOrigin(h)
	service.Mux.Handle("GET", "/authorships/:authorship_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Authorships", "action", "Show", "route", "GET /authorships/:authorship_id", "security", "JWTSec")
}

// handleAuthorshipsOrigin applies the CORS response headers corresponding to the origin.
func handleAuthorshipsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateAuthorshipsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateAuthorshipsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createAuthorshipsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// BooksController is the controller interface for the Books actions.
type BooksController interface {
	goa.Muxer
	Create(*CreateBooksContext) error
	Delete(*DeleteBooksContext) error
	IsbnSearch(*IsbnSearchBooksContext) error
	List(*ListBooksContext) error
	Show(*ShowBooksContext) error
	Update(*UpdateBooksContext) error
}

// MountBooksController "mounts" a Books resource controller on the given service.
func MountBooksController(service *goa.Service, ctrl BooksController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/books", ctrl.MuxHandler("preflight", handleBooksOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/books/:book_id", ctrl.MuxHandler("preflight", handleBooksOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/books/add", ctrl.MuxHandler("preflight", handleBooksOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateBooksContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateBooksPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleBooksOrigin(h)
	service.Mux.Handle("POST", "/books", ctrl.MuxHandler("create", h, unmarshalCreateBooksPayload))
	service.LogInfo("mount", "ctrl", "Books", "action", "Create", "route", "POST /books", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteBooksContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleBooksOrigin(h)
	service.Mux.Handle("DELETE", "/books/:book_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Books", "action", "Delete", "route", "DELETE /books/:book_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewIsbnSearchBooksContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.IsbnSearch(rctx)
	}
	h = handleBooksOrigin(h)
	service.Mux.Handle("GET", "/books/add", ctrl.MuxHandler("isbnSearch", h, nil))
	service.LogInfo("mount", "ctrl", "Books", "action", "IsbnSearch", "route", "GET /books/add")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleBooksOrigin(h)
	service.Mux.Handle("GET", "/books", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Books", "action", "List", "route", "GET /books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowBooksContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleBooksOrigin(h)
	service.Mux.Handle("GET", "/books/:book_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Books", "action", "Show", "route", "GET /books/:book_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateBooksContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateBooksPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleBooksOrigin(h)
	service.Mux.Handle("PUT", "/books/:book_id", ctrl.MuxHandler("update", h, unmarshalUpdateBooksPayload))
	service.LogInfo("mount", "ctrl", "Books", "action", "Update", "route", "PUT /books/:book_id", "security", "JWTSec")
}

// handleBooksOrigin applies the CORS response headers corresponding to the origin.
func handleBooksOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateBooksPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateBooksPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createBooksPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateBooksPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateBooksPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateBooksPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// CategoriesController is the controller interface for the Categories actions.
type CategoriesController interface {
	goa.Muxer
	Create(*CreateCategoriesContext) error
	Delete(*DeleteCategoriesContext) error
	List(*ListCategoriesContext) error
	Show(*ShowCategoriesContext) error
	Update(*UpdateCategoriesContext) error
}

// MountCategoriesController "mounts" a Categories resource controller on the given service.
func MountCategoriesController(service *goa.Service, ctrl CategoriesController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/categories", ctrl.MuxHandler("preflight", handleCategoriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/categories/:category_id", ctrl.MuxHandler("preflight", handleCategoriesOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateCategoriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateCategoriesPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleCategoriesOrigin(h)
	service.Mux.Handle("POST", "/categories", ctrl.MuxHandler("create", h, unmarshalCreateCategoriesPayload))
	service.LogInfo("mount", "ctrl", "Categories", "action", "Create", "route", "POST /categories", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteCategoriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleCategoriesOrigin(h)
	service.Mux.Handle("DELETE", "/categories/:category_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Categories", "action", "Delete", "route", "DELETE /categories/:category_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCategoriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleCategoriesOrigin(h)
	service.Mux.Handle("GET", "/categories", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Categories", "action", "List", "route", "GET /categories")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowCategoriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleCategoriesOrigin(h)
	service.Mux.Handle("GET", "/categories/:category_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Categories", "action", "Show", "route", "GET /categories/:category_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateCategoriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateCategoriesPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleCategoriesOrigin(h)
	service.Mux.Handle("PUT", "/categories/:category_id", ctrl.MuxHandler("update", h, unmarshalUpdateCategoriesPayload))
	service.LogInfo("mount", "ctrl", "Categories", "action", "Update", "route", "PUT /categories/:category_id", "security", "JWTSec")
}

// handleCategoriesOrigin applies the CORS response headers corresponding to the origin.
func handleCategoriesOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateCategoriesPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateCategoriesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createCategoriesPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateCategoriesPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateCategoriesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateCategoriesPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// ClassesController is the controller interface for the Classes actions.
type ClassesController interface {
	goa.Muxer
	Create(*CreateClassesContext) error
	Delete(*DeleteClassesContext) error
	List(*ListClassesContext) error
	Show(*ShowClassesContext) error
	Update(*UpdateClassesContext) error
}

// MountClassesController "mounts" a Classes resource controller on the given service.
func MountClassesController(service *goa.Service, ctrl ClassesController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/classes", ctrl.MuxHandler("preflight", handleClassesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/classes/:class_id", ctrl.MuxHandler("preflight", handleClassesOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateClassesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateClassesPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleClassesOrigin(h)
	service.Mux.Handle("POST", "/classes", ctrl.MuxHandler("create", h, unmarshalCreateClassesPayload))
	service.LogInfo("mount", "ctrl", "Classes", "action", "Create", "route", "POST /classes", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteClassesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleClassesOrigin(h)
	service.Mux.Handle("DELETE", "/classes/:class_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Classes", "action", "Delete", "route", "DELETE /classes/:class_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListClassesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleClassesOrigin(h)
	service.Mux.Handle("GET", "/classes", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Classes", "action", "List", "route", "GET /classes")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowClassesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleClassesOrigin(h)
	service.Mux.Handle("GET", "/classes/:class_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Classes", "action", "Show", "route", "GET /classes/:class_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateClassesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateClassesPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleClassesOrigin(h)
	service.Mux.Handle("PUT", "/classes/:class_id", ctrl.MuxHandler("update", h, unmarshalUpdateClassesPayload))
	service.LogInfo("mount", "ctrl", "Classes", "action", "Update", "route", "PUT /classes/:class_id", "security", "JWTSec")
}

// handleClassesOrigin applies the CORS response headers corresponding to the origin.
func handleClassesOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateClassesPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateClassesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createClassesPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateClassesPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateClassesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateClassesPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// ClassificationsController is the controller interface for the Classifications actions.
type ClassificationsController interface {
	goa.Muxer
	Create(*CreateClassificationsContext) error
	Delete(*DeleteClassificationsContext) error
	List(*ListClassificationsContext) error
	Show(*ShowClassificationsContext) error
}

// MountClassificationsController "mounts" a Classifications resource controller on the given service.
func MountClassificationsController(service *goa.Service, ctrl ClassificationsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/series/:series_id/classifications", ctrl.MuxHandler("preflight", handleClassificationsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/classifications/:class_id", ctrl.MuxHandler("preflight", handleClassificationsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateClassificationsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateClassificationsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleClassificationsOrigin(h)
	service.Mux.Handle("POST", "/series/:series_id/classifications", ctrl.MuxHandler("create", h, unmarshalCreateClassificationsPayload))
	service.LogInfo("mount", "ctrl", "Classifications", "action", "Create", "route", "POST /series/:series_id/classifications", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteClassificationsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleClassificationsOrigin(h)
	service.Mux.Handle("DELETE", "/series/:series_id/classifications/:class_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Classifications", "action", "Delete", "route", "DELETE /series/:series_id/classifications/:class_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListClassificationsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleClassificationsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/classifications", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Classifications", "action", "List", "route", "GET /series/:series_id/classifications", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowClassificationsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleClassificationsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/classifications/:class_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Classifications", "action", "Show", "route", "GET /series/:series_id/classifications/:class_id", "security", "JWTSec")
}

// handleClassificationsOrigin applies the CORS response headers corresponding to the origin.
func handleClassificationsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateClassificationsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateClassificationsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createClassificationsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// CollectionsController is the controller interface for the Collections actions.
type CollectionsController interface {
	goa.Muxer
	Create(*CreateCollectionsContext) error
	Delete(*DeleteCollectionsContext) error
	List(*ListCollectionsContext) error
	Show(*ShowCollectionsContext) error
	Update(*UpdateCollectionsContext) error
}

// MountCollectionsController "mounts" a Collections resource controller on the given service.
func MountCollectionsController(service *goa.Service, ctrl CollectionsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/collections", ctrl.MuxHandler("preflight", handleCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/collections/:collection_id", ctrl.MuxHandler("preflight", handleCollectionsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateCollectionsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleCollectionsOrigin(h)
	service.Mux.Handle("POST", "/collections", ctrl.MuxHandler("create", h, unmarshalCreateCollectionsPayload))
	service.LogInfo("mount", "ctrl", "Collections", "action", "Create", "route", "POST /collections", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleCollectionsOrigin(h)
	service.Mux.Handle("DELETE", "/collections/:collection_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Collections", "action", "Delete", "route", "DELETE /collections/:collection_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleCollectionsOrigin(h)
	service.Mux.Handle("GET", "/collections", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Collections", "action", "List", "route", "GET /collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleCollectionsOrigin(h)
	service.Mux.Handle("GET", "/collections/:collection_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Collections", "action", "Show", "route", "GET /collections/:collection_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateCollectionsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleCollectionsOrigin(h)
	service.Mux.Handle("PUT", "/collections/:collection_id", ctrl.MuxHandler("update", h, unmarshalUpdateCollectionsPayload))
	service.LogInfo("mount", "ctrl", "Collections", "action", "Update", "route", "PUT /collections/:collection_id", "security", "JWTSec")
}

// handleCollectionsOrigin applies the CORS response headers corresponding to the origin.
func handleCollectionsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateCollectionsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateCollectionsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createCollectionsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateCollectionsPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateCollectionsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateCollectionsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// EditionsController is the controller interface for the Editions actions.
type EditionsController interface {
	goa.Muxer
	Create(*CreateEditionsContext) error
	Delete(*DeleteEditionsContext) error
	List(*ListEditionsContext) error
	Show(*ShowEditionsContext) error
}

// MountEditionsController "mounts" a Editions resource controller on the given service.
func MountEditionsController(service *goa.Service, ctrl EditionsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/editions", ctrl.MuxHandler("preflight", handleEditionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editions/:edition_id", ctrl.MuxHandler("preflight", handleEditionsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateEditionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateEditionsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleEditionsOrigin(h)
	service.Mux.Handle("POST", "/editions", ctrl.MuxHandler("create", h, unmarshalCreateEditionsPayload))
	service.LogInfo("mount", "ctrl", "Editions", "action", "Create", "route", "POST /editions", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteEditionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleEditionsOrigin(h)
	service.Mux.Handle("DELETE", "/editions/:edition_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Editions", "action", "Delete", "route", "DELETE /editions/:edition_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListEditionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleEditionsOrigin(h)
	service.Mux.Handle("GET", "/editions", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Editions", "action", "List", "route", "GET /editions", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowEditionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleEditionsOrigin(h)
	service.Mux.Handle("GET", "/editions/:edition_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Editions", "action", "Show", "route", "GET /editions/:edition_id", "security", "JWTSec")
}

// handleEditionsOrigin applies the CORS response headers corresponding to the origin.
func handleEditionsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateEditionsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateEditionsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createEditionsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// EditorsController is the controller interface for the Editors actions.
type EditorsController interface {
	goa.Muxer
	Create(*CreateEditorsContext) error
	Delete(*DeleteEditorsContext) error
	List(*ListEditorsContext) error
	Show(*ShowEditorsContext) error
	Update(*UpdateEditorsContext) error
}

// MountEditorsController "mounts" a Editors resource controller on the given service.
func MountEditorsController(service *goa.Service, ctrl EditorsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/editors", ctrl.MuxHandler("preflight", handleEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id", ctrl.MuxHandler("preflight", handleEditorsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateEditorsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleEditorsOrigin(h)
	service.Mux.Handle("POST", "/editors", ctrl.MuxHandler("create", h, unmarshalCreateEditorsPayload))
	service.LogInfo("mount", "ctrl", "Editors", "action", "Create", "route", "POST /editors", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleEditorsOrigin(h)
	service.Mux.Handle("DELETE", "/editors/:editor_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Editors", "action", "Delete", "route", "DELETE /editors/:editor_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleEditorsOrigin(h)
	service.Mux.Handle("GET", "/editors", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Editors", "action", "List", "route", "GET /editors")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleEditorsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Editors", "action", "Show", "route", "GET /editors/:editor_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateEditorsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleEditorsOrigin(h)
	service.Mux.Handle("PUT", "/editors/:editor_id", ctrl.MuxHandler("update", h, unmarshalUpdateEditorsPayload))
	service.LogInfo("mount", "ctrl", "Editors", "action", "Update", "route", "PUT /editors/:editor_id", "security", "JWTSec")
}

// handleEditorsOrigin applies the CORS response headers corresponding to the origin.
func handleEditorsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateEditorsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateEditorsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createEditorsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateEditorsPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateEditorsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateEditorsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// HealthController is the controller interface for the Health actions.
type HealthController interface {
	goa.Muxer
	Health(*HealthHealthContext) error
}

// MountHealthController "mounts" a Health resource controller on the given service.
func MountHealthController(service *goa.Service, ctrl HealthController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/_ah/health", ctrl.MuxHandler("preflight", handleHealthOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewHealthHealthContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Health(rctx)
	}
	h = handleHealthOrigin(h)
	service.Mux.Handle("GET", "/_ah/health", ctrl.MuxHandler("health", h, nil))
	service.LogInfo("mount", "ctrl", "Health", "action", "Health", "route", "GET /_ah/health")
}

// handleHealthOrigin applies the CORS response headers corresponding to the origin.
func handleHealthOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// UsersController is the controller interface for the Users actions.
type UsersController interface {
	goa.Muxer
	Create(*CreateUsersContext) error
	Delete(*DeleteUsersContext) error
	List(*ListUsersContext) error
	Show(*ShowUsersContext) error
	Update(*UpdateUsersContext) error
}

// MountUsersController "mounts" a Users resource controller on the given service.
func MountUsersController(service *goa.Service, ctrl UsersController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/users", ctrl.MuxHandler("preflight", handleUsersOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/users/:user_id", ctrl.MuxHandler("preflight", handleUsersOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateUsersContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UserCreatePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleUsersOrigin(h)
	service.Mux.Handle("POST", "/users", ctrl.MuxHandler("create", h, unmarshalCreateUsersPayload))
	service.LogInfo("mount", "ctrl", "Users", "action", "Create", "route", "POST /users")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteUsersContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleUsersOrigin(h)
	service.Mux.Handle("DELETE", "/users/:user_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Users", "action", "Delete", "route", "DELETE /users/:user_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListUsersContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleUsersOrigin(h)
	service.Mux.Handle("GET", "/users", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Users", "action", "List", "route", "GET /users", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowUsersContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleUsersOrigin(h)
	service.Mux.Handle("GET", "/users/:user_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Users", "action", "Show", "route", "GET /users/:user_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateUsersContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateUsersPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleUsersOrigin(h)
	service.Mux.Handle("PUT", "/users/:user_id", ctrl.MuxHandler("update", h, unmarshalUpdateUsersPayload))
	service.LogInfo("mount", "ctrl", "Users", "action", "Update", "route", "PUT /users/:user_id", "security", "JWTSec")
}

// handleUsersOrigin applies the CORS response headers corresponding to the origin.
func handleUsersOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateUsersPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateUsersPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &userCreatePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateUsersPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateUsersPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateUsersPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// OwnershipsController is the controller interface for the Ownerships actions.
type OwnershipsController interface {
	goa.Muxer
	Create(*CreateOwnershipsContext) error
	Delete(*DeleteOwnershipsContext) error
	List(*ListOwnershipsContext) error
	Show(*ShowOwnershipsContext) error
}

// MountOwnershipsController "mounts" a Ownerships resource controller on the given service.
func MountOwnershipsController(service *goa.Service, ctrl OwnershipsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/users/:user_id/ownerships", ctrl.MuxHandler("preflight", handleOwnershipsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/users/:user_id/ownerships/:book_id", ctrl.MuxHandler("preflight", handleOwnershipsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateOwnershipsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateOwnershipsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleOwnershipsOrigin(h)
	service.Mux.Handle("POST", "/users/:user_id/ownerships", ctrl.MuxHandler("create", h, unmarshalCreateOwnershipsPayload))
	service.LogInfo("mount", "ctrl", "Ownerships", "action", "Create", "route", "POST /users/:user_id/ownerships", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteOwnershipsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleOwnershipsOrigin(h)
	service.Mux.Handle("DELETE", "/users/:user_id/ownerships/:book_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Ownerships", "action", "Delete", "route", "DELETE /users/:user_id/ownerships/:book_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListOwnershipsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleOwnershipsOrigin(h)
	service.Mux.Handle("GET", "/users/:user_id/ownerships", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Ownerships", "action", "List", "route", "GET /users/:user_id/ownerships", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowOwnershipsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleOwnershipsOrigin(h)
	service.Mux.Handle("GET", "/users/:user_id/ownerships/:book_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Ownerships", "action", "Show", "route", "GET /users/:user_id/ownerships/:book_id", "security", "JWTSec")
}

// handleOwnershipsOrigin applies the CORS response headers corresponding to the origin.
func handleOwnershipsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateOwnershipsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateOwnershipsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createOwnershipsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PasswordController is the controller interface for the Password actions.
type PasswordController interface {
	goa.Muxer
	Get(*GetPasswordContext) error
	Update(*UpdatePasswordContext) error
}

// MountPasswordController "mounts" a Password resource controller on the given service.
func MountPasswordController(service *goa.Service, ctrl PasswordController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/password", ctrl.MuxHandler("preflight", handlePasswordOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetPasswordContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handlePasswordOrigin(h)
	service.Mux.Handle("GET", "/password", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Password", "action", "Get", "route", "GET /password")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdatePasswordContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*PasswordChangePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handlePasswordOrigin(h)
	service.Mux.Handle("POST", "/password", ctrl.MuxHandler("update", h, unmarshalUpdatePasswordPayload))
	service.LogInfo("mount", "ctrl", "Password", "action", "Update", "route", "POST /password")
}

// handlePasswordOrigin applies the CORS response headers corresponding to the origin.
func handlePasswordOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalUpdatePasswordPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdatePasswordPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &passwordChangePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PrintsController is the controller interface for the Prints actions.
type PrintsController interface {
	goa.Muxer
	Create(*CreatePrintsContext) error
	Delete(*DeletePrintsContext) error
	List(*ListPrintsContext) error
	Show(*ShowPrintsContext) error
	Update(*UpdatePrintsContext) error
}

// MountPrintsController "mounts" a Prints resource controller on the given service.
func MountPrintsController(service *goa.Service, ctrl PrintsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/prints", ctrl.MuxHandler("preflight", handlePrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id", ctrl.MuxHandler("preflight", handlePrintsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreatePrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreatePrintsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handlePrintsOrigin(h)
	service.Mux.Handle("POST", "/prints", ctrl.MuxHandler("create", h, unmarshalCreatePrintsPayload))
	service.LogInfo("mount", "ctrl", "Prints", "action", "Create", "route", "POST /prints", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeletePrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handlePrintsOrigin(h)
	service.Mux.Handle("DELETE", "/prints/:print_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Prints", "action", "Delete", "route", "DELETE /prints/:print_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handlePrintsOrigin(h)
	service.Mux.Handle("GET", "/prints", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Prints", "action", "List", "route", "GET /prints")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handlePrintsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Prints", "action", "Show", "route", "GET /prints/:print_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdatePrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdatePrintsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handlePrintsOrigin(h)
	service.Mux.Handle("PUT", "/prints/:print_id", ctrl.MuxHandler("update", h, unmarshalUpdatePrintsPayload))
	service.LogInfo("mount", "ctrl", "Prints", "action", "Update", "route", "PUT /prints/:print_id", "security", "JWTSec")
}

// handlePrintsOrigin applies the CORS response headers corresponding to the origin.
func handlePrintsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreatePrintsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreatePrintsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createPrintsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdatePrintsPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdatePrintsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updatePrintsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// RelationAuthorController is the controller interface for the RelationAuthor actions.
type RelationAuthorController interface {
	goa.Muxer
	ListCategories(*ListCategoriesRelationAuthorContext) error
	ListClasses(*ListClassesRelationAuthorContext) error
	ListRoles(*ListRolesRelationAuthorContext) error
	ListSeries(*ListSeriesRelationAuthorContext) error
	ListSeriesByCategory(*ListSeriesByCategoryRelationAuthorContext) error
	ListSeriesByClass(*ListSeriesByClassRelationAuthorContext) error
	ListSeriesByRole(*ListSeriesByRoleRelationAuthorContext) error
}

// MountRelationAuthorController "mounts" a RelationAuthor resource controller on the given service.
func MountRelationAuthorController(service *goa.Service, ctrl RelationAuthorController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/authors/:author_id/categories", ctrl.MuxHandler("preflight", handleRelationAuthorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/authors/:author_id/classes", ctrl.MuxHandler("preflight", handleRelationAuthorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/authors/:author_id/roles", ctrl.MuxHandler("preflight", handleRelationAuthorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/authors/:author_id/series", ctrl.MuxHandler("preflight", handleRelationAuthorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/authors/:author_id/categories/:category_id/series", ctrl.MuxHandler("preflight", handleRelationAuthorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/authors/:author_id/classes/:class_id/series", ctrl.MuxHandler("preflight", handleRelationAuthorOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/authors/:author_id/roles/:role_id/series", ctrl.MuxHandler("preflight", handleRelationAuthorOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCategoriesRelationAuthorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCategories(rctx)
	}
	h = handleRelationAuthorOrigin(h)
	service.Mux.Handle("GET", "/authors/:author_id/categories", ctrl.MuxHandler("listCategories", h, nil))
	service.LogInfo("mount", "ctrl", "RelationAuthor", "action", "ListCategories", "route", "GET /authors/:author_id/categories")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListClassesRelationAuthorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListClasses(rctx)
	}
	h = handleRelationAuthorOrigin(h)
	service.Mux.Handle("GET", "/authors/:author_id/classes", ctrl.MuxHandler("listClasses", h, nil))
	service.LogInfo("mount", "ctrl", "RelationAuthor", "action", "ListClasses", "route", "GET /authors/:author_id/classes")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListRolesRelationAuthorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListRoles(rctx)
	}
	h = handleRelationAuthorOrigin(h)
	service.Mux.Handle("GET", "/authors/:author_id/roles", ctrl.MuxHandler("listRoles", h, nil))
	service.LogInfo("mount", "ctrl", "RelationAuthor", "action", "ListRoles", "route", "GET /authors/:author_id/roles")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesRelationAuthorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeries(rctx)
	}
	h = handleRelationAuthorOrigin(h)
	service.Mux.Handle("GET", "/authors/:author_id/series", ctrl.MuxHandler("listSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationAuthor", "action", "ListSeries", "route", "GET /authors/:author_id/series")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesByCategoryRelationAuthorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeriesByCategory(rctx)
	}
	h = handleRelationAuthorOrigin(h)
	service.Mux.Handle("GET", "/authors/:author_id/categories/:category_id/series", ctrl.MuxHandler("listSeriesByCategory", h, nil))
	service.LogInfo("mount", "ctrl", "RelationAuthor", "action", "ListSeriesByCategory", "route", "GET /authors/:author_id/categories/:category_id/series")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesByClassRelationAuthorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeriesByClass(rctx)
	}
	h = handleRelationAuthorOrigin(h)
	service.Mux.Handle("GET", "/authors/:author_id/classes/:class_id/series", ctrl.MuxHandler("listSeriesByClass", h, nil))
	service.LogInfo("mount", "ctrl", "RelationAuthor", "action", "ListSeriesByClass", "route", "GET /authors/:author_id/classes/:class_id/series")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesByRoleRelationAuthorContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeriesByRole(rctx)
	}
	h = handleRelationAuthorOrigin(h)
	service.Mux.Handle("GET", "/authors/:author_id/roles/:role_id/series", ctrl.MuxHandler("listSeriesByRole", h, nil))
	service.LogInfo("mount", "ctrl", "RelationAuthor", "action", "ListSeriesByRole", "route", "GET /authors/:author_id/roles/:role_id/series")
}

// handleRelationAuthorOrigin applies the CORS response headers corresponding to the origin.
func handleRelationAuthorOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationCategoryController is the controller interface for the RelationCategory actions.
type RelationCategoryController interface {
	goa.Muxer
	ListAuthors(*ListAuthorsRelationCategoryContext) error
	ListClasses(*ListClassesRelationCategoryContext) error
	ListSeries(*ListSeriesRelationCategoryContext) error
	ListSeriesByClass(*ListSeriesByClassRelationCategoryContext) error
}

// MountRelationCategoryController "mounts" a RelationCategory resource controller on the given service.
func MountRelationCategoryController(service *goa.Service, ctrl RelationCategoryController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/categories/:category_id/authors", ctrl.MuxHandler("preflight", handleRelationCategoryOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/categories/:category_id/classes", ctrl.MuxHandler("preflight", handleRelationCategoryOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/categories/:category_id/series", ctrl.MuxHandler("preflight", handleRelationCategoryOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/categories/:category_id/classes/:class_id/series", ctrl.MuxHandler("preflight", handleRelationCategoryOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListAuthorsRelationCategoryContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListAuthors(rctx)
	}
	h = handleRelationCategoryOrigin(h)
	service.Mux.Handle("GET", "/categories/:category_id/authors", ctrl.MuxHandler("listAuthors", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCategory", "action", "ListAuthors", "route", "GET /categories/:category_id/authors")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListClassesRelationCategoryContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListClasses(rctx)
	}
	h = handleRelationCategoryOrigin(h)
	service.Mux.Handle("GET", "/categories/:category_id/classes", ctrl.MuxHandler("listClasses", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCategory", "action", "ListClasses", "route", "GET /categories/:category_id/classes")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesRelationCategoryContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeries(rctx)
	}
	h = handleRelationCategoryOrigin(h)
	service.Mux.Handle("GET", "/categories/:category_id/series", ctrl.MuxHandler("listSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCategory", "action", "ListSeries", "route", "GET /categories/:category_id/series")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesByClassRelationCategoryContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeriesByClass(rctx)
	}
	h = handleRelationCategoryOrigin(h)
	service.Mux.Handle("GET", "/categories/:category_id/classes/:class_id/series", ctrl.MuxHandler("listSeriesByClass", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCategory", "action", "ListSeriesByClass", "route", "GET /categories/:category_id/classes/:class_id/series")
}

// handleRelationCategoryOrigin applies the CORS response headers corresponding to the origin.
func handleRelationCategoryOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationClassController is the controller interface for the RelationClass actions.
type RelationClassController interface {
	goa.Muxer
	ListCategories(*ListCategoriesRelationClassContext) error
	ListSeries(*ListSeriesRelationClassContext) error
	ListSeriesByCategory(*ListSeriesByCategoryRelationClassContext) error
}

// MountRelationClassController "mounts" a RelationClass resource controller on the given service.
func MountRelationClassController(service *goa.Service, ctrl RelationClassController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/classes/:class_id/categories", ctrl.MuxHandler("preflight", handleRelationClassOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/classes/:class_id/series", ctrl.MuxHandler("preflight", handleRelationClassOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/classes/:class_id/categories/:category_id/series", ctrl.MuxHandler("preflight", handleRelationClassOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCategoriesRelationClassContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCategories(rctx)
	}
	h = handleRelationClassOrigin(h)
	service.Mux.Handle("GET", "/classes/:class_id/categories", ctrl.MuxHandler("listCategories", h, nil))
	service.LogInfo("mount", "ctrl", "RelationClass", "action", "ListCategories", "route", "GET /classes/:class_id/categories")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesRelationClassContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeries(rctx)
	}
	h = handleRelationClassOrigin(h)
	service.Mux.Handle("GET", "/classes/:class_id/series", ctrl.MuxHandler("listSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationClass", "action", "ListSeries", "route", "GET /classes/:class_id/series")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesByCategoryRelationClassContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeriesByCategory(rctx)
	}
	h = handleRelationClassOrigin(h)
	service.Mux.Handle("GET", "/classes/:class_id/categories/:category_id/series", ctrl.MuxHandler("listSeriesByCategory", h, nil))
	service.LogInfo("mount", "ctrl", "RelationClass", "action", "ListSeriesByCategory", "route", "GET /classes/:class_id/categories/:category_id/series")
}

// handleRelationClassOrigin applies the CORS response headers corresponding to the origin.
func handleRelationClassOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationCollectionController is the controller interface for the RelationCollection actions.
type RelationCollectionController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationCollectionContext) error
	ListBooksByPrint(*ListBooksByPrintRelationCollectionContext) error
	ListBooksByPrintSeries(*ListBooksByPrintSeriesRelationCollectionContext) error
	ListBooksBySeries(*ListBooksBySeriesRelationCollectionContext) error
	ListBooksBySeriesPrint(*ListBooksBySeriesPrintRelationCollectionContext) error
	ListPrints(*ListPrintsRelationCollectionContext) error
	ListPrintsBySeries(*ListPrintsBySeriesRelationCollectionContext) error
	ListSeries(*ListSeriesRelationCollectionContext) error
	ListSeriesByPrint(*ListSeriesByPrintRelationCollectionContext) error
}

// MountRelationCollectionController "mounts" a RelationCollection resource controller on the given service.
func MountRelationCollectionController(service *goa.Service, ctrl RelationCollectionController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationCollectionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/collections/:collection_id/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationCollectionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/collections/:collection_id/prints/:print_id/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationCollectionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/collections/:collection_id/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationCollectionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/collections/:collection_id/series/:series_id/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationCollectionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/collections/:collection_id/prints", ctrl.MuxHandler("preflight", handleRelationCollectionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/collections/:collection_id/series/:series_id/prints", ctrl.MuxHandler("preflight", handleRelationCollectionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/collections/:collection_id/series", ctrl.MuxHandler("preflight", handleRelationCollectionOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/collections/:collection_id/prints/:print_id/series", ctrl.MuxHandler("preflight", handleRelationCollectionOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationCollectionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationCollectionOrigin(h)
	service.Mux.Handle("GET", "/collections/:collection_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCollection", "action", "ListBooks", "route", "GET /collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByPrintRelationCollectionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByPrint(rctx)
	}
	h = handleRelationCollectionOrigin(h)
	service.Mux.Handle("GET", "/collections/:collection_id/prints/:print_id/books", ctrl.MuxHandler("listBooksByPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCollection", "action", "ListBooksByPrint", "route", "GET /collections/:collection_id/prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByPrintSeriesRelationCollectionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByPrintSeries(rctx)
	}
	h = handleRelationCollectionOrigin(h)
	service.Mux.Handle("GET", "/collections/:collection_id/prints/:print_id/series/:series_id/books", ctrl.MuxHandler("listBooksByPrintSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCollection", "action", "ListBooksByPrintSeries", "route", "GET /collections/:collection_id/prints/:print_id/series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksBySeriesRelationCollectionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksBySeries(rctx)
	}
	h = handleRelationCollectionOrigin(h)
	service.Mux.Handle("GET", "/collections/:collection_id/series/:series_id/books", ctrl.MuxHandler("listBooksBySeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCollection", "action", "ListBooksBySeries", "route", "GET /collections/:collection_id/series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksBySeriesPrintRelationCollectionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksBySeriesPrint(rctx)
	}
	h = handleRelationCollectionOrigin(h)
	service.Mux.Handle("GET", "/collections/:collection_id/series/:series_id/prints/:print_id/books", ctrl.MuxHandler("listBooksBySeriesPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCollection", "action", "ListBooksBySeriesPrint", "route", "GET /collections/:collection_id/series/:series_id/prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsRelationCollectionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListPrints(rctx)
	}
	h = handleRelationCollectionOrigin(h)
	service.Mux.Handle("GET", "/collections/:collection_id/prints", ctrl.MuxHandler("listPrints", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCollection", "action", "ListPrints", "route", "GET /collections/:collection_id/prints")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsBySeriesRelationCollectionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListPrintsBySeries(rctx)
	}
	h = handleRelationCollectionOrigin(h)
	service.Mux.Handle("GET", "/collections/:collection_id/series/:series_id/prints", ctrl.MuxHandler("listPrintsBySeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCollection", "action", "ListPrintsBySeries", "route", "GET /collections/:collection_id/series/:series_id/prints")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesRelationCollectionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeries(rctx)
	}
	h = handleRelationCollectionOrigin(h)
	service.Mux.Handle("GET", "/collections/:collection_id/series", ctrl.MuxHandler("listSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCollection", "action", "ListSeries", "route", "GET /collections/:collection_id/series")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesByPrintRelationCollectionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeriesByPrint(rctx)
	}
	h = handleRelationCollectionOrigin(h)
	service.Mux.Handle("GET", "/collections/:collection_id/prints/:print_id/series", ctrl.MuxHandler("listSeriesByPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationCollection", "action", "ListSeriesByPrint", "route", "GET /collections/:collection_id/prints/:print_id/series")
}

// handleRelationCollectionOrigin applies the CORS response headers corresponding to the origin.
func handleRelationCollectionOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationEditorsController is the controller interface for the RelationEditors actions.
type RelationEditorsController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationEditorsContext) error
	ListCollections(*ListCollectionsRelationEditorsContext) error
	ListPrints(*ListPrintsRelationEditorsContext) error
	ListSeries(*ListSeriesRelationEditorsContext) error
}

// MountRelationEditorsController "mounts" a RelationEditors resource controller on the given service.
func MountRelationEditorsController(service *goa.Service, ctrl RelationEditorsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/collections", ctrl.MuxHandler("preflight", handleRelationEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/prints", ctrl.MuxHandler("preflight", handleRelationEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/series", ctrl.MuxHandler("preflight", handleRelationEditorsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationEditorsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditors", "action", "ListBooks", "route", "GET /editors/:editor_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsRelationEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollections(rctx)
	}
	h = handleRelationEditorsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/collections", ctrl.MuxHandler("listCollections", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditors", "action", "ListCollections", "route", "GET /editors/:editor_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsRelationEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListPrints(rctx)
	}
	h = handleRelationEditorsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/prints", ctrl.MuxHandler("listPrints", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditors", "action", "ListPrints", "route", "GET /editors/:editor_id/prints")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesRelationEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeries(rctx)
	}
	h = handleRelationEditorsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/series", ctrl.MuxHandler("listSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditors", "action", "ListSeries", "route", "GET /editors/:editor_id/series")
}

// handleRelationEditorsOrigin applies the CORS response headers corresponding to the origin.
func handleRelationEditorsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationEditorsCollectionsController is the controller interface for the RelationEditorsCollections actions.
type RelationEditorsCollectionsController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationEditorsCollectionsContext) error
	ListBooksByPrint(*ListBooksByPrintRelationEditorsCollectionsContext) error
	ListBooksByPrintSeries(*ListBooksByPrintSeriesRelationEditorsCollectionsContext) error
	ListBooksBySeries(*ListBooksBySeriesRelationEditorsCollectionsContext) error
	ListBooksBySeriesPrint(*ListBooksBySeriesPrintRelationEditorsCollectionsContext) error
	ListPrints(*ListPrintsRelationEditorsCollectionsContext) error
	ListPrintsBySeries(*ListPrintsBySeriesRelationEditorsCollectionsContext) error
	ListSeries(*ListSeriesRelationEditorsCollectionsContext) error
	ListSeriesByPrint(*ListSeriesByPrintRelationEditorsCollectionsContext) error
}

// MountRelationEditorsCollectionsController "mounts" a RelationEditorsCollections resource controller on the given service.
func MountRelationEditorsCollectionsController(service *goa.Service, ctrl RelationEditorsCollectionsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/collections/:collection_id/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/collections/:collection_id/prints/:print_id/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/collections/:collection_id/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/collections/:collection_id/series/:series_id/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/collections/:collection_id/prints", ctrl.MuxHandler("preflight", handleRelationEditorsCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/collections/:collection_id/series/:series_id/prints", ctrl.MuxHandler("preflight", handleRelationEditorsCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/collections/:collection_id/series", ctrl.MuxHandler("preflight", handleRelationEditorsCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/collections/:collection_id/prints/:print_id/series", ctrl.MuxHandler("preflight", handleRelationEditorsCollectionsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationEditorsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationEditorsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/collections/:collection_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsCollections", "action", "ListBooks", "route", "GET /editors/:editor_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByPrintRelationEditorsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByPrint(rctx)
	}
	h = handleRelationEditorsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/collections/:collection_id/prints/:print_id/books", ctrl.MuxHandler("listBooksByPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsCollections", "action", "ListBooksByPrint", "route", "GET /editors/:editor_id/collections/:collection_id/prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByPrintSeriesRelationEditorsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByPrintSeries(rctx)
	}
	h = handleRelationEditorsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/collections/:collection_id/prints/:print_id/series/:series_id/books", ctrl.MuxHandler("listBooksByPrintSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsCollections", "action", "ListBooksByPrintSeries", "route", "GET /editors/:editor_id/collections/:collection_id/prints/:print_id/series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksBySeriesRelationEditorsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksBySeries(rctx)
	}
	h = handleRelationEditorsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/collections/:collection_id/series/:series_id/books", ctrl.MuxHandler("listBooksBySeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsCollections", "action", "ListBooksBySeries", "route", "GET /editors/:editor_id/collections/:collection_id/series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksBySeriesPrintRelationEditorsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksBySeriesPrint(rctx)
	}
	h = handleRelationEditorsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/collections/:collection_id/series/:series_id/prints/:print_id/books", ctrl.MuxHandler("listBooksBySeriesPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsCollections", "action", "ListBooksBySeriesPrint", "route", "GET /editors/:editor_id/collections/:collection_id/series/:series_id/prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsRelationEditorsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListPrints(rctx)
	}
	h = handleRelationEditorsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/collections/:collection_id/prints", ctrl.MuxHandler("listPrints", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsCollections", "action", "ListPrints", "route", "GET /editors/:editor_id/collections/:collection_id/prints")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsBySeriesRelationEditorsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListPrintsBySeries(rctx)
	}
	h = handleRelationEditorsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/collections/:collection_id/series/:series_id/prints", ctrl.MuxHandler("listPrintsBySeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsCollections", "action", "ListPrintsBySeries", "route", "GET /editors/:editor_id/collections/:collection_id/series/:series_id/prints")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesRelationEditorsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeries(rctx)
	}
	h = handleRelationEditorsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/collections/:collection_id/series", ctrl.MuxHandler("listSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsCollections", "action", "ListSeries", "route", "GET /editors/:editor_id/collections/:collection_id/series")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesByPrintRelationEditorsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeriesByPrint(rctx)
	}
	h = handleRelationEditorsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/collections/:collection_id/prints/:print_id/series", ctrl.MuxHandler("listSeriesByPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsCollections", "action", "ListSeriesByPrint", "route", "GET /editors/:editor_id/collections/:collection_id/prints/:print_id/series")
}

// handleRelationEditorsCollectionsOrigin applies the CORS response headers corresponding to the origin.
func handleRelationEditorsCollectionsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationEditorsPrintsController is the controller interface for the RelationEditorsPrints actions.
type RelationEditorsPrintsController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationEditorsPrintsContext) error
	ListBooksByCollection(*ListBooksByCollectionRelationEditorsPrintsContext) error
	ListBooksByCollectionSeries(*ListBooksByCollectionSeriesRelationEditorsPrintsContext) error
	ListBooksBySeries(*ListBooksBySeriesRelationEditorsPrintsContext) error
	ListBooksBySeriesCollection(*ListBooksBySeriesCollectionRelationEditorsPrintsContext) error
	ListCollections(*ListCollectionsRelationEditorsPrintsContext) error
	ListCollectionsBySeries(*ListCollectionsBySeriesRelationEditorsPrintsContext) error
	ListSeries(*ListSeriesRelationEditorsPrintsContext) error
	ListSeriesByCollection(*ListSeriesByCollectionRelationEditorsPrintsContext) error
}

// MountRelationEditorsPrintsController "mounts" a RelationEditorsPrints resource controller on the given service.
func MountRelationEditorsPrintsController(service *goa.Service, ctrl RelationEditorsPrintsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/prints/:print_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/prints/:print_id/collections/:collection_id/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/prints/:print_id/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/prints/:print_id/series/:series_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/prints/:print_id/collections", ctrl.MuxHandler("preflight", handleRelationEditorsPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/prints/:print_id/series/:series_id/collections", ctrl.MuxHandler("preflight", handleRelationEditorsPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/prints/:print_id/series", ctrl.MuxHandler("preflight", handleRelationEditorsPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/prints/:print_id/collections/:collection_id/series", ctrl.MuxHandler("preflight", handleRelationEditorsPrintsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationEditorsPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationEditorsPrintsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/prints/:print_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsPrints", "action", "ListBooks", "route", "GET /editors/:editor_id/prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByCollectionRelationEditorsPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByCollection(rctx)
	}
	h = handleRelationEditorsPrintsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/prints/:print_id/collections/:collection_id/books", ctrl.MuxHandler("listBooksByCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsPrints", "action", "ListBooksByCollection", "route", "GET /editors/:editor_id/prints/:print_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByCollectionSeriesRelationEditorsPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByCollectionSeries(rctx)
	}
	h = handleRelationEditorsPrintsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/prints/:print_id/collections/:collection_id/series/:series_id/books", ctrl.MuxHandler("listBooksByCollectionSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsPrints", "action", "ListBooksByCollectionSeries", "route", "GET /editors/:editor_id/prints/:print_id/collections/:collection_id/series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksBySeriesRelationEditorsPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksBySeries(rctx)
	}
	h = handleRelationEditorsPrintsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/prints/:print_id/series/:series_id/books", ctrl.MuxHandler("listBooksBySeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsPrints", "action", "ListBooksBySeries", "route", "GET /editors/:editor_id/prints/:print_id/series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksBySeriesCollectionRelationEditorsPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksBySeriesCollection(rctx)
	}
	h = handleRelationEditorsPrintsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/prints/:print_id/series/:series_id/collections/:collection_id/books", ctrl.MuxHandler("listBooksBySeriesCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsPrints", "action", "ListBooksBySeriesCollection", "route", "GET /editors/:editor_id/prints/:print_id/series/:series_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsRelationEditorsPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollections(rctx)
	}
	h = handleRelationEditorsPrintsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/prints/:print_id/collections", ctrl.MuxHandler("listCollections", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsPrints", "action", "ListCollections", "route", "GET /editors/:editor_id/prints/:print_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsBySeriesRelationEditorsPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollectionsBySeries(rctx)
	}
	h = handleRelationEditorsPrintsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/prints/:print_id/series/:series_id/collections", ctrl.MuxHandler("listCollectionsBySeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsPrints", "action", "ListCollectionsBySeries", "route", "GET /editors/:editor_id/prints/:print_id/series/:series_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesRelationEditorsPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeries(rctx)
	}
	h = handleRelationEditorsPrintsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/prints/:print_id/series", ctrl.MuxHandler("listSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsPrints", "action", "ListSeries", "route", "GET /editors/:editor_id/prints/:print_id/series")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesByCollectionRelationEditorsPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeriesByCollection(rctx)
	}
	h = handleRelationEditorsPrintsOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/prints/:print_id/collections/:collection_id/series", ctrl.MuxHandler("listSeriesByCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsPrints", "action", "ListSeriesByCollection", "route", "GET /editors/:editor_id/prints/:print_id/collections/:collection_id/series")
}

// handleRelationEditorsPrintsOrigin applies the CORS response headers corresponding to the origin.
func handleRelationEditorsPrintsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationEditorsSeriesController is the controller interface for the RelationEditorsSeries actions.
type RelationEditorsSeriesController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationEditorsSeriesContext) error
	ListBooksByCollection(*ListBooksByCollectionRelationEditorsSeriesContext) error
	ListBooksByCollectionPrint(*ListBooksByCollectionPrintRelationEditorsSeriesContext) error
	ListBooksByPrint(*ListBooksByPrintRelationEditorsSeriesContext) error
	ListBooksByPrintCollection(*ListBooksByPrintCollectionRelationEditorsSeriesContext) error
	ListCollections(*ListCollectionsRelationEditorsSeriesContext) error
	ListCollectionsByPrint(*ListCollectionsByPrintRelationEditorsSeriesContext) error
	ListPrints(*ListPrintsRelationEditorsSeriesContext) error
	ListPrintsByCollection(*ListPrintsByCollectionRelationEditorsSeriesContext) error
}

// MountRelationEditorsSeriesController "mounts" a RelationEditorsSeries resource controller on the given service.
func MountRelationEditorsSeriesController(service *goa.Service, ctrl RelationEditorsSeriesController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/series/:series_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/series/:series_id/collections/:collection_id/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/series/:series_id/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/series/:series_id/prints/:print_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationEditorsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/series/:series_id/collections", ctrl.MuxHandler("preflight", handleRelationEditorsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/series/:series_id/prints/:print_id/collections", ctrl.MuxHandler("preflight", handleRelationEditorsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/series/:series_id/prints", ctrl.MuxHandler("preflight", handleRelationEditorsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/editors/:editor_id/series/:series_id/collections/:collection_id/prints", ctrl.MuxHandler("preflight", handleRelationEditorsSeriesOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationEditorsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationEditorsSeriesOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/series/:series_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsSeries", "action", "ListBooks", "route", "GET /editors/:editor_id/series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByCollectionRelationEditorsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByCollection(rctx)
	}
	h = handleRelationEditorsSeriesOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/series/:series_id/collections/:collection_id/books", ctrl.MuxHandler("listBooksByCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsSeries", "action", "ListBooksByCollection", "route", "GET /editors/:editor_id/series/:series_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByCollectionPrintRelationEditorsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByCollectionPrint(rctx)
	}
	h = handleRelationEditorsSeriesOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/series/:series_id/collections/:collection_id/prints/:print_id/books", ctrl.MuxHandler("listBooksByCollectionPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsSeries", "action", "ListBooksByCollectionPrint", "route", "GET /editors/:editor_id/series/:series_id/collections/:collection_id/prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByPrintRelationEditorsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByPrint(rctx)
	}
	h = handleRelationEditorsSeriesOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/series/:series_id/prints/:print_id/books", ctrl.MuxHandler("listBooksByPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsSeries", "action", "ListBooksByPrint", "route", "GET /editors/:editor_id/series/:series_id/prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByPrintCollectionRelationEditorsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByPrintCollection(rctx)
	}
	h = handleRelationEditorsSeriesOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/series/:series_id/prints/:print_id/collections/:collection_id/books", ctrl.MuxHandler("listBooksByPrintCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsSeries", "action", "ListBooksByPrintCollection", "route", "GET /editors/:editor_id/series/:series_id/prints/:print_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsRelationEditorsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollections(rctx)
	}
	h = handleRelationEditorsSeriesOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/series/:series_id/collections", ctrl.MuxHandler("listCollections", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsSeries", "action", "ListCollections", "route", "GET /editors/:editor_id/series/:series_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsByPrintRelationEditorsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollectionsByPrint(rctx)
	}
	h = handleRelationEditorsSeriesOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/series/:series_id/prints/:print_id/collections", ctrl.MuxHandler("listCollectionsByPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsSeries", "action", "ListCollectionsByPrint", "route", "GET /editors/:editor_id/series/:series_id/prints/:print_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsRelationEditorsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListPrints(rctx)
	}
	h = handleRelationEditorsSeriesOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/series/:series_id/prints", ctrl.MuxHandler("listPrints", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsSeries", "action", "ListPrints", "route", "GET /editors/:editor_id/series/:series_id/prints")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsByCollectionRelationEditorsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListPrintsByCollection(rctx)
	}
	h = handleRelationEditorsSeriesOrigin(h)
	service.Mux.Handle("GET", "/editors/:editor_id/series/:series_id/collections/:collection_id/prints", ctrl.MuxHandler("listPrintsByCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationEditorsSeries", "action", "ListPrintsByCollection", "route", "GET /editors/:editor_id/series/:series_id/collections/:collection_id/prints")
}

// handleRelationEditorsSeriesOrigin applies the CORS response headers corresponding to the origin.
func handleRelationEditorsSeriesOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationPrintsController is the controller interface for the RelationPrints actions.
type RelationPrintsController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationPrintsContext) error
	ListCollections(*ListCollectionsRelationPrintsContext) error
	ListEditors(*ListEditorsRelationPrintsContext) error
	ListSeries(*ListSeriesRelationPrintsContext) error
}

// MountRelationPrintsController "mounts" a RelationPrints resource controller on the given service.
func MountRelationPrintsController(service *goa.Service, ctrl RelationPrintsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/collections", ctrl.MuxHandler("preflight", handleRelationPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/editors", ctrl.MuxHandler("preflight", handleRelationPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/series", ctrl.MuxHandler("preflight", handleRelationPrintsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationPrintsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrints", "action", "ListBooks", "route", "GET /prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsRelationPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollections(rctx)
	}
	h = handleRelationPrintsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/collections", ctrl.MuxHandler("listCollections", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrints", "action", "ListCollections", "route", "GET /prints/:print_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListEditorsRelationPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListEditors(rctx)
	}
	h = handleRelationPrintsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/editors", ctrl.MuxHandler("listEditors", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrints", "action", "ListEditors", "route", "GET /prints/:print_id/editors")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesRelationPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeries(rctx)
	}
	h = handleRelationPrintsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/series", ctrl.MuxHandler("listSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrints", "action", "ListSeries", "route", "GET /prints/:print_id/series")
}

// handleRelationPrintsOrigin applies the CORS response headers corresponding to the origin.
func handleRelationPrintsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationPrintsCollectionsController is the controller interface for the RelationPrintsCollections actions.
type RelationPrintsCollectionsController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationPrintsCollectionsContext) error
	ListBooksBySeries(*ListBooksBySeriesRelationPrintsCollectionsContext) error
	ListSeries(*ListSeriesRelationPrintsCollectionsContext) error
}

// MountRelationPrintsCollectionsController "mounts" a RelationPrintsCollections resource controller on the given service.
func MountRelationPrintsCollectionsController(service *goa.Service, ctrl RelationPrintsCollectionsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/prints/:print_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/collections/:collection_id/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/collections/:collection_id/series", ctrl.MuxHandler("preflight", handleRelationPrintsCollectionsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationPrintsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationPrintsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/collections/:collection_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsCollections", "action", "ListBooks", "route", "GET /prints/:print_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksBySeriesRelationPrintsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksBySeries(rctx)
	}
	h = handleRelationPrintsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/collections/:collection_id/series/:series_id/books", ctrl.MuxHandler("listBooksBySeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsCollections", "action", "ListBooksBySeries", "route", "GET /prints/:print_id/collections/:collection_id/series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesRelationPrintsCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeries(rctx)
	}
	h = handleRelationPrintsCollectionsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/collections/:collection_id/series", ctrl.MuxHandler("listSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsCollections", "action", "ListSeries", "route", "GET /prints/:print_id/collections/:collection_id/series")
}

// handleRelationPrintsCollectionsOrigin applies the CORS response headers corresponding to the origin.
func handleRelationPrintsCollectionsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationPrintsEditorsController is the controller interface for the RelationPrintsEditors actions.
type RelationPrintsEditorsController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationPrintsEditorsContext) error
	ListBooksByCollection(*ListBooksByCollectionRelationPrintsEditorsContext) error
	ListBooksByCollectionSeries(*ListBooksByCollectionSeriesRelationPrintsEditorsContext) error
	ListBooksBySeries(*ListBooksBySeriesRelationPrintsEditorsContext) error
	ListBooksBySeriesCollection(*ListBooksBySeriesCollectionRelationPrintsEditorsContext) error
	ListCollections(*ListCollectionsRelationPrintsEditorsContext) error
	ListCollectionsBySeries(*ListCollectionsBySeriesRelationPrintsEditorsContext) error
	ListSeries(*ListSeriesRelationPrintsEditorsContext) error
	ListSeriesByCollection(*ListSeriesByCollectionRelationPrintsEditorsContext) error
}

// MountRelationPrintsEditorsController "mounts" a RelationPrintsEditors resource controller on the given service.
func MountRelationPrintsEditorsController(service *goa.Service, ctrl RelationPrintsEditorsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/prints/:print_id/editors/:editor_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/editors/:editor_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/editors/:editor_id/collections/:collection_id/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/editors/:editor_id/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/editors/:editor_id/series/:series_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/editors/:editor_id/collections", ctrl.MuxHandler("preflight", handleRelationPrintsEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/editors/:editor_id/series/:series_id/collections", ctrl.MuxHandler("preflight", handleRelationPrintsEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/editors/:editor_id/series", ctrl.MuxHandler("preflight", handleRelationPrintsEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/editors/:editor_id/collections/:collection_id/series", ctrl.MuxHandler("preflight", handleRelationPrintsEditorsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationPrintsEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationPrintsEditorsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/editors/:editor_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsEditors", "action", "ListBooks", "route", "GET /prints/:print_id/editors/:editor_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByCollectionRelationPrintsEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByCollection(rctx)
	}
	h = handleRelationPrintsEditorsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/editors/:editor_id/collections/:collection_id/books", ctrl.MuxHandler("listBooksByCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsEditors", "action", "ListBooksByCollection", "route", "GET /prints/:print_id/editors/:editor_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByCollectionSeriesRelationPrintsEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByCollectionSeries(rctx)
	}
	h = handleRelationPrintsEditorsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/editors/:editor_id/collections/:collection_id/series/:series_id/books", ctrl.MuxHandler("listBooksByCollectionSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsEditors", "action", "ListBooksByCollectionSeries", "route", "GET /prints/:print_id/editors/:editor_id/collections/:collection_id/series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksBySeriesRelationPrintsEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksBySeries(rctx)
	}
	h = handleRelationPrintsEditorsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/editors/:editor_id/series/:series_id/books", ctrl.MuxHandler("listBooksBySeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsEditors", "action", "ListBooksBySeries", "route", "GET /prints/:print_id/editors/:editor_id/series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksBySeriesCollectionRelationPrintsEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksBySeriesCollection(rctx)
	}
	h = handleRelationPrintsEditorsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/editors/:editor_id/series/:series_id/collections/:collection_id/books", ctrl.MuxHandler("listBooksBySeriesCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsEditors", "action", "ListBooksBySeriesCollection", "route", "GET /prints/:print_id/editors/:editor_id/series/:series_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsRelationPrintsEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollections(rctx)
	}
	h = handleRelationPrintsEditorsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/editors/:editor_id/collections", ctrl.MuxHandler("listCollections", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsEditors", "action", "ListCollections", "route", "GET /prints/:print_id/editors/:editor_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsBySeriesRelationPrintsEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollectionsBySeries(rctx)
	}
	h = handleRelationPrintsEditorsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/editors/:editor_id/series/:series_id/collections", ctrl.MuxHandler("listCollectionsBySeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsEditors", "action", "ListCollectionsBySeries", "route", "GET /prints/:print_id/editors/:editor_id/series/:series_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesRelationPrintsEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeries(rctx)
	}
	h = handleRelationPrintsEditorsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/editors/:editor_id/series", ctrl.MuxHandler("listSeries", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsEditors", "action", "ListSeries", "route", "GET /prints/:print_id/editors/:editor_id/series")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesByCollectionRelationPrintsEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeriesByCollection(rctx)
	}
	h = handleRelationPrintsEditorsOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/editors/:editor_id/collections/:collection_id/series", ctrl.MuxHandler("listSeriesByCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsEditors", "action", "ListSeriesByCollection", "route", "GET /prints/:print_id/editors/:editor_id/collections/:collection_id/series")
}

// handleRelationPrintsEditorsOrigin applies the CORS response headers corresponding to the origin.
func handleRelationPrintsEditorsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationPrintsSeriesController is the controller interface for the RelationPrintsSeries actions.
type RelationPrintsSeriesController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationPrintsSeriesContext) error
	ListBooksByCollection(*ListBooksByCollectionRelationPrintsSeriesContext) error
	ListBooksByCollectionEditor(*ListBooksByCollectionEditorRelationPrintsSeriesContext) error
	ListBooksByEditor(*ListBooksByEditorRelationPrintsSeriesContext) error
	ListBooksByEditorCollection(*ListBooksByEditorCollectionRelationPrintsSeriesContext) error
	ListCollections(*ListCollectionsRelationPrintsSeriesContext) error
	ListCollectionsByEditor(*ListCollectionsByEditorRelationPrintsSeriesContext) error
	ListEditors(*ListEditorsRelationPrintsSeriesContext) error
	ListEditorsByCollection(*ListEditorsByCollectionRelationPrintsSeriesContext) error
}

// MountRelationPrintsSeriesController "mounts" a RelationPrintsSeries resource controller on the given service.
func MountRelationPrintsSeriesController(service *goa.Service, ctrl RelationPrintsSeriesController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/prints/:print_id/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/series/:series_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/series/:series_id/collections/:collection_id/editors/:editor_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/series/:series_id/editors/:editor_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/series/:series_id/editors/:editor_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationPrintsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/series/:series_id/collections", ctrl.MuxHandler("preflight", handleRelationPrintsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/series/:series_id/editors/:editor_id/collections", ctrl.MuxHandler("preflight", handleRelationPrintsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/series/:series_id/editors", ctrl.MuxHandler("preflight", handleRelationPrintsSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/prints/:print_id/series/:series_id/collections/:collection_id/editors", ctrl.MuxHandler("preflight", handleRelationPrintsSeriesOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationPrintsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationPrintsSeriesOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/series/:series_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsSeries", "action", "ListBooks", "route", "GET /prints/:print_id/series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByCollectionRelationPrintsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByCollection(rctx)
	}
	h = handleRelationPrintsSeriesOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/series/:series_id/collections/:collection_id/books", ctrl.MuxHandler("listBooksByCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsSeries", "action", "ListBooksByCollection", "route", "GET /prints/:print_id/series/:series_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByCollectionEditorRelationPrintsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByCollectionEditor(rctx)
	}
	h = handleRelationPrintsSeriesOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/series/:series_id/collections/:collection_id/editors/:editor_id/books", ctrl.MuxHandler("listBooksByCollectionEditor", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsSeries", "action", "ListBooksByCollectionEditor", "route", "GET /prints/:print_id/series/:series_id/collections/:collection_id/editors/:editor_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByEditorRelationPrintsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByEditor(rctx)
	}
	h = handleRelationPrintsSeriesOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/series/:series_id/editors/:editor_id/books", ctrl.MuxHandler("listBooksByEditor", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsSeries", "action", "ListBooksByEditor", "route", "GET /prints/:print_id/series/:series_id/editors/:editor_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByEditorCollectionRelationPrintsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByEditorCollection(rctx)
	}
	h = handleRelationPrintsSeriesOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/series/:series_id/editors/:editor_id/collections/:collection_id/books", ctrl.MuxHandler("listBooksByEditorCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsSeries", "action", "ListBooksByEditorCollection", "route", "GET /prints/:print_id/series/:series_id/editors/:editor_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsRelationPrintsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollections(rctx)
	}
	h = handleRelationPrintsSeriesOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/series/:series_id/collections", ctrl.MuxHandler("listCollections", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsSeries", "action", "ListCollections", "route", "GET /prints/:print_id/series/:series_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsByEditorRelationPrintsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollectionsByEditor(rctx)
	}
	h = handleRelationPrintsSeriesOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/series/:series_id/editors/:editor_id/collections", ctrl.MuxHandler("listCollectionsByEditor", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsSeries", "action", "ListCollectionsByEditor", "route", "GET /prints/:print_id/series/:series_id/editors/:editor_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListEditorsRelationPrintsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListEditors(rctx)
	}
	h = handleRelationPrintsSeriesOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/series/:series_id/editors", ctrl.MuxHandler("listEditors", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsSeries", "action", "ListEditors", "route", "GET /prints/:print_id/series/:series_id/editors")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListEditorsByCollectionRelationPrintsSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListEditorsByCollection(rctx)
	}
	h = handleRelationPrintsSeriesOrigin(h)
	service.Mux.Handle("GET", "/prints/:print_id/series/:series_id/collections/:collection_id/editors", ctrl.MuxHandler("listEditorsByCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationPrintsSeries", "action", "ListEditorsByCollection", "route", "GET /prints/:print_id/series/:series_id/collections/:collection_id/editors")
}

// handleRelationPrintsSeriesOrigin applies the CORS response headers corresponding to the origin.
func handleRelationPrintsSeriesOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationRoleController is the controller interface for the RelationRole actions.
type RelationRoleController interface {
	goa.Muxer
	ListAuthors(*ListAuthorsRelationRoleContext) error
	ListSeriesByAuthor(*ListSeriesByAuthorRelationRoleContext) error
}

// MountRelationRoleController "mounts" a RelationRole resource controller on the given service.
func MountRelationRoleController(service *goa.Service, ctrl RelationRoleController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/roles/:role_id/authors", ctrl.MuxHandler("preflight", handleRelationRoleOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/roles/:role_id/authors/:author_id/series", ctrl.MuxHandler("preflight", handleRelationRoleOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListAuthorsRelationRoleContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListAuthors(rctx)
	}
	h = handleRelationRoleOrigin(h)
	service.Mux.Handle("GET", "/roles/:role_id/authors", ctrl.MuxHandler("listAuthors", h, nil))
	service.LogInfo("mount", "ctrl", "RelationRole", "action", "ListAuthors", "route", "GET /roles/:role_id/authors")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesByAuthorRelationRoleContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSeriesByAuthor(rctx)
	}
	h = handleRelationRoleOrigin(h)
	service.Mux.Handle("GET", "/roles/:role_id/authors/:author_id/series", ctrl.MuxHandler("listSeriesByAuthor", h, nil))
	service.LogInfo("mount", "ctrl", "RelationRole", "action", "ListSeriesByAuthor", "route", "GET /roles/:role_id/authors/:author_id/series")
}

// handleRelationRoleOrigin applies the CORS response headers corresponding to the origin.
func handleRelationRoleOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationSeriesController is the controller interface for the RelationSeries actions.
type RelationSeriesController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationSeriesContext) error
	ListCollections(*ListCollectionsRelationSeriesContext) error
	ListEditors(*ListEditorsRelationSeriesContext) error
	ListPrints(*ListPrintsRelationSeriesContext) error
}

// MountRelationSeriesController "mounts" a RelationSeries resource controller on the given service.
func MountRelationSeriesController(service *goa.Service, ctrl RelationSeriesController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/series/:series_id/books", ctrl.MuxHandler("preflight", handleRelationSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/collections", ctrl.MuxHandler("preflight", handleRelationSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/editors", ctrl.MuxHandler("preflight", handleRelationSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/prints", ctrl.MuxHandler("preflight", handleRelationSeriesOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationSeriesOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeries", "action", "ListBooks", "route", "GET /series/:series_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsRelationSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollections(rctx)
	}
	h = handleRelationSeriesOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/collections", ctrl.MuxHandler("listCollections", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeries", "action", "ListCollections", "route", "GET /series/:series_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListEditorsRelationSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListEditors(rctx)
	}
	h = handleRelationSeriesOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/editors", ctrl.MuxHandler("listEditors", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeries", "action", "ListEditors", "route", "GET /series/:series_id/editors")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsRelationSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListPrints(rctx)
	}
	h = handleRelationSeriesOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/prints", ctrl.MuxHandler("listPrints", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeries", "action", "ListPrints", "route", "GET /series/:series_id/prints")
}

// handleRelationSeriesOrigin applies the CORS response headers corresponding to the origin.
func handleRelationSeriesOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationSeriesCollectionsController is the controller interface for the RelationSeriesCollections actions.
type RelationSeriesCollectionsController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationSeriesCollectionsContext) error
	ListBooksByPrint(*ListBooksByPrintRelationSeriesCollectionsContext) error
	ListPrints(*ListPrintsRelationSeriesCollectionsContext) error
}

// MountRelationSeriesCollectionsController "mounts" a RelationSeriesCollections resource controller on the given service.
func MountRelationSeriesCollectionsController(service *goa.Service, ctrl RelationSeriesCollectionsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/series/:series_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationSeriesCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/collections/:collection_id/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationSeriesCollectionsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/collections/:collection_id/prints", ctrl.MuxHandler("preflight", handleRelationSeriesCollectionsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationSeriesCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationSeriesCollectionsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/collections/:collection_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesCollections", "action", "ListBooks", "route", "GET /series/:series_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByPrintRelationSeriesCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByPrint(rctx)
	}
	h = handleRelationSeriesCollectionsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/collections/:collection_id/prints/:print_id/books", ctrl.MuxHandler("listBooksByPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesCollections", "action", "ListBooksByPrint", "route", "GET /series/:series_id/collections/:collection_id/prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsRelationSeriesCollectionsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListPrints(rctx)
	}
	h = handleRelationSeriesCollectionsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/collections/:collection_id/prints", ctrl.MuxHandler("listPrints", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesCollections", "action", "ListPrints", "route", "GET /series/:series_id/collections/:collection_id/prints")
}

// handleRelationSeriesCollectionsOrigin applies the CORS response headers corresponding to the origin.
func handleRelationSeriesCollectionsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationSeriesEditorsController is the controller interface for the RelationSeriesEditors actions.
type RelationSeriesEditorsController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationSeriesEditorsContext) error
	ListBooksByCollection(*ListBooksByCollectionRelationSeriesEditorsContext) error
	ListBooksByCollectionPrint(*ListBooksByCollectionPrintRelationSeriesEditorsContext) error
	ListBooksByPrint(*ListBooksByPrintRelationSeriesEditorsContext) error
	ListBooksByPrintCollection(*ListBooksByPrintCollectionRelationSeriesEditorsContext) error
	ListCollections(*ListCollectionsRelationSeriesEditorsContext) error
	ListCollectionsByPrint(*ListCollectionsByPrintRelationSeriesEditorsContext) error
	ListPrints(*ListPrintsRelationSeriesEditorsContext) error
	ListPrintsByCollection(*ListPrintsByCollectionRelationSeriesEditorsContext) error
}

// MountRelationSeriesEditorsController "mounts" a RelationSeriesEditors resource controller on the given service.
func MountRelationSeriesEditorsController(service *goa.Service, ctrl RelationSeriesEditorsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/series/:series_id/editors/:editor_id/books", ctrl.MuxHandler("preflight", handleRelationSeriesEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/editors/:editor_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationSeriesEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/editors/:editor_id/collections/:collection_id/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationSeriesEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/editors/:editor_id/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationSeriesEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/editors/:editor_id/prints/:print_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationSeriesEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/editors/:editor_id/collections", ctrl.MuxHandler("preflight", handleRelationSeriesEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/editors/:editor_id/prints/:print_id/collections", ctrl.MuxHandler("preflight", handleRelationSeriesEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/editors/:editor_id/prints", ctrl.MuxHandler("preflight", handleRelationSeriesEditorsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/editors/:editor_id/collections/:collection_id/prints", ctrl.MuxHandler("preflight", handleRelationSeriesEditorsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationSeriesEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationSeriesEditorsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/editors/:editor_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesEditors", "action", "ListBooks", "route", "GET /series/:series_id/editors/:editor_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByCollectionRelationSeriesEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByCollection(rctx)
	}
	h = handleRelationSeriesEditorsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/editors/:editor_id/collections/:collection_id/books", ctrl.MuxHandler("listBooksByCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesEditors", "action", "ListBooksByCollection", "route", "GET /series/:series_id/editors/:editor_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByCollectionPrintRelationSeriesEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByCollectionPrint(rctx)
	}
	h = handleRelationSeriesEditorsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/editors/:editor_id/collections/:collection_id/prints/:print_id/books", ctrl.MuxHandler("listBooksByCollectionPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesEditors", "action", "ListBooksByCollectionPrint", "route", "GET /series/:series_id/editors/:editor_id/collections/:collection_id/prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByPrintRelationSeriesEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByPrint(rctx)
	}
	h = handleRelationSeriesEditorsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/editors/:editor_id/prints/:print_id/books", ctrl.MuxHandler("listBooksByPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesEditors", "action", "ListBooksByPrint", "route", "GET /series/:series_id/editors/:editor_id/prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByPrintCollectionRelationSeriesEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByPrintCollection(rctx)
	}
	h = handleRelationSeriesEditorsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/editors/:editor_id/prints/:print_id/collections/:collection_id/books", ctrl.MuxHandler("listBooksByPrintCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesEditors", "action", "ListBooksByPrintCollection", "route", "GET /series/:series_id/editors/:editor_id/prints/:print_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsRelationSeriesEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollections(rctx)
	}
	h = handleRelationSeriesEditorsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/editors/:editor_id/collections", ctrl.MuxHandler("listCollections", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesEditors", "action", "ListCollections", "route", "GET /series/:series_id/editors/:editor_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsByPrintRelationSeriesEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollectionsByPrint(rctx)
	}
	h = handleRelationSeriesEditorsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/editors/:editor_id/prints/:print_id/collections", ctrl.MuxHandler("listCollectionsByPrint", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesEditors", "action", "ListCollectionsByPrint", "route", "GET /series/:series_id/editors/:editor_id/prints/:print_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsRelationSeriesEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListPrints(rctx)
	}
	h = handleRelationSeriesEditorsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/editors/:editor_id/prints", ctrl.MuxHandler("listPrints", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesEditors", "action", "ListPrints", "route", "GET /series/:series_id/editors/:editor_id/prints")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPrintsByCollectionRelationSeriesEditorsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListPrintsByCollection(rctx)
	}
	h = handleRelationSeriesEditorsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/editors/:editor_id/collections/:collection_id/prints", ctrl.MuxHandler("listPrintsByCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesEditors", "action", "ListPrintsByCollection", "route", "GET /series/:series_id/editors/:editor_id/collections/:collection_id/prints")
}

// handleRelationSeriesEditorsOrigin applies the CORS response headers corresponding to the origin.
func handleRelationSeriesEditorsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RelationSeriesPrintsController is the controller interface for the RelationSeriesPrints actions.
type RelationSeriesPrintsController interface {
	goa.Muxer
	ListBooks(*ListBooksRelationSeriesPrintsContext) error
	ListBooksByEditor(*ListBooksByEditorRelationSeriesPrintsContext) error
	ListBooksByEditorCollection(*ListBooksByEditorCollectionRelationSeriesPrintsContext) error
	ListCollections(*ListCollectionsRelationSeriesPrintsContext) error
	ListCollectionsByEditor(*ListCollectionsByEditorRelationSeriesPrintsContext) error
	ListEditors(*ListEditorsRelationSeriesPrintsContext) error
}

// MountRelationSeriesPrintsController "mounts" a RelationSeriesPrints resource controller on the given service.
func MountRelationSeriesPrintsController(service *goa.Service, ctrl RelationSeriesPrintsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/series/:series_id/prints/:print_id/books", ctrl.MuxHandler("preflight", handleRelationSeriesPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/prints/:print_id/editors/:editor_id/books", ctrl.MuxHandler("preflight", handleRelationSeriesPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/prints/:print_id/editors/:editor_id/collections/:collection_id/books", ctrl.MuxHandler("preflight", handleRelationSeriesPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/prints/:print_id/collections", ctrl.MuxHandler("preflight", handleRelationSeriesPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/prints/:print_id/editors/:editor_id/collections", ctrl.MuxHandler("preflight", handleRelationSeriesPrintsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id/prints/:print_id/editors", ctrl.MuxHandler("preflight", handleRelationSeriesPrintsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksRelationSeriesPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooks(rctx)
	}
	h = handleRelationSeriesPrintsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/prints/:print_id/books", ctrl.MuxHandler("listBooks", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesPrints", "action", "ListBooks", "route", "GET /series/:series_id/prints/:print_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByEditorRelationSeriesPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByEditor(rctx)
	}
	h = handleRelationSeriesPrintsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/prints/:print_id/editors/:editor_id/books", ctrl.MuxHandler("listBooksByEditor", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesPrints", "action", "ListBooksByEditor", "route", "GET /series/:series_id/prints/:print_id/editors/:editor_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBooksByEditorCollectionRelationSeriesPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBooksByEditorCollection(rctx)
	}
	h = handleRelationSeriesPrintsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/prints/:print_id/editors/:editor_id/collections/:collection_id/books", ctrl.MuxHandler("listBooksByEditorCollection", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesPrints", "action", "ListBooksByEditorCollection", "route", "GET /series/:series_id/prints/:print_id/editors/:editor_id/collections/:collection_id/books")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsRelationSeriesPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollections(rctx)
	}
	h = handleRelationSeriesPrintsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/prints/:print_id/collections", ctrl.MuxHandler("listCollections", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesPrints", "action", "ListCollections", "route", "GET /series/:series_id/prints/:print_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListCollectionsByEditorRelationSeriesPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListCollectionsByEditor(rctx)
	}
	h = handleRelationSeriesPrintsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/prints/:print_id/editors/:editor_id/collections", ctrl.MuxHandler("listCollectionsByEditor", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesPrints", "action", "ListCollectionsByEditor", "route", "GET /series/:series_id/prints/:print_id/editors/:editor_id/collections")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListEditorsRelationSeriesPrintsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListEditors(rctx)
	}
	h = handleRelationSeriesPrintsOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id/prints/:print_id/editors", ctrl.MuxHandler("listEditors", h, nil))
	service.LogInfo("mount", "ctrl", "RelationSeriesPrints", "action", "ListEditors", "route", "GET /series/:series_id/prints/:print_id/editors")
}

// handleRelationSeriesPrintsOrigin applies the CORS response headers corresponding to the origin.
func handleRelationSeriesPrintsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// RolesController is the controller interface for the Roles actions.
type RolesController interface {
	goa.Muxer
	Create(*CreateRolesContext) error
	Delete(*DeleteRolesContext) error
	List(*ListRolesContext) error
	Show(*ShowRolesContext) error
	Update(*UpdateRolesContext) error
}

// MountRolesController "mounts" a Roles resource controller on the given service.
func MountRolesController(service *goa.Service, ctrl RolesController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/roles", ctrl.MuxHandler("preflight", handleRolesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/roles/:role_id", ctrl.MuxHandler("preflight", handleRolesOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateRolesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateRolesPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleRolesOrigin(h)
	service.Mux.Handle("POST", "/roles", ctrl.MuxHandler("create", h, unmarshalCreateRolesPayload))
	service.LogInfo("mount", "ctrl", "Roles", "action", "Create", "route", "POST /roles", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteRolesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleRolesOrigin(h)
	service.Mux.Handle("DELETE", "/roles/:role_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Roles", "action", "Delete", "route", "DELETE /roles/:role_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListRolesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleRolesOrigin(h)
	service.Mux.Handle("GET", "/roles", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Roles", "action", "List", "route", "GET /roles")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowRolesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleRolesOrigin(h)
	service.Mux.Handle("GET", "/roles/:role_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Roles", "action", "Show", "route", "GET /roles/:role_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateRolesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateRolesPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleRolesOrigin(h)
	service.Mux.Handle("PUT", "/roles/:role_id", ctrl.MuxHandler("update", h, unmarshalUpdateRolesPayload))
	service.LogInfo("mount", "ctrl", "Roles", "action", "Update", "route", "PUT /roles/:role_id", "security", "JWTSec")
}

// handleRolesOrigin applies the CORS response headers corresponding to the origin.
func handleRolesOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateRolesPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateRolesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createRolesPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateRolesPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateRolesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateRolesPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SeriesController is the controller interface for the Series actions.
type SeriesController interface {
	goa.Muxer
	Create(*CreateSeriesContext) error
	Delete(*DeleteSeriesContext) error
	List(*ListSeriesContext) error
	Show(*ShowSeriesContext) error
	Update(*UpdateSeriesContext) error
}

// MountSeriesController "mounts" a Series resource controller on the given service.
func MountSeriesController(service *goa.Service, ctrl SeriesController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/series", ctrl.MuxHandler("preflight", handleSeriesOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/series/:series_id", ctrl.MuxHandler("preflight", handleSeriesOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateSeriesPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleSeriesOrigin(h)
	service.Mux.Handle("POST", "/series", ctrl.MuxHandler("create", h, unmarshalCreateSeriesPayload))
	service.LogInfo("mount", "ctrl", "Series", "action", "Create", "route", "POST /series", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleSeriesOrigin(h)
	service.Mux.Handle("DELETE", "/series/:series_id", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "Series", "action", "Delete", "route", "DELETE /series/:series_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSeriesOrigin(h)
	service.Mux.Handle("GET", "/series", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Series", "action", "List", "route", "GET /series")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSeriesOrigin(h)
	service.Mux.Handle("GET", "/series/:series_id", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Series", "action", "Show", "route", "GET /series/:series_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateSeriesContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateSeriesPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleSeriesOrigin(h)
	service.Mux.Handle("PUT", "/series/:series_id", ctrl.MuxHandler("update", h, unmarshalUpdateSeriesPayload))
	service.LogInfo("mount", "ctrl", "Series", "action", "Update", "route", "PUT /series/:series_id", "security", "JWTSec")
}

// handleSeriesOrigin applies the CORS response headers corresponding to the origin.
func handleSeriesOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateSeriesPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateSeriesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createSeriesPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateSeriesPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateSeriesPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateSeriesPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/swagger.json", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/swagger.json", "public/swagger/swagger.json")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "public/swagger/swagger.json", "route", "GET /swagger.json")
}

// handleSwaggerOrigin applies the CORS response headers corresponding to the origin.
func handleSwaggerOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// TokenController is the controller interface for the Token actions.
type TokenController interface {
	goa.Muxer
	Access(*AccessTokenContext) error
	Auth(*AuthTokenContext) error
}

// MountTokenController "mounts" a Token resource controller on the given service.
func MountTokenController(service *goa.Service, ctrl TokenController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/token/access_token", ctrl.MuxHandler("preflight", handleTokenOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/token/auth", ctrl.MuxHandler("preflight", handleTokenOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAccessTokenContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Access(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleTokenOrigin(h)
	service.Mux.Handle("GET", "/token/access_token", ctrl.MuxHandler("access", h, nil))
	service.LogInfo("mount", "ctrl", "Token", "action", "Access", "route", "GET /token/access_token", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewAuthTokenContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Auth(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleTokenOrigin(h)
	service.Mux.Handle("GET", "/token/auth", ctrl.MuxHandler("auth", h, nil))
	service.LogInfo("mount", "ctrl", "Token", "action", "Auth", "route", "GET /token/auth", "security", "JWTSec")
}

// handleTokenOrigin applies the CORS response headers corresponding to the origin.
func handleTokenOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// ValidationController is the controller interface for the Validation actions.
type ValidationController interface {
	goa.Muxer
	Get(*GetValidationContext) error
	Validate(*ValidateValidationContext) error
}

// MountValidationController "mounts" a Validation resource controller on the given service.
func MountValidationController(service *goa.Service, ctrl ValidationController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/validation/:user_id", ctrl.MuxHandler("preflight", handleValidationOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/validation", ctrl.MuxHandler("preflight", handleValidationOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetValidationContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleSecurity("JWTSec", h)
	h = handleValidationOrigin(h)
	service.Mux.Handle("GET", "/validation/:user_id", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Validation", "action", "Get", "route", "GET /validation/:user_id", "security", "JWTSec")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewValidateValidationContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*ValidateValidationPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Validate(rctx)
	}
	h = handleValidationOrigin(h)
	service.Mux.Handle("POST", "/validation", ctrl.MuxHandler("validate", h, unmarshalValidateValidationPayload))
	service.LogInfo("mount", "ctrl", "Validation", "action", "Validate", "route", "POST /validation")
}

// handleValidationOrigin applies the CORS response headers corresponding to the origin.
func handleValidationOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://localhost:4200") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, Origin, Content-Type, Accept")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalValidateValidationPayload unmarshals the request body into the context request data Payload field.
func unmarshalValidateValidationPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &validateValidationPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
