// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": authenticate Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// AuthAuthenticatePath computes a request path to the auth action of authenticate.
func AuthAuthenticatePath() string {

	return fmt.Sprintf("/authenticate")
}

// auth the user
func (c *Client) AuthAuthenticate(ctx context.Context, path string, payload *AuthenticatePayload, contentType string) (*http.Response, error) {
	req, err := c.NewAuthAuthenticateRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAuthAuthenticateRequest create the request corresponding to the auth action endpoint of the authenticate resource.
func (c *Client) NewAuthAuthenticateRequest(ctx context.Context, path string, payload *AuthenticatePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
