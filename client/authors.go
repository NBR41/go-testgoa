// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": authors Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateAuthorsPayload is the authors create action payload.
type CreateAuthorsPayload struct {
	// Author Name
	AuthorName string `form:"author_name" json:"author_name" yaml:"author_name" xml:"author_name"`
}

// CreateAuthorsPath computes a request path to the create action of authors.
func CreateAuthorsPath() string {

	return fmt.Sprintf("/authors")
}

// Create new author
func (c *Client) CreateAuthors(ctx context.Context, path string, payload *CreateAuthorsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateAuthorsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateAuthorsRequest create the request corresponding to the create action endpoint of the authors resource.
func (c *Client) NewCreateAuthorsRequest(ctx context.Context, path string, payload *CreateAuthorsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteAuthorsPath computes a request path to the delete action of authors.
func DeleteAuthorsPath(authorID int) string {
	param0 := strconv.Itoa(authorID)

	return fmt.Sprintf("/authors/%s", param0)
}

// delete author by id
func (c *Client) DeleteAuthors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteAuthorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteAuthorsRequest create the request corresponding to the delete action endpoint of the authors resource.
func (c *Client) NewDeleteAuthorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListAuthorsPath computes a request path to the list action of authors.
func ListAuthorsPath() string {

	return fmt.Sprintf("/authors")
}

// List authors
func (c *Client) ListAuthors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListAuthorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAuthorsRequest create the request corresponding to the list action endpoint of the authors resource.
func (c *Client) NewListAuthorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowAuthorsPath computes a request path to the show action of authors.
func ShowAuthorsPath(authorID int) string {
	param0 := strconv.Itoa(authorID)

	return fmt.Sprintf("/authors/%s", param0)
}

// Get author by id
func (c *Client) ShowAuthors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowAuthorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowAuthorsRequest create the request corresponding to the show action endpoint of the authors resource.
func (c *Client) NewShowAuthorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateAuthorsPayload is the authors update action payload.
type UpdateAuthorsPayload struct {
	// Author Name
	AuthorName string `form:"author_name" json:"author_name" yaml:"author_name" xml:"author_name"`
}

// UpdateAuthorsPath computes a request path to the update action of authors.
func UpdateAuthorsPath(authorID int) string {
	param0 := strconv.Itoa(authorID)

	return fmt.Sprintf("/authors/%s", param0)
}

// Update author by id
func (c *Client) UpdateAuthors(ctx context.Context, path string, payload *UpdateAuthorsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateAuthorsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateAuthorsRequest create the request corresponding to the update action endpoint of the authors resource.
func (c *Client) NewUpdateAuthorsRequest(ctx context.Context, path string, payload *UpdateAuthorsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
