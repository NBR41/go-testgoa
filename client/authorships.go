// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": authorships Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateAuthorshipsPayload is the authorships create action payload.
type CreateAuthorshipsPayload struct {
	// Unique Author ID
	AuthorID int `form:"author_id" json:"author_id" yaml:"author_id" xml:"author_id"`
	// Unique Book ID
	BookID int `form:"book_id" json:"book_id" yaml:"book_id" xml:"book_id"`
	// Unique Role ID
	RoleID int `form:"role_id" json:"role_id" yaml:"role_id" xml:"role_id"`
}

// CreateAuthorshipsPath computes a request path to the create action of authorships.
func CreateAuthorshipsPath() string {

	return fmt.Sprintf("/authorships")
}

// Create new authorship
func (c *Client) CreateAuthorships(ctx context.Context, path string, payload *CreateAuthorshipsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateAuthorshipsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateAuthorshipsRequest create the request corresponding to the create action endpoint of the authorships resource.
func (c *Client) NewCreateAuthorshipsRequest(ctx context.Context, path string, payload *CreateAuthorshipsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteAuthorshipsPath computes a request path to the delete action of authorships.
func DeleteAuthorshipsPath(authorshipID int) string {
	param0 := strconv.Itoa(authorshipID)

	return fmt.Sprintf("/authorships/%s", param0)
}

// delete authorships by ids
func (c *Client) DeleteAuthorships(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteAuthorshipsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteAuthorshipsRequest create the request corresponding to the delete action endpoint of the authorships resource.
func (c *Client) NewDeleteAuthorshipsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListAuthorshipsPath computes a request path to the list action of authorships.
func ListAuthorshipsPath() string {

	return fmt.Sprintf("/authorships")
}

// List authorships
func (c *Client) ListAuthorships(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListAuthorshipsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAuthorshipsRequest create the request corresponding to the list action endpoint of the authorships resource.
func (c *Client) NewListAuthorshipsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowAuthorshipsPath computes a request path to the show action of authorships.
func ShowAuthorshipsPath(authorshipID int) string {
	param0 := strconv.Itoa(authorshipID)

	return fmt.Sprintf("/authorships/%s", param0)
}

// Get authorships by ids
func (c *Client) ShowAuthorships(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowAuthorshipsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowAuthorshipsRequest create the request corresponding to the show action endpoint of the authorships resource.
func (c *Client) NewShowAuthorshipsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
