// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": categories Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateCategoriesPayload is the categories create action payload.
type CreateCategoriesPayload struct {
	// Category Name (Thriller/Romance/...)
	CategoryName string `form:"category_name" json:"category_name" yaml:"category_name" xml:"category_name"`
}

// CreateCategoriesPath computes a request path to the create action of categories.
func CreateCategoriesPath() string {

	return fmt.Sprintf("/categories")
}

// Create new category
func (c *Client) CreateCategories(ctx context.Context, path string, payload *CreateCategoriesPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateCategoriesRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateCategoriesRequest create the request corresponding to the create action endpoint of the categories resource.
func (c *Client) NewCreateCategoriesRequest(ctx context.Context, path string, payload *CreateCategoriesPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteCategoriesPath computes a request path to the delete action of categories.
func DeleteCategoriesPath(categoryID int) string {
	param0 := strconv.Itoa(categoryID)

	return fmt.Sprintf("/categories/%s", param0)
}

// delete category by id
func (c *Client) DeleteCategories(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteCategoriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteCategoriesRequest create the request corresponding to the delete action endpoint of the categories resource.
func (c *Client) NewDeleteCategoriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListCategoriesPath computes a request path to the list action of categories.
func ListCategoriesPath() string {

	return fmt.Sprintf("/categories")
}

// Get categories
func (c *Client) ListCategories(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCategoriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCategoriesRequest create the request corresponding to the list action endpoint of the categories resource.
func (c *Client) NewListCategoriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowCategoriesPath computes a request path to the show action of categories.
func ShowCategoriesPath(categoryID int) string {
	param0 := strconv.Itoa(categoryID)

	return fmt.Sprintf("/categories/%s", param0)
}

// Get category by id
func (c *Client) ShowCategories(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowCategoriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowCategoriesRequest create the request corresponding to the show action endpoint of the categories resource.
func (c *Client) NewShowCategoriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateCategoriesPayload is the categories update action payload.
type UpdateCategoriesPayload struct {
	// Category Name (Thriller/Romance/...)
	CategoryName string `form:"category_name" json:"category_name" yaml:"category_name" xml:"category_name"`
}

// UpdateCategoriesPath computes a request path to the update action of categories.
func UpdateCategoriesPath(categoryID int) string {
	param0 := strconv.Itoa(categoryID)

	return fmt.Sprintf("/categories/%s", param0)
}

// Update category by id
func (c *Client) UpdateCategories(ctx context.Context, path string, payload *UpdateCategoriesPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateCategoriesRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateCategoriesRequest create the request corresponding to the update action endpoint of the categories resource.
func (c *Client) NewUpdateCategoriesRequest(ctx context.Context, path string, payload *UpdateCategoriesPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
