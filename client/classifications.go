// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": classifications Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateClassificationsPayload is the classifications create action payload.
type CreateClassificationsPayload struct {
	// Unique Class ID
	ClassID int `form:"class_id" json:"class_id" yaml:"class_id" xml:"class_id"`
}

// CreateClassificationsPath computes a request path to the create action of classifications.
func CreateClassificationsPath(seriesID int) string {
	param0 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/series/%s/classifications", param0)
}

// Create new series classification
func (c *Client) CreateClassifications(ctx context.Context, path string, payload *CreateClassificationsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateClassificationsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateClassificationsRequest create the request corresponding to the create action endpoint of the classifications resource.
func (c *Client) NewCreateClassificationsRequest(ctx context.Context, path string, payload *CreateClassificationsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteClassificationsPath computes a request path to the delete action of classifications.
func DeleteClassificationsPath(seriesID int, classID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(classID)

	return fmt.Sprintf("/series/%s/classifications/%s", param0, param1)
}

// delete series classification
func (c *Client) DeleteClassifications(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteClassificationsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteClassificationsRequest create the request corresponding to the delete action endpoint of the classifications resource.
func (c *Client) NewDeleteClassificationsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListClassificationsPath computes a request path to the list action of classifications.
func ListClassificationsPath(seriesID int) string {
	param0 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/series/%s/classifications", param0)
}

// List series classes
func (c *Client) ListClassifications(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListClassificationsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListClassificationsRequest create the request corresponding to the list action endpoint of the classifications resource.
func (c *Client) NewListClassificationsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowClassificationsPath computes a request path to the show action of classifications.
func ShowClassificationsPath(seriesID int, classID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(classID)

	return fmt.Sprintf("/series/%s/classifications/%s", param0, param1)
}

// Get series classification
func (c *Client) ShowClassifications(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowClassificationsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowClassificationsRequest create the request corresponding to the show action endpoint of the classifications resource.
func (c *Client) NewShowClassificationsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
