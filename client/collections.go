// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": collections Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateCollectionsPayload is the collections create action payload.
type CreateCollectionsPayload struct {
	// Collection Name (Découverte/Shonen)
	CollectionName string `form:"collection_name" json:"collection_name" yaml:"collection_name" xml:"collection_name"`
	// Unique Editor ID
	EditorID int `form:"editor_id" json:"editor_id" yaml:"editor_id" xml:"editor_id"`
}

// CreateCollectionsPath computes a request path to the create action of collections.
func CreateCollectionsPath(editorID int) string {
	param0 := strconv.Itoa(editorID)

	return fmt.Sprintf("/editors/%s/collections", param0)
}

// Create new collection
func (c *Client) CreateCollections(ctx context.Context, path string, payload *CreateCollectionsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateCollectionsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateCollectionsRequest create the request corresponding to the create action endpoint of the collections resource.
func (c *Client) NewCreateCollectionsRequest(ctx context.Context, path string, payload *CreateCollectionsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteCollectionsPath computes a request path to the delete action of collections.
func DeleteCollectionsPath(editorID int, collectionID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/editors/%s/collections/%s", param0, param1)
}

// delete collection by id
func (c *Client) DeleteCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteCollectionsRequest create the request corresponding to the delete action endpoint of the collections resource.
func (c *Client) NewDeleteCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListCollectionsPath computes a request path to the list action of collections.
func ListCollectionsPath(editorID int) string {
	param0 := strconv.Itoa(editorID)

	return fmt.Sprintf("/editors/%s/collections", param0)
}

// List collections
func (c *Client) ListCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCollectionsRequest create the request corresponding to the list action endpoint of the collections resource.
func (c *Client) NewListCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowCollectionsPath computes a request path to the show action of collections.
func ShowCollectionsPath(editorID int, collectionID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/editors/%s/collections/%s", param0, param1)
}

// Get collection by id
func (c *Client) ShowCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowCollectionsRequest create the request corresponding to the show action endpoint of the collections resource.
func (c *Client) NewShowCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateCollectionsPayload is the collections update action payload.
type UpdateCollectionsPayload struct {
	// Collection Name (Découverte/Shonen)
	CollectionName *string `form:"collection_name,omitempty" json:"collection_name,omitempty" yaml:"collection_name,omitempty" xml:"collection_name,omitempty"`
	// Unique Editor ID
	EditorID *int `form:"editor_id,omitempty" json:"editor_id,omitempty" yaml:"editor_id,omitempty" xml:"editor_id,omitempty"`
}

// UpdateCollectionsPath computes a request path to the update action of collections.
func UpdateCollectionsPath(editorID int, collectionID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/editors/%s/collections/%s", param0, param1)
}

// Update collection by id
func (c *Client) UpdateCollections(ctx context.Context, path string, payload *UpdateCollectionsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateCollectionsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateCollectionsRequest create the request corresponding to the update action endpoint of the collections resource.
func (c *Client) NewUpdateCollectionsRequest(ctx context.Context, path string, payload *UpdateCollectionsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
