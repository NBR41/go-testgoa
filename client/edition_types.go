// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": edition_types Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateEditionTypesPayload is the edition_types create action payload.
type CreateEditionTypesPayload struct {
	// Editor Name (Deluxe/Ultimate/Pocket)
	EditionTypeName string `form:"edition_type_name" json:"edition_type_name" yaml:"edition_type_name" xml:"edition_type_name"`
}

// CreateEditionTypesPath computes a request path to the create action of edition_types.
func CreateEditionTypesPath() string {

	return fmt.Sprintf("/edition_types")
}

// Create new edition type
func (c *Client) CreateEditionTypes(ctx context.Context, path string, payload *CreateEditionTypesPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateEditionTypesRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateEditionTypesRequest create the request corresponding to the create action endpoint of the edition_types resource.
func (c *Client) NewCreateEditionTypesRequest(ctx context.Context, path string, payload *CreateEditionTypesPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteEditionTypesPath computes a request path to the delete action of edition_types.
func DeleteEditionTypesPath(editionTypeID int) string {
	param0 := strconv.Itoa(editionTypeID)

	return fmt.Sprintf("/edition_types/%s", param0)
}

// delete edition type by id
func (c *Client) DeleteEditionTypes(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteEditionTypesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteEditionTypesRequest create the request corresponding to the delete action endpoint of the edition_types resource.
func (c *Client) NewDeleteEditionTypesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListEditionTypesPath computes a request path to the list action of edition_types.
func ListEditionTypesPath() string {

	return fmt.Sprintf("/edition_types")
}

// Get edition types
func (c *Client) ListEditionTypes(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListEditionTypesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListEditionTypesRequest create the request corresponding to the list action endpoint of the edition_types resource.
func (c *Client) NewListEditionTypesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowEditionTypesPath computes a request path to the show action of edition_types.
func ShowEditionTypesPath(editionTypeID int) string {
	param0 := strconv.Itoa(editionTypeID)

	return fmt.Sprintf("/edition_types/%s", param0)
}

// Get edition type by id
func (c *Client) ShowEditionTypes(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowEditionTypesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowEditionTypesRequest create the request corresponding to the show action endpoint of the edition_types resource.
func (c *Client) NewShowEditionTypesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateEditionTypesPayload is the edition_types update action payload.
type UpdateEditionTypesPayload struct {
	// Editor Name (Deluxe/Ultimate/Pocket)
	EditionTypeName string `form:"edition_type_name" json:"edition_type_name" yaml:"edition_type_name" xml:"edition_type_name"`
}

// UpdateEditionTypesPath computes a request path to the update action of edition_types.
func UpdateEditionTypesPath(editionTypeID int) string {
	param0 := strconv.Itoa(editionTypeID)

	return fmt.Sprintf("/edition_types/%s", param0)
}

// Update edition type by id
func (c *Client) UpdateEditionTypes(ctx context.Context, path string, payload *UpdateEditionTypesPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateEditionTypesRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateEditionTypesRequest create the request corresponding to the update action endpoint of the edition_types resource.
func (c *Client) NewUpdateEditionTypesRequest(ctx context.Context, path string, payload *UpdateEditionTypesPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
