// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": editors Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateEditorsPayload is the editors create action payload.
type CreateEditorsPayload struct {
	// Editor Name (Glénat/Delcourt)
	EditorName string `form:"editor_name" json:"editor_name" yaml:"editor_name" xml:"editor_name"`
}

// CreateEditorsPath computes a request path to the create action of editors.
func CreateEditorsPath() string {

	return fmt.Sprintf("/editors")
}

// Create new editor
func (c *Client) CreateEditors(ctx context.Context, path string, payload *CreateEditorsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateEditorsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateEditorsRequest create the request corresponding to the create action endpoint of the editors resource.
func (c *Client) NewCreateEditorsRequest(ctx context.Context, path string, payload *CreateEditorsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteEditorsPath computes a request path to the delete action of editors.
func DeleteEditorsPath(editorID int) string {
	param0 := strconv.Itoa(editorID)

	return fmt.Sprintf("/editors/%s", param0)
}

// delete editor by id
func (c *Client) DeleteEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteEditorsRequest create the request corresponding to the delete action endpoint of the editors resource.
func (c *Client) NewDeleteEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListEditorsPath computes a request path to the list action of editors.
func ListEditorsPath() string {

	return fmt.Sprintf("/editors")
}

// List editors
func (c *Client) ListEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListEditorsRequest create the request corresponding to the list action endpoint of the editors resource.
func (c *Client) NewListEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowEditorsPath computes a request path to the show action of editors.
func ShowEditorsPath(editorID int) string {
	param0 := strconv.Itoa(editorID)

	return fmt.Sprintf("/editors/%s", param0)
}

// Get editor by id
func (c *Client) ShowEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowEditorsRequest create the request corresponding to the show action endpoint of the editors resource.
func (c *Client) NewShowEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateEditorsPayload is the editors update action payload.
type UpdateEditorsPayload struct {
	// Editor Name (Glénat/Delcourt)
	EditorName string `form:"editor_name" json:"editor_name" yaml:"editor_name" xml:"editor_name"`
}

// UpdateEditorsPath computes a request path to the update action of editors.
func UpdateEditorsPath(editorID int) string {
	param0 := strconv.Itoa(editorID)

	return fmt.Sprintf("/editors/%s", param0)
}

// Update editor by id
func (c *Client) UpdateEditors(ctx context.Context, path string, payload *UpdateEditorsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateEditorsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateEditorsRequest create the request corresponding to the update action endpoint of the editors resource.
func (c *Client) NewUpdateEditorsRequest(ctx context.Context, path string, payload *UpdateEditorsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
