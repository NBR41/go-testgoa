// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"unicode/utf8"
)

// An Author (default view)
//
// Identifier: application/vnd.author+json; view=default
type Author struct {
	// Unique Author ID
	AuthorID int `form:"author_id" json:"author_id" yaml:"author_id" xml:"author_id"`
	// Author Name
	AuthorName string `form:"author_name" json:"author_name" yaml:"author_name" xml:"author_name"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the Author media type instance.
func (mt *Author) Validate() (err error) {

	if mt.AuthorName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "author_name"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.AuthorID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.author_id`, mt.AuthorID, 1, true))
	}
	if utf8.RuneCountInString(mt.AuthorName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.author_name`, mt.AuthorName, utf8.RuneCountInString(mt.AuthorName), 1, true))
	}
	if utf8.RuneCountInString(mt.AuthorName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.author_name`, mt.AuthorName, utf8.RuneCountInString(mt.AuthorName), 128, false))
	}
	return
}

// An Author (link view)
//
// Identifier: application/vnd.author+json; view=link
type AuthorLink struct {
	// Unique Author ID
	AuthorID int `form:"author_id" json:"author_id" yaml:"author_id" xml:"author_id"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the AuthorLink media type instance.
func (mt *AuthorLink) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.AuthorID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.author_id`, mt.AuthorID, 1, true))
	}
	return
}

// DecodeAuthor decodes the Author instance encoded in resp body.
func (c *Client) DecodeAuthor(resp *http.Response) (*Author, error) {
	var decoded Author
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeAuthorLink decodes the AuthorLink instance encoded in resp body.
func (c *Client) DecodeAuthorLink(resp *http.Response) (*AuthorLink, error) {
	var decoded AuthorLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AuthorCollection is the media type for an array of Author (default view)
//
// Identifier: application/vnd.author+json; type=collection; view=default
type AuthorCollection []*Author

// Validate validates the AuthorCollection media type instance.
func (mt AuthorCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// AuthorCollection is the media type for an array of Author (link view)
//
// Identifier: application/vnd.author+json; type=collection; view=link
type AuthorLinkCollection []*AuthorLink

// Validate validates the AuthorLinkCollection media type instance.
func (mt AuthorLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAuthorCollection decodes the AuthorCollection instance encoded in resp body.
func (c *Client) DecodeAuthorCollection(resp *http.Response) (AuthorCollection, error) {
	var decoded AuthorCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeAuthorLinkCollection decodes the AuthorLinkCollection instance encoded in resp body.
func (c *Client) DecodeAuthorLinkCollection(resp *http.Response) (AuthorLinkCollection, error) {
	var decoded AuthorLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// An Author authorship (default view)
//
// Identifier: application/vnd.authorship+json; view=default
type Authorship struct {
	// author struct
	Author *Author `form:"author,omitempty" json:"author,omitempty" yaml:"author,omitempty" xml:"author,omitempty"`
	// Unique Author ID
	AuthorID int `form:"author_id" json:"author_id" yaml:"author_id" xml:"author_id"`
	// Unique Authorship ID
	AuthorshipID int `form:"authorship_id" json:"authorship_id" yaml:"authorship_id" xml:"authorship_id"`
	// book struct
	Book *Book `form:"book,omitempty" json:"book,omitempty" yaml:"book,omitempty" xml:"book,omitempty"`
	// Unique Book ID
	BookID int `form:"book_id" json:"book_id" yaml:"book_id" xml:"book_id"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// role struct
	Role *Role `form:"role,omitempty" json:"role,omitempty" yaml:"role,omitempty" xml:"role,omitempty"`
	// Unique Role ID
	RoleID int `form:"role_id" json:"role_id" yaml:"role_id" xml:"role_id"`
}

// Validate validates the Authorship media type instance.
func (mt *Authorship) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Author != nil {
		if err2 := mt.Author.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.AuthorID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.author_id`, mt.AuthorID, 1, true))
	}
	if mt.AuthorshipID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.authorship_id`, mt.AuthorshipID, 1, true))
	}
	if mt.Book != nil {
		if err2 := mt.Book.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.BookID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.book_id`, mt.BookID, 1, true))
	}
	if mt.Role != nil {
		if err2 := mt.Role.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.RoleID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.role_id`, mt.RoleID, 1, true))
	}
	return
}

// DecodeAuthorship decodes the Authorship instance encoded in resp body.
func (c *Client) DecodeAuthorship(resp *http.Response) (*Authorship, error) {
	var decoded Authorship
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AuthorshipCollection is the media type for an array of Authorship (default view)
//
// Identifier: application/vnd.authorship+json; type=collection; view=default
type AuthorshipCollection []*Authorship

// Validate validates the AuthorshipCollection media type instance.
func (mt AuthorshipCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAuthorshipCollection decodes the AuthorshipCollection instance encoded in resp body.
func (c *Client) DecodeAuthorshipCollection(resp *http.Response) (AuthorshipCollection, error) {
	var decoded AuthorshipCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// An auth token (default view)
//
// Identifier: application/vnd.authtoken+json; view=default
type Authtoken struct {
	// Access Token
	AccessToken string `form:"access_token" json:"access_token" yaml:"access_token" xml:"access_token"`
	// Refresh Token
	RefreshToken string `form:"refresh_token" json:"refresh_token" yaml:"refresh_token" xml:"refresh_token"`
	// user struct
	User *User `form:"user" json:"user" yaml:"user" xml:"user"`
}

// Validate validates the Authtoken media type instance.
func (mt *Authtoken) Validate() (err error) {
	if mt.User == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "user"))
	}
	if mt.RefreshToken == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "refresh_token"))
	}
	if mt.AccessToken == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "access_token"))
	}
	if utf8.RuneCountInString(mt.AccessToken) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.access_token`, mt.AccessToken, utf8.RuneCountInString(mt.AccessToken), 1, true))
	}
	if utf8.RuneCountInString(mt.RefreshToken) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.refresh_token`, mt.RefreshToken, utf8.RuneCountInString(mt.RefreshToken), 1, true))
	}
	if mt.User != nil {
		if err2 := mt.User.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeAuthtoken decodes the Authtoken instance encoded in resp body.
func (c *Client) DecodeAuthtoken(resp *http.Response) (*Authtoken, error) {
	var decoded Authtoken
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A Book (default view)
//
// Identifier: application/vnd.book+json; view=default
type Book struct {
	// Unique Book ID
	BookID int `form:"book_id" json:"book_id" yaml:"book_id" xml:"book_id"`
	// Book ISBN
	BookIsbn string `form:"book_isbn" json:"book_isbn" yaml:"book_isbn" xml:"book_isbn"`
	// Book Name
	BookName string `form:"book_name" json:"book_name" yaml:"book_name" xml:"book_name"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// series struct
	Series *Series `form:"series,omitempty" json:"series,omitempty" yaml:"series,omitempty" xml:"series,omitempty"`
	// Unique Series ID
	SeriesID *int `form:"series_id,omitempty" json:"series_id,omitempty" yaml:"series_id,omitempty" xml:"series_id,omitempty"`
}

// Validate validates the Book media type instance.
func (mt *Book) Validate() (err error) {

	if mt.BookIsbn == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "book_isbn"))
	}
	if mt.BookName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "book_name"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.BookID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.book_id`, mt.BookID, 1, true))
	}
	if utf8.RuneCountInString(mt.BookIsbn) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.book_isbn`, mt.BookIsbn, utf8.RuneCountInString(mt.BookIsbn), 1, true))
	}
	if utf8.RuneCountInString(mt.BookIsbn) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.book_isbn`, mt.BookIsbn, utf8.RuneCountInString(mt.BookIsbn), 128, false))
	}
	if utf8.RuneCountInString(mt.BookName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.book_name`, mt.BookName, utf8.RuneCountInString(mt.BookName), 1, true))
	}
	if utf8.RuneCountInString(mt.BookName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.book_name`, mt.BookName, utf8.RuneCountInString(mt.BookName), 128, false))
	}
	if mt.Series != nil {
		if err2 := mt.Series.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.SeriesID != nil {
		if *mt.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.series_id`, *mt.SeriesID, 1, true))
		}
	}
	return
}

// A Book (link view)
//
// Identifier: application/vnd.book+json; view=link
type BookLink struct {
	// Unique Book ID
	BookID int `form:"book_id" json:"book_id" yaml:"book_id" xml:"book_id"`
	// Book ISBN
	BookIsbn string `form:"book_isbn" json:"book_isbn" yaml:"book_isbn" xml:"book_isbn"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// Unique Series ID
	SeriesID *int `form:"series_id,omitempty" json:"series_id,omitempty" yaml:"series_id,omitempty" xml:"series_id,omitempty"`
}

// Validate validates the BookLink media type instance.
func (mt *BookLink) Validate() (err error) {

	if mt.BookIsbn == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "book_isbn"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.BookID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.book_id`, mt.BookID, 1, true))
	}
	if utf8.RuneCountInString(mt.BookIsbn) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.book_isbn`, mt.BookIsbn, utf8.RuneCountInString(mt.BookIsbn), 1, true))
	}
	if utf8.RuneCountInString(mt.BookIsbn) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.book_isbn`, mt.BookIsbn, utf8.RuneCountInString(mt.BookIsbn), 128, false))
	}
	if mt.SeriesID != nil {
		if *mt.SeriesID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.series_id`, *mt.SeriesID, 1, true))
		}
	}
	return
}

// DecodeBook decodes the Book instance encoded in resp body.
func (c *Client) DecodeBook(resp *http.Response) (*Book, error) {
	var decoded Book
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeBookLink decodes the BookLink instance encoded in resp body.
func (c *Client) DecodeBookLink(resp *http.Response) (*BookLink, error) {
	var decoded BookLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// BookCollection is the media type for an array of Book (default view)
//
// Identifier: application/vnd.book+json; type=collection; view=default
type BookCollection []*Book

// Validate validates the BookCollection media type instance.
func (mt BookCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// BookCollection is the media type for an array of Book (link view)
//
// Identifier: application/vnd.book+json; type=collection; view=link
type BookLinkCollection []*BookLink

// Validate validates the BookLinkCollection media type instance.
func (mt BookLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeBookCollection decodes the BookCollection instance encoded in resp body.
func (c *Client) DecodeBookCollection(resp *http.Response) (BookCollection, error) {
	var decoded BookCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeBookLinkCollection decodes the BookLinkCollection instance encoded in resp body.
func (c *Client) DecodeBookLinkCollection(resp *http.Response) (BookLinkCollection, error) {
	var decoded BookLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A Book Detail (default view)
//
// Identifier: application/vnd.book_detail+json; view=default
type BookDetail struct {
	// authors struct
	Authors AuthorshipCollection `form:"authors" json:"authors" yaml:"authors" xml:"authors"`
	// book struct
	Book *Book `form:"book" json:"book" yaml:"book" xml:"book"`
	// classification struct
	Classes ClassificationCollection `form:"classes" json:"classes" yaml:"classes" xml:"classes"`
	// edition struct
	Edition *Edition `form:"edition" json:"edition" yaml:"edition" xml:"edition"`
}

// Validate validates the BookDetail media type instance.
func (mt *BookDetail) Validate() (err error) {
	if mt.Book == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "book"))
	}
	if mt.Edition == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "edition"))
	}
	if mt.Authors == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "authors"))
	}
	if mt.Classes == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "classes"))
	}
	if err2 := mt.Authors.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	if mt.Book != nil {
		if err2 := mt.Book.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if err2 := mt.Classes.Validate(); err2 != nil {
		err = goa.MergeErrors(err, err2)
	}
	if mt.Edition != nil {
		if err2 := mt.Edition.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeBookDetail decodes the BookDetail instance encoded in resp body.
func (c *Client) DecodeBookDetail(resp *http.Response) (*BookDetail, error) {
	var decoded BookDetail
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A Category (default view)
//
// Identifier: application/vnd.category+json; view=default
type Category struct {
	// Unique Category ID
	CategoryID int `form:"category_id" json:"category_id" yaml:"category_id" xml:"category_id"`
	// Category Name (Shonen/Shojo/Seinen)
	CategoryName string `form:"category_name" json:"category_name" yaml:"category_name" xml:"category_name"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the Category media type instance.
func (mt *Category) Validate() (err error) {

	if mt.CategoryName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "category_name"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.CategoryID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.category_id`, mt.CategoryID, 1, true))
	}
	if utf8.RuneCountInString(mt.CategoryName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.category_name`, mt.CategoryName, utf8.RuneCountInString(mt.CategoryName), 1, true))
	}
	if utf8.RuneCountInString(mt.CategoryName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.category_name`, mt.CategoryName, utf8.RuneCountInString(mt.CategoryName), 128, false))
	}
	return
}

// A Category (link view)
//
// Identifier: application/vnd.category+json; view=link
type CategoryLink struct {
	// Unique Category ID
	CategoryID int `form:"category_id" json:"category_id" yaml:"category_id" xml:"category_id"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the CategoryLink media type instance.
func (mt *CategoryLink) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.CategoryID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.category_id`, mt.CategoryID, 1, true))
	}
	return
}

// DecodeCategory decodes the Category instance encoded in resp body.
func (c *Client) DecodeCategory(resp *http.Response) (*Category, error) {
	var decoded Category
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeCategoryLink decodes the CategoryLink instance encoded in resp body.
func (c *Client) DecodeCategoryLink(resp *http.Response) (*CategoryLink, error) {
	var decoded CategoryLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// CategoryCollection is the media type for an array of Category (default view)
//
// Identifier: application/vnd.category+json; type=collection; view=default
type CategoryCollection []*Category

// Validate validates the CategoryCollection media type instance.
func (mt CategoryCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// CategoryCollection is the media type for an array of Category (link view)
//
// Identifier: application/vnd.category+json; type=collection; view=link
type CategoryLinkCollection []*CategoryLink

// Validate validates the CategoryLinkCollection media type instance.
func (mt CategoryLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCategoryCollection decodes the CategoryCollection instance encoded in resp body.
func (c *Client) DecodeCategoryCollection(resp *http.Response) (CategoryCollection, error) {
	var decoded CategoryCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeCategoryLinkCollection decodes the CategoryLinkCollection instance encoded in resp body.
func (c *Client) DecodeCategoryLinkCollection(resp *http.Response) (CategoryLinkCollection, error) {
	var decoded CategoryLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A Class (default view)
//
// Identifier: application/vnd.class+json; view=default
type Class struct {
	// Unique Class ID
	ClassID int `form:"class_id" json:"class_id" yaml:"class_id" xml:"class_id"`
	// Class Name (Thriller/Romance/...)
	ClassName string `form:"class_name" json:"class_name" yaml:"class_name" xml:"class_name"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the Class media type instance.
func (mt *Class) Validate() (err error) {

	if mt.ClassName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "class_name"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.ClassID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.class_id`, mt.ClassID, 1, true))
	}
	if utf8.RuneCountInString(mt.ClassName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.class_name`, mt.ClassName, utf8.RuneCountInString(mt.ClassName), 1, true))
	}
	if utf8.RuneCountInString(mt.ClassName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.class_name`, mt.ClassName, utf8.RuneCountInString(mt.ClassName), 128, false))
	}
	return
}

// A Class (link view)
//
// Identifier: application/vnd.class+json; view=link
type ClassLink struct {
	// Unique Class ID
	ClassID int `form:"class_id" json:"class_id" yaml:"class_id" xml:"class_id"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the ClassLink media type instance.
func (mt *ClassLink) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.ClassID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.class_id`, mt.ClassID, 1, true))
	}
	return
}

// DecodeClass decodes the Class instance encoded in resp body.
func (c *Client) DecodeClass(resp *http.Response) (*Class, error) {
	var decoded Class
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeClassLink decodes the ClassLink instance encoded in resp body.
func (c *Client) DecodeClassLink(resp *http.Response) (*ClassLink, error) {
	var decoded ClassLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// ClassCollection is the media type for an array of Class (default view)
//
// Identifier: application/vnd.class+json; type=collection; view=default
type ClassCollection []*Class

// Validate validates the ClassCollection media type instance.
func (mt ClassCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ClassCollection is the media type for an array of Class (link view)
//
// Identifier: application/vnd.class+json; type=collection; view=link
type ClassLinkCollection []*ClassLink

// Validate validates the ClassLinkCollection media type instance.
func (mt ClassLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeClassCollection decodes the ClassCollection instance encoded in resp body.
func (c *Client) DecodeClassCollection(resp *http.Response) (ClassCollection, error) {
	var decoded ClassCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeClassLinkCollection decodes the ClassLinkCollection instance encoded in resp body.
func (c *Client) DecodeClassLinkCollection(resp *http.Response) (ClassLinkCollection, error) {
	var decoded ClassLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A series classification (default view)
//
// Identifier: application/vnd.classification+json; view=default
type Classification struct {
	// class struct
	Class *Class `form:"class" json:"class" yaml:"class" xml:"class"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the Classification media type instance.
func (mt *Classification) Validate() (err error) {
	if mt.Class == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "class"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Class != nil {
		if err2 := mt.Class.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeClassification decodes the Classification instance encoded in resp body.
func (c *Client) DecodeClassification(resp *http.Response) (*Classification, error) {
	var decoded Classification
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// ClassificationCollection is the media type for an array of Classification (default view)
//
// Identifier: application/vnd.classification+json; type=collection; view=default
type ClassificationCollection []*Classification

// Validate validates the ClassificationCollection media type instance.
func (mt ClassificationCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeClassificationCollection decodes the ClassificationCollection instance encoded in resp body.
func (c *Client) DecodeClassificationCollection(resp *http.Response) (ClassificationCollection, error) {
	var decoded ClassificationCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A Collection (default view)
//
// Identifier: application/vnd.collection+json; view=default
type Collection struct {
	// Unique Collection ID
	CollectionID int `form:"collection_id" json:"collection_id" yaml:"collection_id" xml:"collection_id"`
	// Collection Name (Découverte/Shonen)
	CollectionName string `form:"collection_name" json:"collection_name" yaml:"collection_name" xml:"collection_name"`
	// editor struct
	Editor *Editor `form:"editor,omitempty" json:"editor,omitempty" yaml:"editor,omitempty" xml:"editor,omitempty"`
	// Unique Editor ID
	EditorID int `form:"editor_id" json:"editor_id" yaml:"editor_id" xml:"editor_id"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the Collection media type instance.
func (mt *Collection) Validate() (err error) {

	if mt.CollectionName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "collection_name"))
	}

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.CollectionID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.collection_id`, mt.CollectionID, 1, true))
	}
	if utf8.RuneCountInString(mt.CollectionName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.collection_name`, mt.CollectionName, utf8.RuneCountInString(mt.CollectionName), 1, true))
	}
	if utf8.RuneCountInString(mt.CollectionName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.collection_name`, mt.CollectionName, utf8.RuneCountInString(mt.CollectionName), 128, false))
	}
	if mt.Editor != nil {
		if err2 := mt.Editor.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.EditorID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.editor_id`, mt.EditorID, 1, true))
	}
	return
}

// A Collection (link view)
//
// Identifier: application/vnd.collection+json; view=link
type CollectionLink struct {
	// Unique Collection ID
	CollectionID int `form:"collection_id" json:"collection_id" yaml:"collection_id" xml:"collection_id"`
	// Unique Editor ID
	EditorID int `form:"editor_id" json:"editor_id" yaml:"editor_id" xml:"editor_id"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the CollectionLink media type instance.
func (mt *CollectionLink) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.CollectionID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.collection_id`, mt.CollectionID, 1, true))
	}
	if mt.EditorID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.editor_id`, mt.EditorID, 1, true))
	}
	return
}

// DecodeCollection decodes the Collection instance encoded in resp body.
func (c *Client) DecodeCollection(resp *http.Response) (*Collection, error) {
	var decoded Collection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeCollectionLink decodes the CollectionLink instance encoded in resp body.
func (c *Client) DecodeCollectionLink(resp *http.Response) (*CollectionLink, error) {
	var decoded CollectionLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// CollectionCollection is the media type for an array of Collection (default view)
//
// Identifier: application/vnd.collection+json; type=collection; view=default
type CollectionCollection []*Collection

// Validate validates the CollectionCollection media type instance.
func (mt CollectionCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// CollectionCollection is the media type for an array of Collection (link view)
//
// Identifier: application/vnd.collection+json; type=collection; view=link
type CollectionLinkCollection []*CollectionLink

// Validate validates the CollectionLinkCollection media type instance.
func (mt CollectionLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCollectionCollection decodes the CollectionCollection instance encoded in resp body.
func (c *Client) DecodeCollectionCollection(resp *http.Response) (CollectionCollection, error) {
	var decoded CollectionCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeCollectionLinkCollection decodes the CollectionLinkCollection instance encoded in resp body.
func (c *Client) DecodeCollectionLinkCollection(resp *http.Response) (CollectionLinkCollection, error) {
	var decoded CollectionLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// An edition (default view)
//
// Identifier: application/vnd.edition+json; view=default
type Edition struct {
	// book struct
	Book *Book `form:"book,omitempty" json:"book,omitempty" yaml:"book,omitempty" xml:"book,omitempty"`
	// Unique Book ID
	BookID int `form:"book_id" json:"book_id" yaml:"book_id" xml:"book_id"`
	// collection struct
	Collection *Collection `form:"collection,omitempty" json:"collection,omitempty" yaml:"collection,omitempty" xml:"collection,omitempty"`
	// Unique Collection ID
	CollectionID int `form:"collection_id" json:"collection_id" yaml:"collection_id" xml:"collection_id"`
	// Unique Edition ID
	EditionID int `form:"edition_id" json:"edition_id" yaml:"edition_id" xml:"edition_id"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// print struct
	Print *Print `form:"print,omitempty" json:"print,omitempty" yaml:"print,omitempty" xml:"print,omitempty"`
	// Unique Print ID
	PrintID int `form:"print_id" json:"print_id" yaml:"print_id" xml:"print_id"`
}

// Validate validates the Edition media type instance.
func (mt *Edition) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Book != nil {
		if err2 := mt.Book.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.BookID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.book_id`, mt.BookID, 1, true))
	}
	if mt.Collection != nil {
		if err2 := mt.Collection.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.CollectionID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.collection_id`, mt.CollectionID, 1, true))
	}
	if mt.EditionID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.edition_id`, mt.EditionID, 1, true))
	}
	if mt.Print != nil {
		if err2 := mt.Print.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.PrintID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.print_id`, mt.PrintID, 1, true))
	}
	return
}

// DecodeEdition decodes the Edition instance encoded in resp body.
func (c *Client) DecodeEdition(resp *http.Response) (*Edition, error) {
	var decoded Edition
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// EditionCollection is the media type for an array of Edition (default view)
//
// Identifier: application/vnd.edition+json; type=collection; view=default
type EditionCollection []*Edition

// Validate validates the EditionCollection media type instance.
func (mt EditionCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeEditionCollection decodes the EditionCollection instance encoded in resp body.
func (c *Client) DecodeEditionCollection(resp *http.Response) (EditionCollection, error) {
	var decoded EditionCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// An Editor (default view)
//
// Identifier: application/vnd.editor+json; view=default
type Editor struct {
	// Unique Editor ID
	EditorID int `form:"editor_id" json:"editor_id" yaml:"editor_id" xml:"editor_id"`
	// Editor Name (Glénat/Delcourt)
	EditorName string `form:"editor_name" json:"editor_name" yaml:"editor_name" xml:"editor_name"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the Editor media type instance.
func (mt *Editor) Validate() (err error) {

	if mt.EditorName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "editor_name"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.EditorID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.editor_id`, mt.EditorID, 1, true))
	}
	if utf8.RuneCountInString(mt.EditorName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.editor_name`, mt.EditorName, utf8.RuneCountInString(mt.EditorName), 1, true))
	}
	if utf8.RuneCountInString(mt.EditorName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.editor_name`, mt.EditorName, utf8.RuneCountInString(mt.EditorName), 128, false))
	}
	return
}

// An Editor (link view)
//
// Identifier: application/vnd.editor+json; view=link
type EditorLink struct {
	// Unique Editor ID
	EditorID int `form:"editor_id" json:"editor_id" yaml:"editor_id" xml:"editor_id"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
}

// Validate validates the EditorLink media type instance.
func (mt *EditorLink) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.EditorID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.editor_id`, mt.EditorID, 1, true))
	}
	return
}

// DecodeEditor decodes the Editor instance encoded in resp body.
func (c *Client) DecodeEditor(resp *http.Response) (*Editor, error) {
	var decoded Editor
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeEditorLink decodes the EditorLink instance encoded in resp body.
func (c *Client) DecodeEditorLink(resp *http.Response) (*EditorLink, error) {
	var decoded EditorLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// EditorCollection is the media type for an array of Editor (default view)
//
// Identifier: application/vnd.editor+json; type=collection; view=default
type EditorCollection []*Editor

// Validate validates the EditorCollection media type instance.
func (mt EditorCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// EditorCollection is the media type for an array of Editor (link view)
//
// Identifier: application/vnd.editor+json; type=collection; view=link
type EditorLinkCollection []*EditorLink

// Validate validates the EditorLinkCollection media type instance.
func (mt EditorLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeEditorCollection decodes the EditorCollection instance encoded in resp body.
func (c *Client) DecodeEditorCollection(resp *http.Response) (EditorCollection, error) {
	var decoded EditorCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeEditorLinkCollection decodes the EditorLinkCollection instance encoded in resp body.
func (c *Client) DecodeEditorLinkCollection(resp *http.Response) (EditorLinkCollection, error) {
	var decoded EditorLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A User ownership (default view)
//
// Identifier: application/vnd.ownership+json; view=default
type Ownership struct {
	// book struct
	Book *Book `form:"book,omitempty" json:"book,omitempty" yaml:"book,omitempty" xml:"book,omitempty"`
	// Unique Book ID
	BookID int `form:"book_id" json:"book_id" yaml:"book_id" xml:"book_id"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// Unique User ID
	UserID int `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// Validate validates the Ownership media type instance.
func (mt *Ownership) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Book != nil {
		if err2 := mt.Book.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.BookID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.book_id`, mt.BookID, 1, true))
	}
	if mt.UserID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.user_id`, mt.UserID, 1, true))
	}
	return
}

// DecodeOwnership decodes the Ownership instance encoded in resp body.
func (c *Client) DecodeOwnership(resp *http.Response) (*Ownership, error) {
	var decoded Ownership
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// OwnershipCollection is the media type for an array of Ownership (default view)
//
// Identifier: application/vnd.ownership+json; type=collection; view=default
type OwnershipCollection []*Ownership

// Validate validates the OwnershipCollection media type instance.
func (mt OwnershipCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeOwnershipCollection decodes the OwnershipCollection instance encoded in resp body.
func (c *Client) DecodeOwnershipCollection(resp *http.Response) (OwnershipCollection, error) {
	var decoded OwnershipCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A Print (default view)
//
// Identifier: application/vnd.print+json; view=default
type Print struct {
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// Unique Print ID
	PrintID int `form:"print_id" json:"print_id" yaml:"print_id" xml:"print_id"`
	// Print Name (Deluxe/Ultimate/Pocket)
	PrintName string `form:"print_name" json:"print_name" yaml:"print_name" xml:"print_name"`
}

// Validate validates the Print media type instance.
func (mt *Print) Validate() (err error) {

	if mt.PrintName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "print_name"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.PrintID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.print_id`, mt.PrintID, 1, true))
	}
	if utf8.RuneCountInString(mt.PrintName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.print_name`, mt.PrintName, utf8.RuneCountInString(mt.PrintName), 1, true))
	}
	if utf8.RuneCountInString(mt.PrintName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.print_name`, mt.PrintName, utf8.RuneCountInString(mt.PrintName), 128, false))
	}
	return
}

// A Print (link view)
//
// Identifier: application/vnd.print+json; view=link
type PrintLink struct {
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// Unique Print ID
	PrintID int `form:"print_id" json:"print_id" yaml:"print_id" xml:"print_id"`
}

// Validate validates the PrintLink media type instance.
func (mt *PrintLink) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.PrintID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.print_id`, mt.PrintID, 1, true))
	}
	return
}

// DecodePrint decodes the Print instance encoded in resp body.
func (c *Client) DecodePrint(resp *http.Response) (*Print, error) {
	var decoded Print
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodePrintLink decodes the PrintLink instance encoded in resp body.
func (c *Client) DecodePrintLink(resp *http.Response) (*PrintLink, error) {
	var decoded PrintLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// PrintCollection is the media type for an array of Print (default view)
//
// Identifier: application/vnd.print+json; type=collection; view=default
type PrintCollection []*Print

// Validate validates the PrintCollection media type instance.
func (mt PrintCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// PrintCollection is the media type for an array of Print (link view)
//
// Identifier: application/vnd.print+json; type=collection; view=link
type PrintLinkCollection []*PrintLink

// Validate validates the PrintLinkCollection media type instance.
func (mt PrintLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodePrintCollection decodes the PrintCollection instance encoded in resp body.
func (c *Client) DecodePrintCollection(resp *http.Response) (PrintCollection, error) {
	var decoded PrintCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodePrintLinkCollection decodes the PrintLinkCollection instance encoded in resp body.
func (c *Client) DecodePrintLinkCollection(resp *http.Response) (PrintLinkCollection, error) {
	var decoded PrintLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A Role (default view)
//
// Identifier: application/vnd.role+json; view=default
type Role struct {
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// Unique Role ID
	RoleID int `form:"role_id" json:"role_id" yaml:"role_id" xml:"role_id"`
	// Role Name (Author/Scenarist/Cartoonist)
	RoleName string `form:"role_name" json:"role_name" yaml:"role_name" xml:"role_name"`
}

// Validate validates the Role media type instance.
func (mt *Role) Validate() (err error) {

	if mt.RoleName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "role_name"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.RoleID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.role_id`, mt.RoleID, 1, true))
	}
	if utf8.RuneCountInString(mt.RoleName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.role_name`, mt.RoleName, utf8.RuneCountInString(mt.RoleName), 1, true))
	}
	if utf8.RuneCountInString(mt.RoleName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.role_name`, mt.RoleName, utf8.RuneCountInString(mt.RoleName), 128, false))
	}
	return
}

// A Role (link view)
//
// Identifier: application/vnd.role+json; view=link
type RoleLink struct {
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// Unique Role ID
	RoleID int `form:"role_id" json:"role_id" yaml:"role_id" xml:"role_id"`
}

// Validate validates the RoleLink media type instance.
func (mt *RoleLink) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.RoleID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.role_id`, mt.RoleID, 1, true))
	}
	return
}

// DecodeRole decodes the Role instance encoded in resp body.
func (c *Client) DecodeRole(resp *http.Response) (*Role, error) {
	var decoded Role
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeRoleLink decodes the RoleLink instance encoded in resp body.
func (c *Client) DecodeRoleLink(resp *http.Response) (*RoleLink, error) {
	var decoded RoleLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// RoleCollection is the media type for an array of Role (default view)
//
// Identifier: application/vnd.role+json; type=collection; view=default
type RoleCollection []*Role

// Validate validates the RoleCollection media type instance.
func (mt RoleCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// RoleCollection is the media type for an array of Role (link view)
//
// Identifier: application/vnd.role+json; type=collection; view=link
type RoleLinkCollection []*RoleLink

// Validate validates the RoleLinkCollection media type instance.
func (mt RoleLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeRoleCollection decodes the RoleCollection instance encoded in resp body.
func (c *Client) DecodeRoleCollection(resp *http.Response) (RoleCollection, error) {
	var decoded RoleCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeRoleLinkCollection decodes the RoleLinkCollection instance encoded in resp body.
func (c *Client) DecodeRoleLinkCollection(resp *http.Response) (RoleLinkCollection, error) {
	var decoded RoleLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A Serie (default view)
//
// Identifier: application/vnd.series+json; view=default
type Series struct {
	// category struct
	Category *Category `form:"category,omitempty" json:"category,omitempty" yaml:"category,omitempty" xml:"category,omitempty"`
	// Unique Category ID
	CategoryID int `form:"category_id" json:"category_id" yaml:"category_id" xml:"category_id"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// Unique Series ID
	SeriesID int `form:"series_id" json:"series_id" yaml:"series_id" xml:"series_id"`
	// Series Name (Akira/Dragon ball)
	SeriesName string `form:"series_name" json:"series_name" yaml:"series_name" xml:"series_name"`
}

// Validate validates the Series media type instance.
func (mt *Series) Validate() (err error) {

	if mt.SeriesName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "series_name"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.Category != nil {
		if err2 := mt.Category.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.CategoryID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.category_id`, mt.CategoryID, 1, true))
	}
	if mt.SeriesID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.series_id`, mt.SeriesID, 1, true))
	}
	if utf8.RuneCountInString(mt.SeriesName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.series_name`, mt.SeriesName, utf8.RuneCountInString(mt.SeriesName), 1, true))
	}
	if utf8.RuneCountInString(mt.SeriesName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.series_name`, mt.SeriesName, utf8.RuneCountInString(mt.SeriesName), 128, false))
	}
	return
}

// A Serie (link view)
//
// Identifier: application/vnd.series+json; view=link
type SeriesLink struct {
	// Unique Category ID
	CategoryID int `form:"category_id" json:"category_id" yaml:"category_id" xml:"category_id"`
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// Unique Series ID
	SeriesID int `form:"series_id" json:"series_id" yaml:"series_id" xml:"series_id"`
	// Series Name (Akira/Dragon ball)
	SeriesName string `form:"series_name" json:"series_name" yaml:"series_name" xml:"series_name"`
}

// Validate validates the SeriesLink media type instance.
func (mt *SeriesLink) Validate() (err error) {

	if mt.SeriesName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "series_name"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if mt.CategoryID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.category_id`, mt.CategoryID, 1, true))
	}
	if mt.SeriesID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.series_id`, mt.SeriesID, 1, true))
	}
	if utf8.RuneCountInString(mt.SeriesName) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.series_name`, mt.SeriesName, utf8.RuneCountInString(mt.SeriesName), 1, true))
	}
	if utf8.RuneCountInString(mt.SeriesName) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.series_name`, mt.SeriesName, utf8.RuneCountInString(mt.SeriesName), 128, false))
	}
	return
}

// DecodeSeries decodes the Series instance encoded in resp body.
func (c *Client) DecodeSeries(resp *http.Response) (*Series, error) {
	var decoded Series
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeSeriesLink decodes the SeriesLink instance encoded in resp body.
func (c *Client) DecodeSeriesLink(resp *http.Response) (*SeriesLink, error) {
	var decoded SeriesLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// SeriesCollection is the media type for an array of Series (default view)
//
// Identifier: application/vnd.series+json; type=collection; view=default
type SeriesCollection []*Series

// Validate validates the SeriesCollection media type instance.
func (mt SeriesCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// SeriesCollection is the media type for an array of Series (link view)
//
// Identifier: application/vnd.series+json; type=collection; view=link
type SeriesLinkCollection []*SeriesLink

// Validate validates the SeriesLinkCollection media type instance.
func (mt SeriesLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeSeriesCollection decodes the SeriesCollection instance encoded in resp body.
func (c *Client) DecodeSeriesCollection(resp *http.Response) (SeriesCollection, error) {
	var decoded SeriesCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeSeriesLinkCollection decodes the SeriesLinkCollection instance encoded in resp body.
func (c *Client) DecodeSeriesLinkCollection(resp *http.Response) (SeriesLinkCollection, error) {
	var decoded SeriesLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A token (default view)
//
// Identifier: application/vnd.token+json; view=default
type Token struct {
	// token
	Token string `form:"token" json:"token" yaml:"token" xml:"token"`
}

// Validate validates the Token media type instance.
func (mt *Token) Validate() (err error) {
	if mt.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "token"))
	}
	if utf8.RuneCountInString(mt.Token) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.token`, mt.Token, utf8.RuneCountInString(mt.Token), 1, true))
	}
	return
}

// DecodeToken decodes the Token instance encoded in resp body.
func (c *Client) DecodeToken(resp *http.Response) (*Token, error) {
	var decoded Token
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A User (default view)
//
// Identifier: application/vnd.user+json; view=default
type User struct {
	// user email
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// API href for making requests
	Href        string `form:"href" json:"href" yaml:"href" xml:"href"`
	IsAdmin     bool   `form:"is_admin" json:"is_admin" yaml:"is_admin" xml:"is_admin"`
	IsValidated bool   `form:"is_validated" json:"is_validated" yaml:"is_validated" xml:"is_validated"`
	// user nickname
	Nickname string `form:"nickname" json:"nickname" yaml:"nickname" xml:"nickname"`
	// Unique User ID
	UserID int `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {

	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	if mt.Nickname == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "nickname"))
	}

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, mt.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`response.email`, mt.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(mt.Nickname) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.nickname`, mt.Nickname, utf8.RuneCountInString(mt.Nickname), 1, true))
	}
	if utf8.RuneCountInString(mt.Nickname) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.nickname`, mt.Nickname, utf8.RuneCountInString(mt.Nickname), 32, false))
	}
	if mt.UserID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.user_id`, mt.UserID, 1, true))
	}
	return
}

// A User (tiny view)
//
// Identifier: application/vnd.user+json; view=tiny
type UserTiny struct {
	// API href for making requests
	Href string `form:"href" json:"href" yaml:"href" xml:"href"`
	// user nickname
	Nickname string `form:"nickname" json:"nickname" yaml:"nickname" xml:"nickname"`
	// Unique User ID
	UserID int `form:"user_id" json:"user_id" yaml:"user_id" xml:"user_id"`
}

// Validate validates the UserTiny media type instance.
func (mt *UserTiny) Validate() (err error) {

	if mt.Nickname == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "nickname"))
	}
	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}
	if utf8.RuneCountInString(mt.Nickname) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.nickname`, mt.Nickname, utf8.RuneCountInString(mt.Nickname), 1, true))
	}
	if utf8.RuneCountInString(mt.Nickname) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.nickname`, mt.Nickname, utf8.RuneCountInString(mt.Nickname), 32, false))
	}
	if mt.UserID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`response.user_id`, mt.UserID, 1, true))
	}
	return
}

// DecodeUser decodes the User instance encoded in resp body.
func (c *Client) DecodeUser(resp *http.Response) (*User, error) {
	var decoded User
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeUserTiny decodes the UserTiny instance encoded in resp body.
func (c *Client) DecodeUserTiny(resp *http.Response) (*UserTiny, error) {
	var decoded UserTiny
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// UserCollection is the media type for an array of User (default view)
//
// Identifier: application/vnd.user+json; type=collection; view=default
type UserCollection []*User

// Validate validates the UserCollection media type instance.
func (mt UserCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// UserCollection is the media type for an array of User (tiny view)
//
// Identifier: application/vnd.user+json; type=collection; view=tiny
type UserTinyCollection []*UserTiny

// Validate validates the UserTinyCollection media type instance.
func (mt UserTinyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUserCollection decodes the UserCollection instance encoded in resp body.
func (c *Client) DecodeUserCollection(resp *http.Response) (UserCollection, error) {
	var decoded UserCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeUserTinyCollection decodes the UserTinyCollection instance encoded in resp body.
func (c *Client) DecodeUserTinyCollection(resp *http.Response) (UserTinyCollection, error) {
	var decoded UserTinyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}
