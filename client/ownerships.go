// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": ownerships Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddOwnershipsPayload is the ownerships add action payload.
type AddOwnershipsPayload struct {
	// Book ISBN
	BookIsbn string `form:"book_isbn" json:"book_isbn" yaml:"book_isbn" xml:"book_isbn"`
}

// AddOwnershipsPath computes a request path to the add action of ownerships.
func AddOwnershipsPath(userID int) string {
	param0 := strconv.Itoa(userID)

	return fmt.Sprintf("/users/%s/ownerships/isbn", param0)
}

// Create new book and ownership by isbn
func (c *Client) AddOwnerships(ctx context.Context, path string, payload *AddOwnershipsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewAddOwnershipsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddOwnershipsRequest create the request corresponding to the add action endpoint of the ownerships resource.
func (c *Client) NewAddOwnershipsRequest(ctx context.Context, path string, payload *AddOwnershipsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// CreateOwnershipsPayload is the ownerships create action payload.
type CreateOwnershipsPayload struct {
	// Unique Book ID
	BookID int `form:"book_id" json:"book_id" yaml:"book_id" xml:"book_id"`
}

// CreateOwnershipsPath computes a request path to the create action of ownerships.
func CreateOwnershipsPath(userID int) string {
	param0 := strconv.Itoa(userID)

	return fmt.Sprintf("/users/%s/ownerships", param0)
}

// Create new user ownership
func (c *Client) CreateOwnerships(ctx context.Context, path string, payload *CreateOwnershipsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateOwnershipsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateOwnershipsRequest create the request corresponding to the create action endpoint of the ownerships resource.
func (c *Client) NewCreateOwnershipsRequest(ctx context.Context, path string, payload *CreateOwnershipsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteOwnershipsPath computes a request path to the delete action of ownerships.
func DeleteOwnershipsPath(userID int, bookID int) string {
	param0 := strconv.Itoa(userID)
	param1 := strconv.Itoa(bookID)

	return fmt.Sprintf("/users/%s/ownerships/%s", param0, param1)
}

// delete ownerships by ids
func (c *Client) DeleteOwnerships(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteOwnershipsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteOwnershipsRequest create the request corresponding to the delete action endpoint of the ownerships resource.
func (c *Client) NewDeleteOwnershipsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListOwnershipsPath computes a request path to the list action of ownerships.
func ListOwnershipsPath(userID int) string {
	param0 := strconv.Itoa(userID)

	return fmt.Sprintf("/users/%s/ownerships", param0)
}

// List user ownerships
func (c *Client) ListOwnerships(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListOwnershipsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListOwnershipsRequest create the request corresponding to the list action endpoint of the ownerships resource.
func (c *Client) NewListOwnershipsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ShowOwnershipsPath computes a request path to the show action of ownerships.
func ShowOwnershipsPath(userID int, bookID int) string {
	param0 := strconv.Itoa(userID)
	param1 := strconv.Itoa(bookID)

	return fmt.Sprintf("/users/%s/ownerships/%s", param0, param1)
}

// Get user ownerships by ids
func (c *Client) ShowOwnerships(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowOwnershipsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowOwnershipsRequest create the request corresponding to the show action endpoint of the ownerships resource.
func (c *Client) NewShowOwnershipsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
