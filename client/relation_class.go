// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": relationClass Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListCategoriesRelationClassPath computes a request path to the listCategories action of relationClass.
func ListCategoriesRelationClassPath(classID int) string {
	param0 := strconv.Itoa(classID)

	return fmt.Sprintf("/classes/%s/categories", param0)
}

// List categories by class
func (c *Client) ListCategoriesRelationClass(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCategoriesRelationClassRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCategoriesRelationClassRequest create the request corresponding to the listCategories action endpoint of the relationClass resource.
func (c *Client) NewListCategoriesRelationClassRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListSeriesRelationClassPath computes a request path to the listSeries action of relationClass.
func ListSeriesRelationClassPath(classID int) string {
	param0 := strconv.Itoa(classID)

	return fmt.Sprintf("/classes/%s/series", param0)
}

// List series by class
func (c *Client) ListSeriesRelationClass(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSeriesRelationClassRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSeriesRelationClassRequest create the request corresponding to the listSeries action endpoint of the relationClass resource.
func (c *Client) NewListSeriesRelationClassRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListSeriesByCategoryRelationClassPath computes a request path to the listSeriesByCategory action of relationClass.
func ListSeriesByCategoryRelationClassPath(classID int, categoryID string) string {
	param0 := strconv.Itoa(classID)
	param1 := categoryID

	return fmt.Sprintf("/classes/%s/categories/%s/series", param0, param1)
}

// List series by class and category
func (c *Client) ListSeriesByCategoryRelationClass(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSeriesByCategoryRelationClassRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSeriesByCategoryRelationClassRequest create the request corresponding to the listSeriesByCategory action endpoint of the relationClass resource.
func (c *Client) NewListSeriesByCategoryRelationClassRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
