// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": relationEditors Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListBooksRelationEditorsPath computes a request path to the listBooks action of relationEditors.
func ListBooksRelationEditorsPath(editorID int) string {
	param0 := strconv.Itoa(editorID)

	return fmt.Sprintf("/editors/%s/books", param0)
}

// List books by editor
func (c *Client) ListBooksRelationEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksRelationEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksRelationEditorsRequest create the request corresponding to the listBooks action endpoint of the relationEditors resource.
func (c *Client) NewListBooksRelationEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCollectionsRelationEditorsPath computes a request path to the listCollections action of relationEditors.
func ListCollectionsRelationEditorsPath(editorID int) string {
	param0 := strconv.Itoa(editorID)

	return fmt.Sprintf("/editors/%s/collections", param0)
}

// List collections by editor
func (c *Client) ListCollectionsRelationEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCollectionsRelationEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCollectionsRelationEditorsRequest create the request corresponding to the listCollections action endpoint of the relationEditors resource.
func (c *Client) NewListCollectionsRelationEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListPrintsRelationEditorsPath computes a request path to the listPrints action of relationEditors.
func ListPrintsRelationEditorsPath(editorID int) string {
	param0 := strconv.Itoa(editorID)

	return fmt.Sprintf("/editors/%s/prints", param0)
}

// List prints by editor
func (c *Client) ListPrintsRelationEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPrintsRelationEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPrintsRelationEditorsRequest create the request corresponding to the listPrints action endpoint of the relationEditors resource.
func (c *Client) NewListPrintsRelationEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListSeriesRelationEditorsPath computes a request path to the listSeries action of relationEditors.
func ListSeriesRelationEditorsPath(editorID int) string {
	param0 := strconv.Itoa(editorID)

	return fmt.Sprintf("/editors/%s/series", param0)
}

// List series by editor
func (c *Client) ListSeriesRelationEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSeriesRelationEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSeriesRelationEditorsRequest create the request corresponding to the listSeries action endpoint of the relationEditors resource.
func (c *Client) NewListSeriesRelationEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
