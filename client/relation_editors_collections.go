// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": relationEditorsCollections Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListBooksRelationEditorsCollectionsPath computes a request path to the listBooks action of relationEditorsCollections.
func ListBooksRelationEditorsCollectionsPath(editorID int, collectionID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/editors/%s/collections/%s/books", param0, param1)
}

// List books by editor-collection
func (c *Client) ListBooksRelationEditorsCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksRelationEditorsCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksRelationEditorsCollectionsRequest create the request corresponding to the listBooks action endpoint of the relationEditorsCollections resource.
func (c *Client) NewListBooksRelationEditorsCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByPrintRelationEditorsCollectionsPath computes a request path to the listBooksByPrint action of relationEditorsCollections.
func ListBooksByPrintRelationEditorsCollectionsPath(editorID int, collectionID int, printID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)
	param2 := strconv.Itoa(printID)

	return fmt.Sprintf("/editors/%s/collections/%s/prints/%s/books", param0, param1, param2)
}

// List books by editor-collection-print
func (c *Client) ListBooksByPrintRelationEditorsCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByPrintRelationEditorsCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByPrintRelationEditorsCollectionsRequest create the request corresponding to the listBooksByPrint action endpoint of the relationEditorsCollections resource.
func (c *Client) NewListBooksByPrintRelationEditorsCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByPrintSeriesRelationEditorsCollectionsPath computes a request path to the listBooksByPrintSeries action of relationEditorsCollections.
func ListBooksByPrintSeriesRelationEditorsCollectionsPath(editorID int, collectionID int, printID int, seriesID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)
	param2 := strconv.Itoa(printID)
	param3 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/editors/%s/collections/%s/prints/%s/series/%s/books", param0, param1, param2, param3)
}

// List books by editor-collection-print-series
func (c *Client) ListBooksByPrintSeriesRelationEditorsCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByPrintSeriesRelationEditorsCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByPrintSeriesRelationEditorsCollectionsRequest create the request corresponding to the listBooksByPrintSeries action endpoint of the relationEditorsCollections resource.
func (c *Client) NewListBooksByPrintSeriesRelationEditorsCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksBySeriesRelationEditorsCollectionsPath computes a request path to the listBooksBySeries action of relationEditorsCollections.
func ListBooksBySeriesRelationEditorsCollectionsPath(editorID int, collectionID int, seriesID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)
	param2 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/editors/%s/collections/%s/series/%s/books", param0, param1, param2)
}

// List books by editor-collection-series
func (c *Client) ListBooksBySeriesRelationEditorsCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksBySeriesRelationEditorsCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksBySeriesRelationEditorsCollectionsRequest create the request corresponding to the listBooksBySeries action endpoint of the relationEditorsCollections resource.
func (c *Client) NewListBooksBySeriesRelationEditorsCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksBySeriesPrintRelationEditorsCollectionsPath computes a request path to the listBooksBySeriesPrint action of relationEditorsCollections.
func ListBooksBySeriesPrintRelationEditorsCollectionsPath(editorID int, collectionID int, seriesID int, printID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)
	param2 := strconv.Itoa(seriesID)
	param3 := strconv.Itoa(printID)

	return fmt.Sprintf("/editors/%s/collections/%s/series/%s/prints/%s/books", param0, param1, param2, param3)
}

// List books by editor-collection-series-print
func (c *Client) ListBooksBySeriesPrintRelationEditorsCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksBySeriesPrintRelationEditorsCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksBySeriesPrintRelationEditorsCollectionsRequest create the request corresponding to the listBooksBySeriesPrint action endpoint of the relationEditorsCollections resource.
func (c *Client) NewListBooksBySeriesPrintRelationEditorsCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListPrintsRelationEditorsCollectionsPath computes a request path to the listPrints action of relationEditorsCollections.
func ListPrintsRelationEditorsCollectionsPath(editorID int, collectionID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/editors/%s/collections/%s/collections", param0, param1)
}

// List prints by editor-collection
func (c *Client) ListPrintsRelationEditorsCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPrintsRelationEditorsCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPrintsRelationEditorsCollectionsRequest create the request corresponding to the listPrints action endpoint of the relationEditorsCollections resource.
func (c *Client) NewListPrintsRelationEditorsCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListPrintsBySeriesRelationEditorsCollectionsPath computes a request path to the listPrintsBySeries action of relationEditorsCollections.
func ListPrintsBySeriesRelationEditorsCollectionsPath(editorID int, collectionID int, seriesID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)
	param2 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/editors/%s/collections/%s/series/%s/prints", param0, param1, param2)
}

// List prints by editor-collection-series
func (c *Client) ListPrintsBySeriesRelationEditorsCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPrintsBySeriesRelationEditorsCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPrintsBySeriesRelationEditorsCollectionsRequest create the request corresponding to the listPrintsBySeries action endpoint of the relationEditorsCollections resource.
func (c *Client) NewListPrintsBySeriesRelationEditorsCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListSeriesRelationEditorsCollectionsPath computes a request path to the listSeries action of relationEditorsCollections.
func ListSeriesRelationEditorsCollectionsPath(editorID int, collectionID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/editors/%s/collections/%s/series", param0, param1)
}

// List series by editor-collection
func (c *Client) ListSeriesRelationEditorsCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSeriesRelationEditorsCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSeriesRelationEditorsCollectionsRequest create the request corresponding to the listSeries action endpoint of the relationEditorsCollections resource.
func (c *Client) NewListSeriesRelationEditorsCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListSeriesByPrintRelationEditorsCollectionsPath computes a request path to the listSeriesByPrint action of relationEditorsCollections.
func ListSeriesByPrintRelationEditorsCollectionsPath(editorID int, collectionID int, printID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(collectionID)
	param2 := strconv.Itoa(printID)

	return fmt.Sprintf("/editors/%s/collections/%s/prints/%s/series", param0, param1, param2)
}

// List series by editor-collection-print
func (c *Client) ListSeriesByPrintRelationEditorsCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSeriesByPrintRelationEditorsCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSeriesByPrintRelationEditorsCollectionsRequest create the request corresponding to the listSeriesByPrint action endpoint of the relationEditorsCollections resource.
func (c *Client) NewListSeriesByPrintRelationEditorsCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
