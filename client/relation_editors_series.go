// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": relationEditorsSeries Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListBooksRelationEditorsSeriesPath computes a request path to the listBooks action of relationEditorsSeries.
func ListBooksRelationEditorsSeriesPath(editorID int, seriesID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/editors/%s/series/%s/books", param0, param1)
}

// List books by editor-series
func (c *Client) ListBooksRelationEditorsSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksRelationEditorsSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksRelationEditorsSeriesRequest create the request corresponding to the listBooks action endpoint of the relationEditorsSeries resource.
func (c *Client) NewListBooksRelationEditorsSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByCollectionRelationEditorsSeriesPath computes a request path to the listBooksByCollection action of relationEditorsSeries.
func ListBooksByCollectionRelationEditorsSeriesPath(editorID int, seriesID int, collectionID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(seriesID)
	param2 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/editors/%s/series/%s/collections/%s/books", param0, param1, param2)
}

// List books by editor-series-collection
func (c *Client) ListBooksByCollectionRelationEditorsSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByCollectionRelationEditorsSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByCollectionRelationEditorsSeriesRequest create the request corresponding to the listBooksByCollection action endpoint of the relationEditorsSeries resource.
func (c *Client) NewListBooksByCollectionRelationEditorsSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByCollectionPrintRelationEditorsSeriesPath computes a request path to the listBooksByCollectionPrint action of relationEditorsSeries.
func ListBooksByCollectionPrintRelationEditorsSeriesPath(editorID int, seriesID int, collectionID int, printID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(seriesID)
	param2 := strconv.Itoa(collectionID)
	param3 := strconv.Itoa(printID)

	return fmt.Sprintf("/editors/%s/series/%s/collections/%s/prints/%s/books", param0, param1, param2, param3)
}

// List books by editor-series-collection-print
func (c *Client) ListBooksByCollectionPrintRelationEditorsSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByCollectionPrintRelationEditorsSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByCollectionPrintRelationEditorsSeriesRequest create the request corresponding to the listBooksByCollectionPrint action endpoint of the relationEditorsSeries resource.
func (c *Client) NewListBooksByCollectionPrintRelationEditorsSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByPrintRelationEditorsSeriesPath computes a request path to the listBooksByPrint action of relationEditorsSeries.
func ListBooksByPrintRelationEditorsSeriesPath(editorID int, seriesID int, printID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(seriesID)
	param2 := strconv.Itoa(printID)

	return fmt.Sprintf("/editors/%s/series/%s/prints/%s/books", param0, param1, param2)
}

// List books by editor-series-print
func (c *Client) ListBooksByPrintRelationEditorsSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByPrintRelationEditorsSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByPrintRelationEditorsSeriesRequest create the request corresponding to the listBooksByPrint action endpoint of the relationEditorsSeries resource.
func (c *Client) NewListBooksByPrintRelationEditorsSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByPrintCollectionRelationEditorsSeriesPath computes a request path to the listBooksByPrintCollection action of relationEditorsSeries.
func ListBooksByPrintCollectionRelationEditorsSeriesPath(editorID int, seriesID int, printID int, collectionID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(seriesID)
	param2 := strconv.Itoa(printID)
	param3 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/editors/%s/series/%s/prints/%s/collections/%s/books", param0, param1, param2, param3)
}

// List books by editor-series-print-collection
func (c *Client) ListBooksByPrintCollectionRelationEditorsSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByPrintCollectionRelationEditorsSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByPrintCollectionRelationEditorsSeriesRequest create the request corresponding to the listBooksByPrintCollection action endpoint of the relationEditorsSeries resource.
func (c *Client) NewListBooksByPrintCollectionRelationEditorsSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCollectionsRelationEditorsSeriesPath computes a request path to the listCollections action of relationEditorsSeries.
func ListCollectionsRelationEditorsSeriesPath(editorID int, seriesID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/editors/%s/series/%s/collections", param0, param1)
}

// List collections by editor-series
func (c *Client) ListCollectionsRelationEditorsSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCollectionsRelationEditorsSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCollectionsRelationEditorsSeriesRequest create the request corresponding to the listCollections action endpoint of the relationEditorsSeries resource.
func (c *Client) NewListCollectionsRelationEditorsSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCollectionsByPrintRelationEditorsSeriesPath computes a request path to the listCollectionsByPrint action of relationEditorsSeries.
func ListCollectionsByPrintRelationEditorsSeriesPath(editorID int, seriesID int, printID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(seriesID)
	param2 := strconv.Itoa(printID)

	return fmt.Sprintf("/editors/%s/series/%s/prints/%s/collections", param0, param1, param2)
}

// List collections by editor-series-print
func (c *Client) ListCollectionsByPrintRelationEditorsSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCollectionsByPrintRelationEditorsSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCollectionsByPrintRelationEditorsSeriesRequest create the request corresponding to the listCollectionsByPrint action endpoint of the relationEditorsSeries resource.
func (c *Client) NewListCollectionsByPrintRelationEditorsSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListPrintsRelationEditorsSeriesPath computes a request path to the listPrints action of relationEditorsSeries.
func ListPrintsRelationEditorsSeriesPath(editorID int, seriesID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/editors/%s/series/%s/prints", param0, param1)
}

// List prints by editor-series
func (c *Client) ListPrintsRelationEditorsSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPrintsRelationEditorsSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPrintsRelationEditorsSeriesRequest create the request corresponding to the listPrints action endpoint of the relationEditorsSeries resource.
func (c *Client) NewListPrintsRelationEditorsSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListPrintsByCollectionRelationEditorsSeriesPath computes a request path to the listPrintsByCollection action of relationEditorsSeries.
func ListPrintsByCollectionRelationEditorsSeriesPath(editorID int, seriesID int, collectionID int) string {
	param0 := strconv.Itoa(editorID)
	param1 := strconv.Itoa(seriesID)
	param2 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/editors/%s/series/%s/collections/%s/prints", param0, param1, param2)
}

// List prints by editor-series-collection
func (c *Client) ListPrintsByCollectionRelationEditorsSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPrintsByCollectionRelationEditorsSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPrintsByCollectionRelationEditorsSeriesRequest create the request corresponding to the listPrintsByCollection action endpoint of the relationEditorsSeries resource.
func (c *Client) NewListPrintsByCollectionRelationEditorsSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
