// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": relationPrints Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListBooksRelationPrintsPath computes a request path to the listBooks action of relationPrints.
func ListBooksRelationPrintsPath(printID int) string {
	param0 := strconv.Itoa(printID)

	return fmt.Sprintf("/prints/%s/books", param0)
}

// List books by print
func (c *Client) ListBooksRelationPrints(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksRelationPrintsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksRelationPrintsRequest create the request corresponding to the listBooks action endpoint of the relationPrints resource.
func (c *Client) NewListBooksRelationPrintsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCollectionsRelationPrintsPath computes a request path to the listCollections action of relationPrints.
func ListCollectionsRelationPrintsPath(printID int) string {
	param0 := strconv.Itoa(printID)

	return fmt.Sprintf("/prints/%s/collections", param0)
}

// List collections by print
func (c *Client) ListCollectionsRelationPrints(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCollectionsRelationPrintsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCollectionsRelationPrintsRequest create the request corresponding to the listCollections action endpoint of the relationPrints resource.
func (c *Client) NewListCollectionsRelationPrintsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListEditorsRelationPrintsPath computes a request path to the listEditors action of relationPrints.
func ListEditorsRelationPrintsPath(printID int) string {
	param0 := strconv.Itoa(printID)

	return fmt.Sprintf("/prints/%s/editors", param0)
}

// List editors by print
func (c *Client) ListEditorsRelationPrints(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListEditorsRelationPrintsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListEditorsRelationPrintsRequest create the request corresponding to the listEditors action endpoint of the relationPrints resource.
func (c *Client) NewListEditorsRelationPrintsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListSeriesRelationPrintsPath computes a request path to the listSeries action of relationPrints.
func ListSeriesRelationPrintsPath(printID int) string {
	param0 := strconv.Itoa(printID)

	return fmt.Sprintf("/prints/%s/series", param0)
}

// List series by print
func (c *Client) ListSeriesRelationPrints(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSeriesRelationPrintsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSeriesRelationPrintsRequest create the request corresponding to the listSeries action endpoint of the relationPrints resource.
func (c *Client) NewListSeriesRelationPrintsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
