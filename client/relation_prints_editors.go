// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": relationPrintsEditors Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListBooksRelationPrintsEditorsPath computes a request path to the listBooks action of relationPrintsEditors.
func ListBooksRelationPrintsEditorsPath(printID int, editorID int) string {
	param0 := strconv.Itoa(printID)
	param1 := strconv.Itoa(editorID)

	return fmt.Sprintf("/prints/%s/editors/%s/books", param0, param1)
}

// List books by print-editor
func (c *Client) ListBooksRelationPrintsEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksRelationPrintsEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksRelationPrintsEditorsRequest create the request corresponding to the listBooks action endpoint of the relationPrintsEditors resource.
func (c *Client) NewListBooksRelationPrintsEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByCollectionRelationPrintsEditorsPath computes a request path to the listBooksByCollection action of relationPrintsEditors.
func ListBooksByCollectionRelationPrintsEditorsPath(printID int, editorID int, collectionID int) string {
	param0 := strconv.Itoa(printID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/prints/%s/editors/%s/collections/%s/books", param0, param1, param2)
}

// List books by print-editor-collection
func (c *Client) ListBooksByCollectionRelationPrintsEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByCollectionRelationPrintsEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByCollectionRelationPrintsEditorsRequest create the request corresponding to the listBooksByCollection action endpoint of the relationPrintsEditors resource.
func (c *Client) NewListBooksByCollectionRelationPrintsEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByCollectionSeriesRelationPrintsEditorsPath computes a request path to the listBooksByCollectionSeries action of relationPrintsEditors.
func ListBooksByCollectionSeriesRelationPrintsEditorsPath(printID int, editorID int, collectionID int, seriesID int) string {
	param0 := strconv.Itoa(printID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(collectionID)
	param3 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/prints/%s/editors/%s/collections/%s/series/%s/books", param0, param1, param2, param3)
}

// List books by print-editor-collection-series
func (c *Client) ListBooksByCollectionSeriesRelationPrintsEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByCollectionSeriesRelationPrintsEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByCollectionSeriesRelationPrintsEditorsRequest create the request corresponding to the listBooksByCollectionSeries action endpoint of the relationPrintsEditors resource.
func (c *Client) NewListBooksByCollectionSeriesRelationPrintsEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksBySeriesRelationPrintsEditorsPath computes a request path to the listBooksBySeries action of relationPrintsEditors.
func ListBooksBySeriesRelationPrintsEditorsPath(printID int, editorID int, seriesID int) string {
	param0 := strconv.Itoa(printID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/prints/%s/editors/%s/series/%s/books", param0, param1, param2)
}

// List books by print-editor-series
func (c *Client) ListBooksBySeriesRelationPrintsEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksBySeriesRelationPrintsEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksBySeriesRelationPrintsEditorsRequest create the request corresponding to the listBooksBySeries action endpoint of the relationPrintsEditors resource.
func (c *Client) NewListBooksBySeriesRelationPrintsEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksBySeriesCollectionRelationPrintsEditorsPath computes a request path to the listBooksBySeriesCollection action of relationPrintsEditors.
func ListBooksBySeriesCollectionRelationPrintsEditorsPath(printID int, editorID int, seriesID int, collectionID int) string {
	param0 := strconv.Itoa(printID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(seriesID)
	param3 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/prints/%s/editors/%s/series/%s/collections/%s/books", param0, param1, param2, param3)
}

// List books by print-editor-series-collection
func (c *Client) ListBooksBySeriesCollectionRelationPrintsEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksBySeriesCollectionRelationPrintsEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksBySeriesCollectionRelationPrintsEditorsRequest create the request corresponding to the listBooksBySeriesCollection action endpoint of the relationPrintsEditors resource.
func (c *Client) NewListBooksBySeriesCollectionRelationPrintsEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCollectionsRelationPrintsEditorsPath computes a request path to the listCollections action of relationPrintsEditors.
func ListCollectionsRelationPrintsEditorsPath(printID int, editorID int) string {
	param0 := strconv.Itoa(printID)
	param1 := strconv.Itoa(editorID)

	return fmt.Sprintf("/prints/%s/editors/%s/collections", param0, param1)
}

// List collections by print-editor
func (c *Client) ListCollectionsRelationPrintsEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCollectionsRelationPrintsEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCollectionsRelationPrintsEditorsRequest create the request corresponding to the listCollections action endpoint of the relationPrintsEditors resource.
func (c *Client) NewListCollectionsRelationPrintsEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCollectionsBySeriesRelationPrintsEditorsPath computes a request path to the listCollectionsBySeries action of relationPrintsEditors.
func ListCollectionsBySeriesRelationPrintsEditorsPath(printID int, editorID int, seriesID int) string {
	param0 := strconv.Itoa(printID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/prints/%s/editors/%s/series/%s/collections", param0, param1, param2)
}

// List collections by print-editor-series
func (c *Client) ListCollectionsBySeriesRelationPrintsEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCollectionsBySeriesRelationPrintsEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCollectionsBySeriesRelationPrintsEditorsRequest create the request corresponding to the listCollectionsBySeries action endpoint of the relationPrintsEditors resource.
func (c *Client) NewListCollectionsBySeriesRelationPrintsEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListSeriesRelationPrintsEditorsPath computes a request path to the listSeries action of relationPrintsEditors.
func ListSeriesRelationPrintsEditorsPath(printID int, editorID int) string {
	param0 := strconv.Itoa(printID)
	param1 := strconv.Itoa(editorID)

	return fmt.Sprintf("/prints/%s/editors/%s/series", param0, param1)
}

// List series by print-editor
func (c *Client) ListSeriesRelationPrintsEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSeriesRelationPrintsEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSeriesRelationPrintsEditorsRequest create the request corresponding to the listSeries action endpoint of the relationPrintsEditors resource.
func (c *Client) NewListSeriesRelationPrintsEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListSeriesByCollectionRelationPrintsEditorsPath computes a request path to the listSeriesByCollection action of relationPrintsEditors.
func ListSeriesByCollectionRelationPrintsEditorsPath(printID int, editorID int, collectionID int) string {
	param0 := strconv.Itoa(printID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/prints/%s/editors/%s/collections/%s/series", param0, param1, param2)
}

// List series by print-editor-collection
func (c *Client) ListSeriesByCollectionRelationPrintsEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSeriesByCollectionRelationPrintsEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSeriesByCollectionRelationPrintsEditorsRequest create the request corresponding to the listSeriesByCollection action endpoint of the relationPrintsEditors resource.
func (c *Client) NewListSeriesByCollectionRelationPrintsEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
