// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": relationSeriesCollections Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListBooksRelationSeriesCollectionsPath computes a request path to the listBooks action of relationSeriesCollections.
func ListBooksRelationSeriesCollectionsPath(seriesID int, collectionID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/series/%s/collections/%s/books", param0, param1)
}

// List books by series-collection
func (c *Client) ListBooksRelationSeriesCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksRelationSeriesCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksRelationSeriesCollectionsRequest create the request corresponding to the listBooks action endpoint of the relationSeriesCollections resource.
func (c *Client) NewListBooksRelationSeriesCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByPrintRelationSeriesCollectionsPath computes a request path to the listBooksByPrint action of relationSeriesCollections.
func ListBooksByPrintRelationSeriesCollectionsPath(seriesID int, collectionID int, printID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(collectionID)
	param2 := strconv.Itoa(printID)

	return fmt.Sprintf("/series/%s/collections/%s/prints/%s/books", param0, param1, param2)
}

// List books by series-collection-print
func (c *Client) ListBooksByPrintRelationSeriesCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByPrintRelationSeriesCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByPrintRelationSeriesCollectionsRequest create the request corresponding to the listBooksByPrint action endpoint of the relationSeriesCollections resource.
func (c *Client) NewListBooksByPrintRelationSeriesCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListPrintsRelationSeriesCollectionsPath computes a request path to the listPrints action of relationSeriesCollections.
func ListPrintsRelationSeriesCollectionsPath(seriesID int, collectionID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/series/%s/collections/%s/prints", param0, param1)
}

// List prints by series-collection
func (c *Client) ListPrintsRelationSeriesCollections(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPrintsRelationSeriesCollectionsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPrintsRelationSeriesCollectionsRequest create the request corresponding to the listPrints action endpoint of the relationSeriesCollections resource.
func (c *Client) NewListPrintsRelationSeriesCollectionsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
