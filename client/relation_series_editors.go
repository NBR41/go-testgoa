// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": relationSeriesEditors Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListBooksRelationSeriesEditorsPath computes a request path to the listBooks action of relationSeriesEditors.
func ListBooksRelationSeriesEditorsPath(seriesID int, editorID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(editorID)

	return fmt.Sprintf("/series/%s/editors/%s/books", param0, param1)
}

// List books by series-editor
func (c *Client) ListBooksRelationSeriesEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksRelationSeriesEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksRelationSeriesEditorsRequest create the request corresponding to the listBooks action endpoint of the relationSeriesEditors resource.
func (c *Client) NewListBooksRelationSeriesEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByCollectionRelationSeriesEditorsPath computes a request path to the listBooksByCollection action of relationSeriesEditors.
func ListBooksByCollectionRelationSeriesEditorsPath(seriesID int, editorID int, collectionID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/series/%s/editors/%s/collections/%s/books", param0, param1, param2)
}

// List books by series-editor-collection
func (c *Client) ListBooksByCollectionRelationSeriesEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByCollectionRelationSeriesEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByCollectionRelationSeriesEditorsRequest create the request corresponding to the listBooksByCollection action endpoint of the relationSeriesEditors resource.
func (c *Client) NewListBooksByCollectionRelationSeriesEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByCollectionPrintRelationSeriesEditorsPath computes a request path to the listBooksByCollectionPrint action of relationSeriesEditors.
func ListBooksByCollectionPrintRelationSeriesEditorsPath(seriesID int, editorID int, collectionID int, printID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(collectionID)
	param3 := strconv.Itoa(printID)

	return fmt.Sprintf("/series/%s/editors/%s/collections/%s/prints/%s/books", param0, param1, param2, param3)
}

// List books by series-editor-collection-print
func (c *Client) ListBooksByCollectionPrintRelationSeriesEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByCollectionPrintRelationSeriesEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByCollectionPrintRelationSeriesEditorsRequest create the request corresponding to the listBooksByCollectionPrint action endpoint of the relationSeriesEditors resource.
func (c *Client) NewListBooksByCollectionPrintRelationSeriesEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByPrintRelationSeriesEditorsPath computes a request path to the listBooksByPrint action of relationSeriesEditors.
func ListBooksByPrintRelationSeriesEditorsPath(seriesID int, editorID int, printID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(printID)

	return fmt.Sprintf("/series/%s/editors/%s/prints/%s/books", param0, param1, param2)
}

// List books by series-editor-print
func (c *Client) ListBooksByPrintRelationSeriesEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByPrintRelationSeriesEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByPrintRelationSeriesEditorsRequest create the request corresponding to the listBooksByPrint action endpoint of the relationSeriesEditors resource.
func (c *Client) NewListBooksByPrintRelationSeriesEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByPrintCollectionRelationSeriesEditorsPath computes a request path to the listBooksByPrintCollection action of relationSeriesEditors.
func ListBooksByPrintCollectionRelationSeriesEditorsPath(seriesID int, editorID int, printID int, collectionID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(printID)
	param3 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/series/%s/editors/%s/prints/%s/collections/%s/books", param0, param1, param2, param3)
}

// List books by series-editor-print-collection
func (c *Client) ListBooksByPrintCollectionRelationSeriesEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByPrintCollectionRelationSeriesEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByPrintCollectionRelationSeriesEditorsRequest create the request corresponding to the listBooksByPrintCollection action endpoint of the relationSeriesEditors resource.
func (c *Client) NewListBooksByPrintCollectionRelationSeriesEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCollectionsRelationSeriesEditorsPath computes a request path to the listCollections action of relationSeriesEditors.
func ListCollectionsRelationSeriesEditorsPath(seriesID int, editorID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(editorID)

	return fmt.Sprintf("/series/%s/editors/%s/collections", param0, param1)
}

// List collections by series-editor
func (c *Client) ListCollectionsRelationSeriesEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCollectionsRelationSeriesEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCollectionsRelationSeriesEditorsRequest create the request corresponding to the listCollections action endpoint of the relationSeriesEditors resource.
func (c *Client) NewListCollectionsRelationSeriesEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCollectionsByPrintRelationSeriesEditorsPath computes a request path to the listCollectionsByPrint action of relationSeriesEditors.
func ListCollectionsByPrintRelationSeriesEditorsPath(seriesID int, editorID int, printID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(printID)

	return fmt.Sprintf("/series/%s/editors/%s/prints/%s/collections", param0, param1, param2)
}

// List collections by series-editor-print
func (c *Client) ListCollectionsByPrintRelationSeriesEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCollectionsByPrintRelationSeriesEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCollectionsByPrintRelationSeriesEditorsRequest create the request corresponding to the listCollectionsByPrint action endpoint of the relationSeriesEditors resource.
func (c *Client) NewListCollectionsByPrintRelationSeriesEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListPrintsRelationSeriesEditorsPath computes a request path to the listPrints action of relationSeriesEditors.
func ListPrintsRelationSeriesEditorsPath(seriesID int, editorID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(editorID)

	return fmt.Sprintf("/series/%s/editors/%s/prints", param0, param1)
}

// List prints by series-editor
func (c *Client) ListPrintsRelationSeriesEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPrintsRelationSeriesEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPrintsRelationSeriesEditorsRequest create the request corresponding to the listPrints action endpoint of the relationSeriesEditors resource.
func (c *Client) NewListPrintsRelationSeriesEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListPrintsByCollectionRelationSeriesEditorsPath computes a request path to the listPrintsByCollection action of relationSeriesEditors.
func ListPrintsByCollectionRelationSeriesEditorsPath(seriesID int, editorID int, collectionID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(editorID)
	param2 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/series/%s/editors/%s/collections/%s/prints", param0, param1, param2)
}

// List prints by series-editor-collection
func (c *Client) ListPrintsByCollectionRelationSeriesEditors(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPrintsByCollectionRelationSeriesEditorsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPrintsByCollectionRelationSeriesEditorsRequest create the request corresponding to the listPrintsByCollection action endpoint of the relationSeriesEditors resource.
func (c *Client) NewListPrintsByCollectionRelationSeriesEditorsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
