// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": relationSeriesPrints Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListBooksRelationSeriesPrintsPath computes a request path to the listBooks action of relationSeriesPrints.
func ListBooksRelationSeriesPrintsPath(seriesID int, printID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(printID)

	return fmt.Sprintf("/series/%s/prints/%s/books", param0, param1)
}

// List books by series-print
func (c *Client) ListBooksRelationSeriesPrints(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksRelationSeriesPrintsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksRelationSeriesPrintsRequest create the request corresponding to the listBooks action endpoint of the relationSeriesPrints resource.
func (c *Client) NewListBooksRelationSeriesPrintsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByEditorRelationSeriesPrintsPath computes a request path to the listBooksByEditor action of relationSeriesPrints.
func ListBooksByEditorRelationSeriesPrintsPath(seriesID int, printID int, editorID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(printID)
	param2 := strconv.Itoa(editorID)

	return fmt.Sprintf("/series/%s/prints/%s/editors/%s/books", param0, param1, param2)
}

// List books by series-print-editor
func (c *Client) ListBooksByEditorRelationSeriesPrints(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByEditorRelationSeriesPrintsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByEditorRelationSeriesPrintsRequest create the request corresponding to the listBooksByEditor action endpoint of the relationSeriesPrints resource.
func (c *Client) NewListBooksByEditorRelationSeriesPrintsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListBooksByEditorCollectionRelationSeriesPrintsPath computes a request path to the listBooksByEditorCollection action of relationSeriesPrints.
func ListBooksByEditorCollectionRelationSeriesPrintsPath(seriesID int, printID int, editorID int, collectionID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(printID)
	param2 := strconv.Itoa(editorID)
	param3 := strconv.Itoa(collectionID)

	return fmt.Sprintf("/series/%s/prints/%s/editors/%s/collections/%s/books", param0, param1, param2, param3)
}

// List books by series-print-editor-collection
func (c *Client) ListBooksByEditorCollectionRelationSeriesPrints(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListBooksByEditorCollectionRelationSeriesPrintsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListBooksByEditorCollectionRelationSeriesPrintsRequest create the request corresponding to the listBooksByEditorCollection action endpoint of the relationSeriesPrints resource.
func (c *Client) NewListBooksByEditorCollectionRelationSeriesPrintsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCollectionsRelationSeriesPrintsPath computes a request path to the listCollections action of relationSeriesPrints.
func ListCollectionsRelationSeriesPrintsPath(seriesID int, printID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(printID)

	return fmt.Sprintf("/series/%s/prints/%s/collections", param0, param1)
}

// List collections by series-print
func (c *Client) ListCollectionsRelationSeriesPrints(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCollectionsRelationSeriesPrintsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCollectionsRelationSeriesPrintsRequest create the request corresponding to the listCollections action endpoint of the relationSeriesPrints resource.
func (c *Client) NewListCollectionsRelationSeriesPrintsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListCollectionsByEditorRelationSeriesPrintsPath computes a request path to the listCollectionsByEditor action of relationSeriesPrints.
func ListCollectionsByEditorRelationSeriesPrintsPath(seriesID int, printID int, editorID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(printID)
	param2 := strconv.Itoa(editorID)

	return fmt.Sprintf("/series/%s/prints/%s/editors/%s/collections", param0, param1, param2)
}

// List collections by series-print-editor
func (c *Client) ListCollectionsByEditorRelationSeriesPrints(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListCollectionsByEditorRelationSeriesPrintsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListCollectionsByEditorRelationSeriesPrintsRequest create the request corresponding to the listCollectionsByEditor action endpoint of the relationSeriesPrints resource.
func (c *Client) NewListCollectionsByEditorRelationSeriesPrintsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListEditorsRelationSeriesPrintsPath computes a request path to the listEditors action of relationSeriesPrints.
func ListEditorsRelationSeriesPrintsPath(seriesID int, printID int) string {
	param0 := strconv.Itoa(seriesID)
	param1 := strconv.Itoa(printID)

	return fmt.Sprintf("/series/%s/prints/%s/editors", param0, param1)
}

// List editors by series-print
func (c *Client) ListEditorsRelationSeriesPrints(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListEditorsRelationSeriesPrintsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListEditorsRelationSeriesPrintsRequest create the request corresponding to the listEditors action endpoint of the relationSeriesPrints resource.
func (c *Client) NewListEditorsRelationSeriesPrintsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
