// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": roles Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateRolesPayload is the roles create action payload.
type CreateRolesPayload struct {
	// Role Name (Author/Scenarist/Cartoonist)
	RoleName string `form:"role_name" json:"role_name" yaml:"role_name" xml:"role_name"`
}

// CreateRolesPath computes a request path to the create action of roles.
func CreateRolesPath() string {

	return fmt.Sprintf("/roles")
}

// Create new role
func (c *Client) CreateRoles(ctx context.Context, path string, payload *CreateRolesPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateRolesRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateRolesRequest create the request corresponding to the create action endpoint of the roles resource.
func (c *Client) NewCreateRolesRequest(ctx context.Context, path string, payload *CreateRolesPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteRolesPath computes a request path to the delete action of roles.
func DeleteRolesPath(roleID int) string {
	param0 := strconv.Itoa(roleID)

	return fmt.Sprintf("/roles/%s", param0)
}

// delete role by id
func (c *Client) DeleteRoles(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteRolesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteRolesRequest create the request corresponding to the delete action endpoint of the roles resource.
func (c *Client) NewDeleteRolesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListRolesPath computes a request path to the list action of roles.
func ListRolesPath() string {

	return fmt.Sprintf("/roles")
}

// Get roles
func (c *Client) ListRoles(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListRolesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListRolesRequest create the request corresponding to the list action endpoint of the roles resource.
func (c *Client) NewListRolesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowRolesPath computes a request path to the show action of roles.
func ShowRolesPath(roleID int) string {
	param0 := strconv.Itoa(roleID)

	return fmt.Sprintf("/roles/%s", param0)
}

// Get role by id
func (c *Client) ShowRoles(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowRolesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowRolesRequest create the request corresponding to the show action endpoint of the roles resource.
func (c *Client) NewShowRolesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateRolesPayload is the roles update action payload.
type UpdateRolesPayload struct {
	// Role Name (Author/Scenarist/Cartoonist)
	RoleName string `form:"role_name" json:"role_name" yaml:"role_name" xml:"role_name"`
}

// UpdateRolesPath computes a request path to the update action of roles.
func UpdateRolesPath(roleID int) string {
	param0 := strconv.Itoa(roleID)

	return fmt.Sprintf("/roles/%s", param0)
}

// Update role by id
func (c *Client) UpdateRoles(ctx context.Context, path string, payload *UpdateRolesPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateRolesRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateRolesRequest create the request corresponding to the update action endpoint of the roles resource.
func (c *Client) NewUpdateRolesRequest(ctx context.Context, path string, payload *UpdateRolesPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
