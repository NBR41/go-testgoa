// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": series Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateSeriesPayload is the series create action payload.
type CreateSeriesPayload struct {
	// Unique Category ID
	CategoryID int `form:"category_id" json:"category_id" yaml:"category_id" xml:"category_id"`
	// Series Name (Akira/Dragon ball)
	SeriesName string `form:"series_name" json:"series_name" yaml:"series_name" xml:"series_name"`
}

// CreateSeriesPath computes a request path to the create action of series.
func CreateSeriesPath() string {

	return fmt.Sprintf("/series")
}

// Create new series
func (c *Client) CreateSeries(ctx context.Context, path string, payload *CreateSeriesPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateSeriesRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateSeriesRequest create the request corresponding to the create action endpoint of the series resource.
func (c *Client) NewCreateSeriesRequest(ctx context.Context, path string, payload *CreateSeriesPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteSeriesPath computes a request path to the delete action of series.
func DeleteSeriesPath(seriesID int) string {
	param0 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/series/%s", param0)
}

// delete serie by id
func (c *Client) DeleteSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteSeriesRequest create the request corresponding to the delete action endpoint of the series resource.
func (c *Client) NewDeleteSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ListSeriesPath computes a request path to the list action of series.
func ListSeriesPath() string {

	return fmt.Sprintf("/series")
}

// Get series
func (c *Client) ListSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListSeriesRequest create the request corresponding to the list action endpoint of the series resource.
func (c *Client) NewListSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowSeriesPath computes a request path to the show action of series.
func ShowSeriesPath(seriesID int) string {
	param0 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/series/%s", param0)
}

// Get serie by id
func (c *Client) ShowSeries(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowSeriesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowSeriesRequest create the request corresponding to the show action endpoint of the series resource.
func (c *Client) NewShowSeriesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateSeriesPayload is the series update action payload.
type UpdateSeriesPayload struct {
	// Unique Category ID
	CategoryID *int `form:"category_id,omitempty" json:"category_id,omitempty" yaml:"category_id,omitempty" xml:"category_id,omitempty"`
	// Series Name (Akira/Dragon ball)
	SeriesName *string `form:"series_name,omitempty" json:"series_name,omitempty" yaml:"series_name,omitempty" xml:"series_name,omitempty"`
}

// UpdateSeriesPath computes a request path to the update action of series.
func UpdateSeriesPath(seriesID int) string {
	param0 := strconv.Itoa(seriesID)

	return fmt.Sprintf("/series/%s", param0)
}

// Update serie by id
func (c *Client) UpdateSeries(ctx context.Context, path string, payload *UpdateSeriesPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateSeriesRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateSeriesRequest create the request corresponding to the update action endpoint of the series resource.
func (c *Client) NewUpdateSeriesRequest(ctx context.Context, path string, payload *UpdateSeriesPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
