// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": token Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// AccessTokenPath computes a request path to the access action of token.
func AccessTokenPath() string {

	return fmt.Sprintf("/token/access_token")
}

// Get access
func (c *Client) AccessToken(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAccessTokenRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAccessTokenRequest create the request corresponding to the access action endpoint of the token resource.
func (c *Client) NewAccessTokenRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// AuthTokenPath computes a request path to the auth action of token.
func AuthTokenPath() string {

	return fmt.Sprintf("/token/auth")
}

// Get users
func (c *Client) AuthToken(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAuthTokenRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAuthTokenRequest create the request corresponding to the auth action endpoint of the token resource.
func (c *Client) NewAuthTokenRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
