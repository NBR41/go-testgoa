// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": Application User Types
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// authenticatePayload user type.
type authenticatePayload struct {
	// email or nickname
	Login *string `form:"login,omitempty" json:"login,omitempty" yaml:"login,omitempty" xml:"login,omitempty"`
	// user password
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the authenticatePayload type instance.
func (ut *authenticatePayload) Validate() (err error) {
	if ut.Login == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "login"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Login != nil {
		if utf8.RuneCountInString(*ut.Login) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.login`, *ut.Login, utf8.RuneCountInString(*ut.Login), 1, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 1, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 32, false))
		}
	}
	return
}

// Publicize creates AuthenticatePayload from authenticatePayload
func (ut *authenticatePayload) Publicize() *AuthenticatePayload {
	var pub AuthenticatePayload
	if ut.Login != nil {
		pub.Login = *ut.Login
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// AuthenticatePayload user type.
type AuthenticatePayload struct {
	// email or nickname
	Login string `form:"login" json:"login" yaml:"login" xml:"login"`
	// user password
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the AuthenticatePayload type instance.
func (ut *AuthenticatePayload) Validate() (err error) {
	if ut.Login == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "login"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if utf8.RuneCountInString(ut.Login) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.login`, ut.Login, utf8.RuneCountInString(ut.Login), 1, true))
	}
	if utf8.RuneCountInString(ut.Password) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 1, true))
	}
	if utf8.RuneCountInString(ut.Password) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 32, false))
	}
	return
}

// passwordChangePayload user type.
type passwordChangePayload struct {
	// user password
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	// token
	Token *string `form:"token,omitempty" json:"token,omitempty" yaml:"token,omitempty" xml:"token,omitempty"`
}

// Validate validates the passwordChangePayload type instance.
func (ut *passwordChangePayload) Validate() (err error) {
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Token == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "token"))
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 1, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 32, false))
		}
	}
	if ut.Token != nil {
		if utf8.RuneCountInString(*ut.Token) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.token`, *ut.Token, utf8.RuneCountInString(*ut.Token), 1, true))
		}
	}
	return
}

// Publicize creates PasswordChangePayload from passwordChangePayload
func (ut *passwordChangePayload) Publicize() *PasswordChangePayload {
	var pub PasswordChangePayload
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	if ut.Token != nil {
		pub.Token = *ut.Token
	}
	return &pub
}

// PasswordChangePayload user type.
type PasswordChangePayload struct {
	// user password
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
	// token
	Token string `form:"token" json:"token" yaml:"token" xml:"token"`
}

// Validate validates the PasswordChangePayload type instance.
func (ut *PasswordChangePayload) Validate() (err error) {
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if ut.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "token"))
	}
	if utf8.RuneCountInString(ut.Password) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 1, true))
	}
	if utf8.RuneCountInString(ut.Password) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 32, false))
	}
	if utf8.RuneCountInString(ut.Token) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.token`, ut.Token, utf8.RuneCountInString(ut.Token), 1, true))
	}
	return
}

// passwordPayload user type.
type passwordPayload struct {
	// user password
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the passwordPayload type instance.
func (ut *passwordPayload) Validate() (err error) {
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 1, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 32, false))
		}
	}
	return
}

// Publicize creates PasswordPayload from passwordPayload
func (ut *passwordPayload) Publicize() *PasswordPayload {
	var pub PasswordPayload
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// PasswordPayload user type.
type PasswordPayload struct {
	// user password
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the PasswordPayload type instance.
func (ut *PasswordPayload) Validate() (err error) {
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if utf8.RuneCountInString(ut.Password) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 1, true))
	}
	if utf8.RuneCountInString(ut.Password) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 32, false))
	}
	return
}

// userCreatePayload user type.
type userCreatePayload struct {
	// user email
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// user nickname
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" yaml:"nickname,omitempty" xml:"nickname,omitempty"`
	// user password
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the userCreatePayload type instance.
func (ut *userCreatePayload) Validate() (err error) {
	if ut.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "email"))
	}
	if ut.Nickname == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "nickname"))
	}
	if ut.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "password"))
	}
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Nickname != nil {
		if utf8.RuneCountInString(*ut.Nickname) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.nickname`, *ut.Nickname, utf8.RuneCountInString(*ut.Nickname), 1, true))
		}
	}
	if ut.Nickname != nil {
		if utf8.RuneCountInString(*ut.Nickname) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.nickname`, *ut.Nickname, utf8.RuneCountInString(*ut.Nickname), 32, false))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 1, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 32 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 32, false))
		}
	}
	return
}

// Publicize creates UserCreatePayload from userCreatePayload
func (ut *userCreatePayload) Publicize() *UserCreatePayload {
	var pub UserCreatePayload
	if ut.Email != nil {
		pub.Email = *ut.Email
	}
	if ut.Nickname != nil {
		pub.Nickname = *ut.Nickname
	}
	if ut.Password != nil {
		pub.Password = *ut.Password
	}
	return &pub
}

// UserCreatePayload user type.
type UserCreatePayload struct {
	// user email
	Email string `form:"email" json:"email" yaml:"email" xml:"email"`
	// user nickname
	Nickname string `form:"nickname" json:"nickname" yaml:"nickname" xml:"nickname"`
	// user password
	Password string `form:"password" json:"password" yaml:"password" xml:"password"`
}

// Validate validates the UserCreatePayload type instance.
func (ut *UserCreatePayload) Validate() (err error) {
	if ut.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "email"))
	}
	if ut.Nickname == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "nickname"))
	}
	if ut.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, ut.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(ut.Nickname) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.nickname`, ut.Nickname, utf8.RuneCountInString(ut.Nickname), 1, true))
	}
	if utf8.RuneCountInString(ut.Nickname) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.nickname`, ut.Nickname, utf8.RuneCountInString(ut.Nickname), 32, false))
	}
	if utf8.RuneCountInString(ut.Password) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 1, true))
	}
	if utf8.RuneCountInString(ut.Password) > 32 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, ut.Password, utf8.RuneCountInString(ut.Password), 32, false))
	}
	return
}
