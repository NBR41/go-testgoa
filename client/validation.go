// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": validation Resource Client
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// GetValidationPath computes a request path to the get action of validation.
func GetValidationPath(userID int) string {
	param0 := strconv.Itoa(userID)

	return fmt.Sprintf("/validation/%s", param0)
}

// Get validation token
func (c *Client) GetValidation(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetValidationRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetValidationRequest create the request corresponding to the get action endpoint of the validation resource.
func (c *Client) NewGetValidationRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSecSigner != nil {
		if err := c.JWTSecSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// ValidateValidationPayload is the validation validate action payload.
type ValidateValidationPayload struct {
	// token
	Token string `form:"token" json:"token" yaml:"token" xml:"token"`
}

// ValidateValidationPath computes a request path to the validate action of validation.
func ValidateValidationPath() string {

	return fmt.Sprintf("/validation")
}

// Validate user
func (c *Client) ValidateValidation(ctx context.Context, path string, payload *ValidateValidationPayload, contentType string) (*http.Response, error) {
	req, err := c.NewValidateValidationRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewValidateValidationRequest create the request corresponding to the validate action endpoint of the validation resource.
func (c *Client) NewValidateValidationRequest(ctx context.Context, path string, payload *ValidateValidationPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
