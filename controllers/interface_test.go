// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	api "github.com/NBR41/go-testgoa/internal/api"
	model "github.com/NBR41/go-testgoa/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockModeler is a mock of Modeler interface
type MockModeler struct {
	ctrl     *gomock.Controller
	recorder *MockModelerMockRecorder
}

// MockModelerMockRecorder is the mock recorder for MockModeler
type MockModelerMockRecorder struct {
	mock *MockModeler
}

// NewMockModeler creates a new mock instance
func NewMockModeler(ctrl *gomock.Controller) *MockModeler {
	mock := &MockModeler{ctrl: ctrl}
	mock.recorder = &MockModelerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModeler) EXPECT() *MockModelerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockModeler) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockModelerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockModeler)(nil).Close))
}

// GetBookDetail mocks base method
func (m *MockModeler) GetBookDetail(isbn string) (*model.BookDetail, error) {
	ret := m.ctrl.Call(m, "GetBookDetail", isbn)
	ret0, _ := ret[0].(*model.BookDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookDetail indicates an expected call of GetBookDetail
func (mr *MockModelerMockRecorder) GetBookDetail(isbn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookDetail", reflect.TypeOf((*MockModeler)(nil).GetBookDetail), isbn)
}

// InsertBookDetail mocks base method
func (m *MockModeler) InsertBookDetail(isbn string, book *api.BookDetail) (*model.BookDetail, error) {
	ret := m.ctrl.Call(m, "InsertBookDetail", isbn, book)
	ret0, _ := ret[0].(*model.BookDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBookDetail indicates an expected call of InsertBookDetail
func (mr *MockModelerMockRecorder) InsertBookDetail(isbn, book interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBookDetail", reflect.TypeOf((*MockModeler)(nil).InsertBookDetail), isbn, book)
}

// GetAuthorByID mocks base method
func (m *MockModeler) GetAuthorByID(id int) (*model.Author, error) {
	ret := m.ctrl.Call(m, "GetAuthorByID", id)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByID indicates an expected call of GetAuthorByID
func (mr *MockModelerMockRecorder) GetAuthorByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByID", reflect.TypeOf((*MockModeler)(nil).GetAuthorByID), id)
}

// GetAuthorByName mocks base method
func (m *MockModeler) GetAuthorByName(name string) (*model.Author, error) {
	ret := m.ctrl.Call(m, "GetAuthorByName", name)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByName indicates an expected call of GetAuthorByName
func (mr *MockModelerMockRecorder) GetAuthorByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByName", reflect.TypeOf((*MockModeler)(nil).GetAuthorByName), name)
}

// ListAuthorsByIDs mocks base method
func (m *MockModeler) ListAuthorsByIDs(categoryID, roleID *int) ([]*model.Author, error) {
	ret := m.ctrl.Call(m, "ListAuthorsByIDs", categoryID, roleID)
	ret0, _ := ret[0].([]*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthorsByIDs indicates an expected call of ListAuthorsByIDs
func (mr *MockModelerMockRecorder) ListAuthorsByIDs(categoryID, roleID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthorsByIDs", reflect.TypeOf((*MockModeler)(nil).ListAuthorsByIDs), categoryID, roleID)
}

// InsertAuthor mocks base method
func (m *MockModeler) InsertAuthor(name string) (*model.Author, error) {
	ret := m.ctrl.Call(m, "InsertAuthor", name)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAuthor indicates an expected call of InsertAuthor
func (mr *MockModelerMockRecorder) InsertAuthor(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAuthor", reflect.TypeOf((*MockModeler)(nil).InsertAuthor), name)
}

// UpdateAuthor mocks base method
func (m *MockModeler) UpdateAuthor(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateAuthor", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthor indicates an expected call of UpdateAuthor
func (mr *MockModelerMockRecorder) UpdateAuthor(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockModeler)(nil).UpdateAuthor), id, name)
}

// DeleteAuthor mocks base method
func (m *MockModeler) DeleteAuthor(id int) error {
	ret := m.ctrl.Call(m, "DeleteAuthor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor
func (mr *MockModelerMockRecorder) DeleteAuthor(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockModeler)(nil).DeleteAuthor), id)
}

// GetBookByID mocks base method
func (m *MockModeler) GetBookByID(id int) (*model.Book, error) {
	ret := m.ctrl.Call(m, "GetBookByID", id)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID
func (mr *MockModelerMockRecorder) GetBookByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockModeler)(nil).GetBookByID), id)
}

// GetBookByISBN mocks base method
func (m *MockModeler) GetBookByISBN(isbn string) (*model.Book, error) {
	ret := m.ctrl.Call(m, "GetBookByISBN", isbn)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByISBN indicates an expected call of GetBookByISBN
func (mr *MockModelerMockRecorder) GetBookByISBN(isbn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByISBN", reflect.TypeOf((*MockModeler)(nil).GetBookByISBN), isbn)
}

// GetBookByName mocks base method
func (m *MockModeler) GetBookByName(name string) (*model.Book, error) {
	ret := m.ctrl.Call(m, "GetBookByName", name)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByName indicates an expected call of GetBookByName
func (mr *MockModelerMockRecorder) GetBookByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByName", reflect.TypeOf((*MockModeler)(nil).GetBookByName), name)
}

// ListBooksByIDs mocks base method
func (m *MockModeler) ListBooksByIDs(collectionID, editorID, printID, seriesID *int) ([]*model.Book, error) {
	ret := m.ctrl.Call(m, "ListBooksByIDs", collectionID, editorID, printID, seriesID)
	ret0, _ := ret[0].([]*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooksByIDs indicates an expected call of ListBooksByIDs
func (mr *MockModelerMockRecorder) ListBooksByIDs(collectionID, editorID, printID, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooksByIDs", reflect.TypeOf((*MockModeler)(nil).ListBooksByIDs), collectionID, editorID, printID, seriesID)
}

// InsertBook mocks base method
func (m *MockModeler) InsertBook(isbn, name string, seriesID int) (*model.Book, error) {
	ret := m.ctrl.Call(m, "InsertBook", isbn, name, seriesID)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBook indicates an expected call of InsertBook
func (mr *MockModelerMockRecorder) InsertBook(isbn, name, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBook", reflect.TypeOf((*MockModeler)(nil).InsertBook), isbn, name, seriesID)
}

// UpdateBook mocks base method
func (m *MockModeler) UpdateBook(id int, name *string, seriesID *int) error {
	ret := m.ctrl.Call(m, "UpdateBook", id, name, seriesID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook
func (mr *MockModelerMockRecorder) UpdateBook(id, name, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockModeler)(nil).UpdateBook), id, name, seriesID)
}

// DeleteBook mocks base method
func (m *MockModeler) DeleteBook(id int) error {
	ret := m.ctrl.Call(m, "DeleteBook", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook
func (mr *MockModelerMockRecorder) DeleteBook(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockModeler)(nil).DeleteBook), id)
}

// GetCategoryByID mocks base method
func (m *MockModeler) GetCategoryByID(id int) (*model.Category, error) {
	ret := m.ctrl.Call(m, "GetCategoryByID", id)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID
func (mr *MockModelerMockRecorder) GetCategoryByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockModeler)(nil).GetCategoryByID), id)
}

// GetCategoryByName mocks base method
func (m *MockModeler) GetCategoryByName(name string) (*model.Category, error) {
	ret := m.ctrl.Call(m, "GetCategoryByName", name)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName
func (mr *MockModelerMockRecorder) GetCategoryByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockModeler)(nil).GetCategoryByName), name)
}

// ListCategoriesByIDs mocks base method
func (m *MockModeler) ListCategoriesByIDs(authorID, classID *int) ([]*model.Category, error) {
	ret := m.ctrl.Call(m, "ListCategoriesByIDs", authorID, classID)
	ret0, _ := ret[0].([]*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategoriesByIDs indicates an expected call of ListCategoriesByIDs
func (mr *MockModelerMockRecorder) ListCategoriesByIDs(authorID, classID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategoriesByIDs", reflect.TypeOf((*MockModeler)(nil).ListCategoriesByIDs), authorID, classID)
}

// InsertCategory mocks base method
func (m *MockModeler) InsertCategory(name string) (*model.Category, error) {
	ret := m.ctrl.Call(m, "InsertCategory", name)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCategory indicates an expected call of InsertCategory
func (mr *MockModelerMockRecorder) InsertCategory(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCategory", reflect.TypeOf((*MockModeler)(nil).InsertCategory), name)
}

// UpdateCategory mocks base method
func (m *MockModeler) UpdateCategory(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateCategory", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockModelerMockRecorder) UpdateCategory(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockModeler)(nil).UpdateCategory), id, name)
}

// DeleteCategory mocks base method
func (m *MockModeler) DeleteCategory(id int) error {
	ret := m.ctrl.Call(m, "DeleteCategory", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory
func (mr *MockModelerMockRecorder) DeleteCategory(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockModeler)(nil).DeleteCategory), id)
}

// GetClassByID mocks base method
func (m *MockModeler) GetClassByID(id int) (*model.Class, error) {
	ret := m.ctrl.Call(m, "GetClassByID", id)
	ret0, _ := ret[0].(*model.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassByID indicates an expected call of GetClassByID
func (mr *MockModelerMockRecorder) GetClassByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassByID", reflect.TypeOf((*MockModeler)(nil).GetClassByID), id)
}

// GetClassByName mocks base method
func (m *MockModeler) GetClassByName(name string) (*model.Class, error) {
	ret := m.ctrl.Call(m, "GetClassByName", name)
	ret0, _ := ret[0].(*model.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassByName indicates an expected call of GetClassByName
func (mr *MockModelerMockRecorder) GetClassByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassByName", reflect.TypeOf((*MockModeler)(nil).GetClassByName), name)
}

// ListClassesByIDs mocks base method
func (m *MockModeler) ListClassesByIDs(authorID, categoryID, seriesID *int) ([]*model.Class, error) {
	ret := m.ctrl.Call(m, "ListClassesByIDs", authorID, categoryID, seriesID)
	ret0, _ := ret[0].([]*model.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClassesByIDs indicates an expected call of ListClassesByIDs
func (mr *MockModelerMockRecorder) ListClassesByIDs(authorID, categoryID, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClassesByIDs", reflect.TypeOf((*MockModeler)(nil).ListClassesByIDs), authorID, categoryID, seriesID)
}

// InsertClass mocks base method
func (m *MockModeler) InsertClass(name string) (*model.Class, error) {
	ret := m.ctrl.Call(m, "InsertClass", name)
	ret0, _ := ret[0].(*model.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertClass indicates an expected call of InsertClass
func (mr *MockModelerMockRecorder) InsertClass(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertClass", reflect.TypeOf((*MockModeler)(nil).InsertClass), name)
}

// UpdateClass mocks base method
func (m *MockModeler) UpdateClass(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateClass", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClass indicates an expected call of UpdateClass
func (mr *MockModelerMockRecorder) UpdateClass(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockModeler)(nil).UpdateClass), id, name)
}

// DeleteClass mocks base method
func (m *MockModeler) DeleteClass(id int) error {
	ret := m.ctrl.Call(m, "DeleteClass", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClass indicates an expected call of DeleteClass
func (mr *MockModelerMockRecorder) DeleteClass(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClass", reflect.TypeOf((*MockModeler)(nil).DeleteClass), id)
}

// GetCollectionByID mocks base method
func (m *MockModeler) GetCollectionByID(id int) (*model.Collection, error) {
	ret := m.ctrl.Call(m, "GetCollectionByID", id)
	ret0, _ := ret[0].(*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionByID indicates an expected call of GetCollectionByID
func (mr *MockModelerMockRecorder) GetCollectionByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionByID", reflect.TypeOf((*MockModeler)(nil).GetCollectionByID), id)
}

// GetCollectionByName mocks base method
func (m *MockModeler) GetCollectionByName(name string, editorID int) (*model.Collection, error) {
	ret := m.ctrl.Call(m, "GetCollectionByName", name, editorID)
	ret0, _ := ret[0].(*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionByName indicates an expected call of GetCollectionByName
func (mr *MockModelerMockRecorder) GetCollectionByName(name, editorID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionByName", reflect.TypeOf((*MockModeler)(nil).GetCollectionByName), name, editorID)
}

// ListCollectionsByIDs mocks base method
func (m *MockModeler) ListCollectionsByIDs(editorID, printID, seriesID *int) ([]*model.Collection, error) {
	ret := m.ctrl.Call(m, "ListCollectionsByIDs", editorID, printID, seriesID)
	ret0, _ := ret[0].([]*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollectionsByIDs indicates an expected call of ListCollectionsByIDs
func (mr *MockModelerMockRecorder) ListCollectionsByIDs(editorID, printID, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionsByIDs", reflect.TypeOf((*MockModeler)(nil).ListCollectionsByIDs), editorID, printID, seriesID)
}

// InsertCollection mocks base method
func (m *MockModeler) InsertCollection(name string, editorID int) (*model.Collection, error) {
	ret := m.ctrl.Call(m, "InsertCollection", name, editorID)
	ret0, _ := ret[0].(*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCollection indicates an expected call of InsertCollection
func (mr *MockModelerMockRecorder) InsertCollection(name, editorID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCollection", reflect.TypeOf((*MockModeler)(nil).InsertCollection), name, editorID)
}

// UpdateCollection mocks base method
func (m *MockModeler) UpdateCollection(id int, name *string, editorID *int) error {
	ret := m.ctrl.Call(m, "UpdateCollection", id, name, editorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCollection indicates an expected call of UpdateCollection
func (mr *MockModelerMockRecorder) UpdateCollection(id, name, editorID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollection", reflect.TypeOf((*MockModeler)(nil).UpdateCollection), id, name, editorID)
}

// DeleteCollection mocks base method
func (m *MockModeler) DeleteCollection(id int) error {
	ret := m.ctrl.Call(m, "DeleteCollection", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection
func (mr *MockModelerMockRecorder) DeleteCollection(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockModeler)(nil).DeleteCollection), id)
}

// GetEditorByID mocks base method
func (m *MockModeler) GetEditorByID(id int) (*model.Editor, error) {
	ret := m.ctrl.Call(m, "GetEditorByID", id)
	ret0, _ := ret[0].(*model.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorByID indicates an expected call of GetEditorByID
func (mr *MockModelerMockRecorder) GetEditorByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorByID", reflect.TypeOf((*MockModeler)(nil).GetEditorByID), id)
}

// GetEditorByName mocks base method
func (m *MockModeler) GetEditorByName(name string) (*model.Editor, error) {
	ret := m.ctrl.Call(m, "GetEditorByName", name)
	ret0, _ := ret[0].(*model.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorByName indicates an expected call of GetEditorByName
func (mr *MockModelerMockRecorder) GetEditorByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorByName", reflect.TypeOf((*MockModeler)(nil).GetEditorByName), name)
}

// ListEditorsByIDs mocks base method
func (m *MockModeler) ListEditorsByIDs(printID, seriesID *int) ([]*model.Editor, error) {
	ret := m.ctrl.Call(m, "ListEditorsByIDs", printID, seriesID)
	ret0, _ := ret[0].([]*model.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditorsByIDs indicates an expected call of ListEditorsByIDs
func (mr *MockModelerMockRecorder) ListEditorsByIDs(printID, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditorsByIDs", reflect.TypeOf((*MockModeler)(nil).ListEditorsByIDs), printID, seriesID)
}

// InsertEditor mocks base method
func (m *MockModeler) InsertEditor(name string) (*model.Editor, error) {
	ret := m.ctrl.Call(m, "InsertEditor", name)
	ret0, _ := ret[0].(*model.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEditor indicates an expected call of InsertEditor
func (mr *MockModelerMockRecorder) InsertEditor(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEditor", reflect.TypeOf((*MockModeler)(nil).InsertEditor), name)
}

// UpdateEditor mocks base method
func (m *MockModeler) UpdateEditor(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateEditor", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEditor indicates an expected call of UpdateEditor
func (mr *MockModelerMockRecorder) UpdateEditor(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEditor", reflect.TypeOf((*MockModeler)(nil).UpdateEditor), id, name)
}

// DeleteEditor mocks base method
func (m *MockModeler) DeleteEditor(id int) error {
	ret := m.ctrl.Call(m, "DeleteEditor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEditor indicates an expected call of DeleteEditor
func (mr *MockModelerMockRecorder) DeleteEditor(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEditor", reflect.TypeOf((*MockModeler)(nil).DeleteEditor), id)
}

// GetPrintByID mocks base method
func (m *MockModeler) GetPrintByID(id int) (*model.Print, error) {
	ret := m.ctrl.Call(m, "GetPrintByID", id)
	ret0, _ := ret[0].(*model.Print)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrintByID indicates an expected call of GetPrintByID
func (mr *MockModelerMockRecorder) GetPrintByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrintByID", reflect.TypeOf((*MockModeler)(nil).GetPrintByID), id)
}

// GetPrintByName mocks base method
func (m *MockModeler) GetPrintByName(name string) (*model.Print, error) {
	ret := m.ctrl.Call(m, "GetPrintByName", name)
	ret0, _ := ret[0].(*model.Print)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrintByName indicates an expected call of GetPrintByName
func (mr *MockModelerMockRecorder) GetPrintByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrintByName", reflect.TypeOf((*MockModeler)(nil).GetPrintByName), name)
}

// ListPrintsByIDs mocks base method
func (m *MockModeler) ListPrintsByIDs(collectionID, editorID, seriesID *int) ([]*model.Print, error) {
	ret := m.ctrl.Call(m, "ListPrintsByIDs", collectionID, editorID, seriesID)
	ret0, _ := ret[0].([]*model.Print)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrintsByIDs indicates an expected call of ListPrintsByIDs
func (mr *MockModelerMockRecorder) ListPrintsByIDs(collectionID, editorID, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrintsByIDs", reflect.TypeOf((*MockModeler)(nil).ListPrintsByIDs), collectionID, editorID, seriesID)
}

// InsertPrint mocks base method
func (m *MockModeler) InsertPrint(name string) (*model.Print, error) {
	ret := m.ctrl.Call(m, "InsertPrint", name)
	ret0, _ := ret[0].(*model.Print)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPrint indicates an expected call of InsertPrint
func (mr *MockModelerMockRecorder) InsertPrint(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPrint", reflect.TypeOf((*MockModeler)(nil).InsertPrint), name)
}

// UpdatePrint mocks base method
func (m *MockModeler) UpdatePrint(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdatePrint", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePrint indicates an expected call of UpdatePrint
func (mr *MockModelerMockRecorder) UpdatePrint(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrint", reflect.TypeOf((*MockModeler)(nil).UpdatePrint), id, name)
}

// DeletePrint mocks base method
func (m *MockModeler) DeletePrint(id int) error {
	ret := m.ctrl.Call(m, "DeletePrint", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrint indicates an expected call of DeletePrint
func (mr *MockModelerMockRecorder) DeletePrint(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrint", reflect.TypeOf((*MockModeler)(nil).DeletePrint), id)
}

// GetRoleByID mocks base method
func (m *MockModeler) GetRoleByID(id int) (*model.Role, error) {
	ret := m.ctrl.Call(m, "GetRoleByID", id)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID
func (mr *MockModelerMockRecorder) GetRoleByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockModeler)(nil).GetRoleByID), id)
}

// GetRoleByName mocks base method
func (m *MockModeler) GetRoleByName(name string) (*model.Role, error) {
	ret := m.ctrl.Call(m, "GetRoleByName", name)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByName indicates an expected call of GetRoleByName
func (mr *MockModelerMockRecorder) GetRoleByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByName", reflect.TypeOf((*MockModeler)(nil).GetRoleByName), name)
}

// ListRolesByIDs mocks base method
func (m *MockModeler) ListRolesByIDs(authorID *int) ([]*model.Role, error) {
	ret := m.ctrl.Call(m, "ListRolesByIDs", authorID)
	ret0, _ := ret[0].([]*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolesByIDs indicates an expected call of ListRolesByIDs
func (mr *MockModelerMockRecorder) ListRolesByIDs(authorID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolesByIDs", reflect.TypeOf((*MockModeler)(nil).ListRolesByIDs), authorID)
}

// InsertRole mocks base method
func (m *MockModeler) InsertRole(name string) (*model.Role, error) {
	ret := m.ctrl.Call(m, "InsertRole", name)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRole indicates an expected call of InsertRole
func (mr *MockModelerMockRecorder) InsertRole(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRole", reflect.TypeOf((*MockModeler)(nil).InsertRole), name)
}

// UpdateRole mocks base method
func (m *MockModeler) UpdateRole(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateRole", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockModelerMockRecorder) UpdateRole(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockModeler)(nil).UpdateRole), id, name)
}

// DeleteRole mocks base method
func (m *MockModeler) DeleteRole(id int) error {
	ret := m.ctrl.Call(m, "DeleteRole", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockModelerMockRecorder) DeleteRole(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockModeler)(nil).DeleteRole), id)
}

// GetSeriesByID mocks base method
func (m *MockModeler) GetSeriesByID(id int) (*model.Series, error) {
	ret := m.ctrl.Call(m, "GetSeriesByID", id)
	ret0, _ := ret[0].(*model.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeriesByID indicates an expected call of GetSeriesByID
func (mr *MockModelerMockRecorder) GetSeriesByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeriesByID", reflect.TypeOf((*MockModeler)(nil).GetSeriesByID), id)
}

// GetSeriesByName mocks base method
func (m *MockModeler) GetSeriesByName(name string) (*model.Series, error) {
	ret := m.ctrl.Call(m, "GetSeriesByName", name)
	ret0, _ := ret[0].(*model.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeriesByName indicates an expected call of GetSeriesByName
func (mr *MockModelerMockRecorder) GetSeriesByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeriesByName", reflect.TypeOf((*MockModeler)(nil).GetSeriesByName), name)
}

// ListSeriesByIDs mocks base method
func (m *MockModeler) ListSeriesByIDs(authorID, categoryID, classID, roleID *int) ([]*model.Series, error) {
	ret := m.ctrl.Call(m, "ListSeriesByIDs", authorID, categoryID, classID, roleID)
	ret0, _ := ret[0].([]*model.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSeriesByIDs indicates an expected call of ListSeriesByIDs
func (mr *MockModelerMockRecorder) ListSeriesByIDs(authorID, categoryID, classID, roleID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeriesByIDs", reflect.TypeOf((*MockModeler)(nil).ListSeriesByIDs), authorID, categoryID, classID, roleID)
}

// ListSeriesByEditionIDs mocks base method
func (m *MockModeler) ListSeriesByEditionIDs(collectionID, editorID, printID *int) ([]*model.Series, error) {
	ret := m.ctrl.Call(m, "ListSeriesByEditionIDs", collectionID, editorID, printID)
	ret0, _ := ret[0].([]*model.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSeriesByEditionIDs indicates an expected call of ListSeriesByEditionIDs
func (mr *MockModelerMockRecorder) ListSeriesByEditionIDs(collectionID, editorID, printID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeriesByEditionIDs", reflect.TypeOf((*MockModeler)(nil).ListSeriesByEditionIDs), collectionID, editorID, printID)
}

// InsertSeries mocks base method
func (m *MockModeler) InsertSeries(name string, categoryID int) (*model.Series, error) {
	ret := m.ctrl.Call(m, "InsertSeries", name, categoryID)
	ret0, _ := ret[0].(*model.Series)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertSeries indicates an expected call of InsertSeries
func (mr *MockModelerMockRecorder) InsertSeries(name, categoryID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSeries", reflect.TypeOf((*MockModeler)(nil).InsertSeries), name, categoryID)
}

// UpdateSeries mocks base method
func (m *MockModeler) UpdateSeries(id int, name *string, categoryID *int) error {
	ret := m.ctrl.Call(m, "UpdateSeries", id, name, categoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeries indicates an expected call of UpdateSeries
func (mr *MockModelerMockRecorder) UpdateSeries(id, name, categoryID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeries", reflect.TypeOf((*MockModeler)(nil).UpdateSeries), id, name, categoryID)
}

// DeleteSeries mocks base method
func (m *MockModeler) DeleteSeries(id int) error {
	ret := m.ctrl.Call(m, "DeleteSeries", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeries indicates an expected call of DeleteSeries
func (mr *MockModelerMockRecorder) DeleteSeries(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeries", reflect.TypeOf((*MockModeler)(nil).DeleteSeries), id)
}

// GetAuthorshipByID mocks base method
func (m *MockModeler) GetAuthorshipByID(id int) (*model.Authorship, error) {
	ret := m.ctrl.Call(m, "GetAuthorshipByID", id)
	ret0, _ := ret[0].(*model.Authorship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorshipByID indicates an expected call of GetAuthorshipByID
func (mr *MockModelerMockRecorder) GetAuthorshipByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorshipByID", reflect.TypeOf((*MockModeler)(nil).GetAuthorshipByID), id)
}

// ListAuthorships mocks base method
func (m *MockModeler) ListAuthorships() ([]*model.Authorship, error) {
	ret := m.ctrl.Call(m, "ListAuthorships")
	ret0, _ := ret[0].([]*model.Authorship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthorships indicates an expected call of ListAuthorships
func (mr *MockModelerMockRecorder) ListAuthorships() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthorships", reflect.TypeOf((*MockModeler)(nil).ListAuthorships))
}

// ListAuthorshipsByBookID mocks base method
func (m *MockModeler) ListAuthorshipsByBookID(bookID int) ([]*model.Authorship, error) {
	ret := m.ctrl.Call(m, "ListAuthorshipsByBookID", bookID)
	ret0, _ := ret[0].([]*model.Authorship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthorshipsByBookID indicates an expected call of ListAuthorshipsByBookID
func (mr *MockModelerMockRecorder) ListAuthorshipsByBookID(bookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthorshipsByBookID", reflect.TypeOf((*MockModeler)(nil).ListAuthorshipsByBookID), bookID)
}

// InsertAuthorship mocks base method
func (m *MockModeler) InsertAuthorship(authorID, bookID, roleID int) (*model.Authorship, error) {
	ret := m.ctrl.Call(m, "InsertAuthorship", authorID, bookID, roleID)
	ret0, _ := ret[0].(*model.Authorship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAuthorship indicates an expected call of InsertAuthorship
func (mr *MockModelerMockRecorder) InsertAuthorship(authorID, bookID, roleID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAuthorship", reflect.TypeOf((*MockModeler)(nil).InsertAuthorship), authorID, bookID, roleID)
}

// DeleteAuthorship mocks base method
func (m *MockModeler) DeleteAuthorship(id int) error {
	ret := m.ctrl.Call(m, "DeleteAuthorship", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthorship indicates an expected call of DeleteAuthorship
func (mr *MockModelerMockRecorder) DeleteAuthorship(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorship", reflect.TypeOf((*MockModeler)(nil).DeleteAuthorship), id)
}

// GetClassification mocks base method
func (m *MockModeler) GetClassification(seriesID, classID int) (*model.Class, error) {
	ret := m.ctrl.Call(m, "GetClassification", seriesID, classID)
	ret0, _ := ret[0].(*model.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassification indicates an expected call of GetClassification
func (mr *MockModelerMockRecorder) GetClassification(seriesID, classID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassification", reflect.TypeOf((*MockModeler)(nil).GetClassification), seriesID, classID)
}

// InsertClassification mocks base method
func (m *MockModeler) InsertClassification(seriesID, classID int) (*model.Class, error) {
	ret := m.ctrl.Call(m, "InsertClassification", seriesID, classID)
	ret0, _ := ret[0].(*model.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertClassification indicates an expected call of InsertClassification
func (mr *MockModelerMockRecorder) InsertClassification(seriesID, classID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertClassification", reflect.TypeOf((*MockModeler)(nil).InsertClassification), seriesID, classID)
}

// DeleteClassification mocks base method
func (m *MockModeler) DeleteClassification(seriesID, classID int) error {
	ret := m.ctrl.Call(m, "DeleteClassification", seriesID, classID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClassification indicates an expected call of DeleteClassification
func (mr *MockModelerMockRecorder) DeleteClassification(seriesID, classID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClassification", reflect.TypeOf((*MockModeler)(nil).DeleteClassification), seriesID, classID)
}

// GetEditionByID mocks base method
func (m *MockModeler) GetEditionByID(id int) (*model.Edition, error) {
	ret := m.ctrl.Call(m, "GetEditionByID", id)
	ret0, _ := ret[0].(*model.Edition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditionByID indicates an expected call of GetEditionByID
func (mr *MockModelerMockRecorder) GetEditionByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditionByID", reflect.TypeOf((*MockModeler)(nil).GetEditionByID), id)
}

// ListEditions mocks base method
func (m *MockModeler) ListEditions() ([]*model.Edition, error) {
	ret := m.ctrl.Call(m, "ListEditions")
	ret0, _ := ret[0].([]*model.Edition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditions indicates an expected call of ListEditions
func (mr *MockModelerMockRecorder) ListEditions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditions", reflect.TypeOf((*MockModeler)(nil).ListEditions))
}

// InsertEdition mocks base method
func (m *MockModeler) InsertEdition(bookID, collectionID, printID int) (*model.Edition, error) {
	ret := m.ctrl.Call(m, "InsertEdition", bookID, collectionID, printID)
	ret0, _ := ret[0].(*model.Edition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEdition indicates an expected call of InsertEdition
func (mr *MockModelerMockRecorder) InsertEdition(bookID, collectionID, printID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEdition", reflect.TypeOf((*MockModeler)(nil).InsertEdition), bookID, collectionID, printID)
}

// DeleteEdition mocks base method
func (m *MockModeler) DeleteEdition(id int) error {
	ret := m.ctrl.Call(m, "DeleteEdition", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEdition indicates an expected call of DeleteEdition
func (mr *MockModelerMockRecorder) DeleteEdition(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEdition", reflect.TypeOf((*MockModeler)(nil).DeleteEdition), id)
}

// GetOwnership mocks base method
func (m *MockModeler) GetOwnership(userID, bookID int) (*model.Ownership, error) {
	ret := m.ctrl.Call(m, "GetOwnership", userID, bookID)
	ret0, _ := ret[0].(*model.Ownership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnership indicates an expected call of GetOwnership
func (mr *MockModelerMockRecorder) GetOwnership(userID, bookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnership", reflect.TypeOf((*MockModeler)(nil).GetOwnership), userID, bookID)
}

// ListOwnershipsByUserID mocks base method
func (m *MockModeler) ListOwnershipsByUserID(userID int) ([]*model.Ownership, error) {
	ret := m.ctrl.Call(m, "ListOwnershipsByUserID", userID)
	ret0, _ := ret[0].([]*model.Ownership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOwnershipsByUserID indicates an expected call of ListOwnershipsByUserID
func (mr *MockModelerMockRecorder) ListOwnershipsByUserID(userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOwnershipsByUserID", reflect.TypeOf((*MockModeler)(nil).ListOwnershipsByUserID), userID)
}

// InsertOwnership mocks base method
func (m *MockModeler) InsertOwnership(userID, bookID int) (*model.Ownership, error) {
	ret := m.ctrl.Call(m, "InsertOwnership", userID, bookID)
	ret0, _ := ret[0].(*model.Ownership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOwnership indicates an expected call of InsertOwnership
func (mr *MockModelerMockRecorder) InsertOwnership(userID, bookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOwnership", reflect.TypeOf((*MockModeler)(nil).InsertOwnership), userID, bookID)
}

// UpdateOwnership mocks base method
func (m *MockModeler) UpdateOwnership(userID, bookID int) error {
	ret := m.ctrl.Call(m, "UpdateOwnership", userID, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOwnership indicates an expected call of UpdateOwnership
func (mr *MockModelerMockRecorder) UpdateOwnership(userID, bookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOwnership", reflect.TypeOf((*MockModeler)(nil).UpdateOwnership), userID, bookID)
}

// DeleteOwnership mocks base method
func (m *MockModeler) DeleteOwnership(userID, bookID int) error {
	ret := m.ctrl.Call(m, "DeleteOwnership", userID, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOwnership indicates an expected call of DeleteOwnership
func (mr *MockModelerMockRecorder) DeleteOwnership(userID, bookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOwnership", reflect.TypeOf((*MockModeler)(nil).DeleteOwnership), userID, bookID)
}

// GetUserByID mocks base method
func (m *MockModeler) GetUserByID(id int) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockModelerMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockModeler)(nil).GetUserByID), id)
}

// GetUserByEmail mocks base method
func (m *MockModeler) GetUserByEmail(email string) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockModelerMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockModeler)(nil).GetUserByEmail), email)
}

// GetUserByNickname mocks base method
func (m *MockModeler) GetUserByNickname(nickname string) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetUserByNickname", nickname)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByNickname indicates an expected call of GetUserByNickname
func (mr *MockModelerMockRecorder) GetUserByNickname(nickname interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByNickname", reflect.TypeOf((*MockModeler)(nil).GetUserByNickname), nickname)
}

// GetUserByEmailOrNickname mocks base method
func (m *MockModeler) GetUserByEmailOrNickname(email, nickname string) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetUserByEmailOrNickname", email, nickname)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailOrNickname indicates an expected call of GetUserByEmailOrNickname
func (mr *MockModelerMockRecorder) GetUserByEmailOrNickname(email, nickname interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailOrNickname", reflect.TypeOf((*MockModeler)(nil).GetUserByEmailOrNickname), email, nickname)
}

// GetAuthenticatedUser mocks base method
func (m *MockModeler) GetAuthenticatedUser(login, password string) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetAuthenticatedUser", login, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticatedUser indicates an expected call of GetAuthenticatedUser
func (mr *MockModelerMockRecorder) GetAuthenticatedUser(login, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatedUser", reflect.TypeOf((*MockModeler)(nil).GetAuthenticatedUser), login, password)
}

// ListUsers mocks base method
func (m *MockModeler) ListUsers() ([]*model.User, error) {
	ret := m.ctrl.Call(m, "ListUsers")
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockModelerMockRecorder) ListUsers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockModeler)(nil).ListUsers))
}

// InsertUser mocks base method
func (m *MockModeler) InsertUser(email, nickname, password string) (*model.User, error) {
	ret := m.ctrl.Call(m, "InsertUser", email, nickname, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockModelerMockRecorder) InsertUser(email, nickname, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockModeler)(nil).InsertUser), email, nickname, password)
}

// UpdateUserNickname mocks base method
func (m *MockModeler) UpdateUserNickname(id int, nickname string) error {
	ret := m.ctrl.Call(m, "UpdateUserNickname", id, nickname)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserNickname indicates an expected call of UpdateUserNickname
func (mr *MockModelerMockRecorder) UpdateUserNickname(id, nickname interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserNickname", reflect.TypeOf((*MockModeler)(nil).UpdateUserNickname), id, nickname)
}

// UpdateUserPassword mocks base method
func (m *MockModeler) UpdateUserPassword(id int, password string) error {
	ret := m.ctrl.Call(m, "UpdateUserPassword", id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword
func (mr *MockModelerMockRecorder) UpdateUserPassword(id, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockModeler)(nil).UpdateUserPassword), id, password)
}

// UpdateUserActivation mocks base method
func (m *MockModeler) UpdateUserActivation(id int, activated bool) error {
	ret := m.ctrl.Call(m, "UpdateUserActivation", id, activated)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserActivation indicates an expected call of UpdateUserActivation
func (mr *MockModelerMockRecorder) UpdateUserActivation(id, activated interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserActivation", reflect.TypeOf((*MockModeler)(nil).UpdateUserActivation), id, activated)
}

// DeleteUser mocks base method
func (m *MockModeler) DeleteUser(id int) error {
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockModelerMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockModeler)(nil).DeleteUser), id)
}

// MockTokenHelper is a mock of TokenHelper interface
type MockTokenHelper struct {
	ctrl     *gomock.Controller
	recorder *MockTokenHelperMockRecorder
}

// MockTokenHelperMockRecorder is the mock recorder for MockTokenHelper
type MockTokenHelperMockRecorder struct {
	mock *MockTokenHelper
}

// NewMockTokenHelper creates a new mock instance
func NewMockTokenHelper(ctrl *gomock.Controller) *MockTokenHelper {
	mock := &MockTokenHelper{ctrl: ctrl}
	mock.recorder = &MockTokenHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTokenHelper) EXPECT() *MockTokenHelperMockRecorder {
	return m.recorder
}

// GetPasswordToken mocks base method
func (m *MockTokenHelper) GetPasswordToken(userID int64, email string) (string, error) {
	ret := m.ctrl.Call(m, "GetPasswordToken", userID, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordToken indicates an expected call of GetPasswordToken
func (mr *MockTokenHelperMockRecorder) GetPasswordToken(userID, email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordToken", reflect.TypeOf((*MockTokenHelper)(nil).GetPasswordToken), userID, email)
}

// ValidatePasswordToken mocks base method
func (m *MockTokenHelper) ValidatePasswordToken(token string) (int64, string, error) {
	ret := m.ctrl.Call(m, "ValidatePasswordToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidatePasswordToken indicates an expected call of ValidatePasswordToken
func (mr *MockTokenHelperMockRecorder) ValidatePasswordToken(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePasswordToken", reflect.TypeOf((*MockTokenHelper)(nil).ValidatePasswordToken), token)
}

// GetValidationToken mocks base method
func (m *MockTokenHelper) GetValidationToken(userID int64, email string) (string, error) {
	ret := m.ctrl.Call(m, "GetValidationToken", userID, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidationToken indicates an expected call of GetValidationToken
func (mr *MockTokenHelperMockRecorder) GetValidationToken(userID, email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidationToken", reflect.TypeOf((*MockTokenHelper)(nil).GetValidationToken), userID, email)
}

// ValidateValidationToken mocks base method
func (m *MockTokenHelper) ValidateValidationToken(token string) (int64, string, error) {
	ret := m.ctrl.Call(m, "ValidateValidationToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateValidationToken indicates an expected call of ValidateValidationToken
func (mr *MockTokenHelperMockRecorder) ValidateValidationToken(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateValidationToken", reflect.TypeOf((*MockTokenHelper)(nil).ValidateValidationToken), token)
}

// GetAccessToken mocks base method
func (m *MockTokenHelper) GetAccessToken(userID int64, isAdmin bool) (string, error) {
	ret := m.ctrl.Call(m, "GetAccessToken", userID, isAdmin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken
func (mr *MockTokenHelperMockRecorder) GetAccessToken(userID, isAdmin interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockTokenHelper)(nil).GetAccessToken), userID, isAdmin)
}

// GetRefreshToken mocks base method
func (m *MockTokenHelper) GetRefreshToken(userID int64, isAdmin bool) (string, error) {
	ret := m.ctrl.Call(m, "GetRefreshToken", userID, isAdmin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken
func (mr *MockTokenHelperMockRecorder) GetRefreshToken(userID, isAdmin interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockTokenHelper)(nil).GetRefreshToken), userID, isAdmin)
}

// ValidateRefreshToken mocks base method
func (m *MockTokenHelper) ValidateRefreshToken(token string) (int64, error) {
	ret := m.ctrl.Call(m, "ValidateRefreshToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken
func (mr *MockTokenHelperMockRecorder) ValidateRefreshToken(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockTokenHelper)(nil).ValidateRefreshToken), token)
}

// MockMailSender is a mock of MailSender interface
type MockMailSender struct {
	ctrl     *gomock.Controller
	recorder *MockMailSenderMockRecorder
}

// MockMailSenderMockRecorder is the mock recorder for MockMailSender
type MockMailSenderMockRecorder struct {
	mock *MockMailSender
}

// NewMockMailSender creates a new mock instance
func NewMockMailSender(ctrl *gomock.Controller) *MockMailSender {
	mock := &MockMailSender{ctrl: ctrl}
	mock.recorder = &MockMailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMailSender) EXPECT() *MockMailSenderMockRecorder {
	return m.recorder
}

// SendResetPasswordMail mocks base method
func (m *MockMailSender) SendResetPasswordMail(email, token string) error {
	ret := m.ctrl.Call(m, "SendResetPasswordMail", email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPasswordMail indicates an expected call of SendResetPasswordMail
func (mr *MockMailSenderMockRecorder) SendResetPasswordMail(email, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPasswordMail", reflect.TypeOf((*MockMailSender)(nil).SendResetPasswordMail), email, token)
}

// SendPasswordUpdatedMail mocks base method
func (m *MockMailSender) SendPasswordUpdatedMail(email string) error {
	ret := m.ctrl.Call(m, "SendPasswordUpdatedMail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPasswordUpdatedMail indicates an expected call of SendPasswordUpdatedMail
func (mr *MockMailSenderMockRecorder) SendPasswordUpdatedMail(email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordUpdatedMail", reflect.TypeOf((*MockMailSender)(nil).SendPasswordUpdatedMail), email)
}

// SendNewUserMail mocks base method
func (m *MockMailSender) SendNewUserMail(u *model.User, token string) error {
	ret := m.ctrl.Call(m, "SendNewUserMail", u, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNewUserMail indicates an expected call of SendNewUserMail
func (mr *MockMailSenderMockRecorder) SendNewUserMail(u, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNewUserMail", reflect.TypeOf((*MockMailSender)(nil).SendNewUserMail), u, token)
}

// SendActivationMail mocks base method
func (m *MockMailSender) SendActivationMail(u *model.User, token string) error {
	ret := m.ctrl.Call(m, "SendActivationMail", u, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendActivationMail indicates an expected call of SendActivationMail
func (mr *MockMailSenderMockRecorder) SendActivationMail(u, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendActivationMail", reflect.TypeOf((*MockMailSender)(nil).SendActivationMail), u, token)
}

// SendUserActivatedMail mocks base method
func (m *MockMailSender) SendUserActivatedMail(email string) error {
	ret := m.ctrl.Call(m, "SendUserActivatedMail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUserActivatedMail indicates an expected call of SendUserActivatedMail
func (mr *MockMailSenderMockRecorder) SendUserActivatedMail(email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserActivatedMail", reflect.TypeOf((*MockMailSender)(nil).SendUserActivatedMail), email)
}

// MockAPIHelper is a mock of APIHelper interface
type MockAPIHelper struct {
	ctrl     *gomock.Controller
	recorder *MockAPIHelperMockRecorder
}

// MockAPIHelperMockRecorder is the mock recorder for MockAPIHelper
type MockAPIHelperMockRecorder struct {
	mock *MockAPIHelper
}

// NewMockAPIHelper creates a new mock instance
func NewMockAPIHelper(ctrl *gomock.Controller) *MockAPIHelper {
	mock := &MockAPIHelper{ctrl: ctrl}
	mock.recorder = &MockAPIHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIHelper) EXPECT() *MockAPIHelperMockRecorder {
	return m.recorder
}

// GetBookDetail mocks base method
func (m *MockAPIHelper) GetBookDetail(isbn string) (*api.BookDetail, error) {
	ret := m.ctrl.Call(m, "GetBookDetail", isbn)
	ret0, _ := ret[0].(*api.BookDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookDetail indicates an expected call of GetBookDetail
func (mr *MockAPIHelperMockRecorder) GetBookDetail(isbn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookDetail", reflect.TypeOf((*MockAPIHelper)(nil).GetBookDetail), isbn)
}

// MockLister is a mock of Lister interface
type MockLister struct {
	ctrl     *gomock.Controller
	recorder *MockListerMockRecorder
}

// MockListerMockRecorder is the mock recorder for MockLister
type MockListerMockRecorder struct {
	mock *MockLister
}

// NewMockLister creates a new mock instance
func NewMockLister(ctrl *gomock.Controller) *MockLister {
	mock := &MockLister{ctrl: ctrl}
	mock.recorder = &MockListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLister) EXPECT() *MockListerMockRecorder {
	return m.recorder
}

// ListAuthors mocks base method
func (m *MockLister) ListAuthors(ctx context.Context, fm Fmodeler, rCtx authorsResponse, categoryID, roleID *int) error {
	ret := m.ctrl.Call(m, "ListAuthors", ctx, fm, rCtx, categoryID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAuthors indicates an expected call of ListAuthors
func (mr *MockListerMockRecorder) ListAuthors(ctx, fm, rCtx, categoryID, roleID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthors", reflect.TypeOf((*MockLister)(nil).ListAuthors), ctx, fm, rCtx, categoryID, roleID)
}

// ListBooks mocks base method
func (m *MockLister) ListBooks(ctx context.Context, fm Fmodeler, rCtx booksResponse, collectionID, editorID, printID, seriesID *int) error {
	ret := m.ctrl.Call(m, "ListBooks", ctx, fm, rCtx, collectionID, editorID, printID, seriesID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBooks indicates an expected call of ListBooks
func (mr *MockListerMockRecorder) ListBooks(ctx, fm, rCtx, collectionID, editorID, printID, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockLister)(nil).ListBooks), ctx, fm, rCtx, collectionID, editorID, printID, seriesID)
}

// ListCategories mocks base method
func (m *MockLister) ListCategories(ctx context.Context, fm Fmodeler, rCtx categoriesResponse, authorID, classID *int) error {
	ret := m.ctrl.Call(m, "ListCategories", ctx, fm, rCtx, authorID, classID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCategories indicates an expected call of ListCategories
func (mr *MockListerMockRecorder) ListCategories(ctx, fm, rCtx, authorID, classID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockLister)(nil).ListCategories), ctx, fm, rCtx, authorID, classID)
}

// ListClasses mocks base method
func (m *MockLister) ListClasses(ctx context.Context, fm Fmodeler, rCtx classesResponse, authorID, categoryID, seriesID *int) error {
	ret := m.ctrl.Call(m, "ListClasses", ctx, fm, rCtx, authorID, categoryID, seriesID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListClasses indicates an expected call of ListClasses
func (mr *MockListerMockRecorder) ListClasses(ctx, fm, rCtx, authorID, categoryID, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClasses", reflect.TypeOf((*MockLister)(nil).ListClasses), ctx, fm, rCtx, authorID, categoryID, seriesID)
}

// ListCollections mocks base method
func (m *MockLister) ListCollections(ctx context.Context, fm Fmodeler, rCtx collectionsResponse, editorID, printID, seriesID *int) error {
	ret := m.ctrl.Call(m, "ListCollections", ctx, fm, rCtx, editorID, printID, seriesID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCollections indicates an expected call of ListCollections
func (mr *MockListerMockRecorder) ListCollections(ctx, fm, rCtx, editorID, printID, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockLister)(nil).ListCollections), ctx, fm, rCtx, editorID, printID, seriesID)
}

// ListEditors mocks base method
func (m *MockLister) ListEditors(ctx context.Context, fm Fmodeler, rCtx editorsResponse, printID, seriesID *int) error {
	ret := m.ctrl.Call(m, "ListEditors", ctx, fm, rCtx, printID, seriesID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListEditors indicates an expected call of ListEditors
func (mr *MockListerMockRecorder) ListEditors(ctx, fm, rCtx, printID, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditors", reflect.TypeOf((*MockLister)(nil).ListEditors), ctx, fm, rCtx, printID, seriesID)
}

// ListPrints mocks base method
func (m *MockLister) ListPrints(ctx context.Context, fm Fmodeler, rCtx printsResponse, collectionID, editorID, seriesID *int) error {
	ret := m.ctrl.Call(m, "ListPrints", ctx, fm, rCtx, collectionID, editorID, seriesID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPrints indicates an expected call of ListPrints
func (mr *MockListerMockRecorder) ListPrints(ctx, fm, rCtx, collectionID, editorID, seriesID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrints", reflect.TypeOf((*MockLister)(nil).ListPrints), ctx, fm, rCtx, collectionID, editorID, seriesID)
}

// ListSeries mocks base method
func (m *MockLister) ListSeries(ctx context.Context, fm Fmodeler, rCtx seriesResponse, authorID, categoryID, classID, roleID *int) error {
	ret := m.ctrl.Call(m, "ListSeries", ctx, fm, rCtx, authorID, categoryID, classID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSeries indicates an expected call of ListSeries
func (mr *MockListerMockRecorder) ListSeries(ctx, fm, rCtx, authorID, categoryID, classID, roleID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeries", reflect.TypeOf((*MockLister)(nil).ListSeries), ctx, fm, rCtx, authorID, categoryID, classID, roleID)
}

// ListSeriesByEditionIDs mocks base method
func (m *MockLister) ListSeriesByEditionIDs(ctx context.Context, fm Fmodeler, rCtx seriesResponse, collectionID, editorID, printID *int) error {
	ret := m.ctrl.Call(m, "ListSeriesByEditionIDs", ctx, fm, rCtx, collectionID, editorID, printID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSeriesByEditionIDs indicates an expected call of ListSeriesByEditionIDs
func (mr *MockListerMockRecorder) ListSeriesByEditionIDs(ctx, fm, rCtx, collectionID, editorID, printID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSeriesByEditionIDs", reflect.TypeOf((*MockLister)(nil).ListSeriesByEditionIDs), ctx, fm, rCtx, collectionID, editorID, printID)
}
