// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package controllers is a generated GoMock package.
package controllers

import (
	model "github.com/NBR41/go-testgoa/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockModeler is a mock of Modeler interface
type MockModeler struct {
	ctrl     *gomock.Controller
	recorder *MockModelerMockRecorder
}

// MockModelerMockRecorder is the mock recorder for MockModeler
type MockModelerMockRecorder struct {
	mock *MockModeler
}

// NewMockModeler creates a new mock instance
func NewMockModeler(ctrl *gomock.Controller) *MockModeler {
	mock := &MockModeler{ctrl: ctrl}
	mock.recorder = &MockModelerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModeler) EXPECT() *MockModelerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockModeler) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockModelerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockModeler)(nil).Close))
}

// GetAuthorByID mocks base method
func (m *MockModeler) GetAuthorByID(id int) (*model.Author, error) {
	ret := m.ctrl.Call(m, "GetAuthorByID", id)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByID indicates an expected call of GetAuthorByID
func (mr *MockModelerMockRecorder) GetAuthorByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByID", reflect.TypeOf((*MockModeler)(nil).GetAuthorByID), id)
}

// GetAuthorByName mocks base method
func (m *MockModeler) GetAuthorByName(name string) (*model.Author, error) {
	ret := m.ctrl.Call(m, "GetAuthorByName", name)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByName indicates an expected call of GetAuthorByName
func (mr *MockModelerMockRecorder) GetAuthorByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByName", reflect.TypeOf((*MockModeler)(nil).GetAuthorByName), name)
}

// ListAuthors mocks base method
func (m *MockModeler) ListAuthors() ([]*model.Author, error) {
	ret := m.ctrl.Call(m, "ListAuthors")
	ret0, _ := ret[0].([]*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthors indicates an expected call of ListAuthors
func (mr *MockModelerMockRecorder) ListAuthors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthors", reflect.TypeOf((*MockModeler)(nil).ListAuthors))
}

// InsertAuthor mocks base method
func (m *MockModeler) InsertAuthor(name string) (*model.Author, error) {
	ret := m.ctrl.Call(m, "InsertAuthor", name)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAuthor indicates an expected call of InsertAuthor
func (mr *MockModelerMockRecorder) InsertAuthor(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAuthor", reflect.TypeOf((*MockModeler)(nil).InsertAuthor), name)
}

// UpdateAuthor mocks base method
func (m *MockModeler) UpdateAuthor(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateAuthor", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthor indicates an expected call of UpdateAuthor
func (mr *MockModelerMockRecorder) UpdateAuthor(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockModeler)(nil).UpdateAuthor), id, name)
}

// DeleteAuthor mocks base method
func (m *MockModeler) DeleteAuthor(id int) error {
	ret := m.ctrl.Call(m, "DeleteAuthor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor
func (mr *MockModelerMockRecorder) DeleteAuthor(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockModeler)(nil).DeleteAuthor), id)
}

// GetBookByID mocks base method
func (m *MockModeler) GetBookByID(id int) (*model.Book, error) {
	ret := m.ctrl.Call(m, "GetBookByID", id)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID
func (mr *MockModelerMockRecorder) GetBookByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockModeler)(nil).GetBookByID), id)
}

// GetBookByISBN mocks base method
func (m *MockModeler) GetBookByISBN(isbn string) (*model.Book, error) {
	ret := m.ctrl.Call(m, "GetBookByISBN", isbn)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByISBN indicates an expected call of GetBookByISBN
func (mr *MockModelerMockRecorder) GetBookByISBN(isbn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByISBN", reflect.TypeOf((*MockModeler)(nil).GetBookByISBN), isbn)
}

// GetBookByName mocks base method
func (m *MockModeler) GetBookByName(name string) (*model.Book, error) {
	ret := m.ctrl.Call(m, "GetBookByName", name)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByName indicates an expected call of GetBookByName
func (mr *MockModelerMockRecorder) GetBookByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByName", reflect.TypeOf((*MockModeler)(nil).GetBookByName), name)
}

// ListBooks mocks base method
func (m *MockModeler) ListBooks() ([]model.Book, error) {
	ret := m.ctrl.Call(m, "ListBooks")
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks
func (mr *MockModelerMockRecorder) ListBooks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockModeler)(nil).ListBooks))
}

// InsertBook mocks base method
func (m *MockModeler) InsertBook(isbn, name string) (*model.Book, error) {
	ret := m.ctrl.Call(m, "InsertBook", isbn, name)
	ret0, _ := ret[0].(*model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBook indicates an expected call of InsertBook
func (mr *MockModelerMockRecorder) InsertBook(isbn, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBook", reflect.TypeOf((*MockModeler)(nil).InsertBook), isbn, name)
}

// UpdateBook mocks base method
func (m *MockModeler) UpdateBook(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateBook", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook
func (mr *MockModelerMockRecorder) UpdateBook(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockModeler)(nil).UpdateBook), id, name)
}

// DeleteBook mocks base method
func (m *MockModeler) DeleteBook(id int) error {
	ret := m.ctrl.Call(m, "DeleteBook", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook
func (mr *MockModelerMockRecorder) DeleteBook(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockModeler)(nil).DeleteBook), id)
}

// GetCategoryByID mocks base method
func (m *MockModeler) GetCategoryByID(id int) (*model.Category, error) {
	ret := m.ctrl.Call(m, "GetCategoryByID", id)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID
func (mr *MockModelerMockRecorder) GetCategoryByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockModeler)(nil).GetCategoryByID), id)
}

// GetCategoryByName mocks base method
func (m *MockModeler) GetCategoryByName(name string) (*model.Category, error) {
	ret := m.ctrl.Call(m, "GetCategoryByName", name)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName
func (mr *MockModelerMockRecorder) GetCategoryByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockModeler)(nil).GetCategoryByName), name)
}

// ListCategories mocks base method
func (m *MockModeler) ListCategories() ([]*model.Category, error) {
	ret := m.ctrl.Call(m, "ListCategories")
	ret0, _ := ret[0].([]*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories
func (mr *MockModelerMockRecorder) ListCategories() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockModeler)(nil).ListCategories))
}

// InsertCategory mocks base method
func (m *MockModeler) InsertCategory(name string) (*model.Category, error) {
	ret := m.ctrl.Call(m, "InsertCategory", name)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCategory indicates an expected call of InsertCategory
func (mr *MockModelerMockRecorder) InsertCategory(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCategory", reflect.TypeOf((*MockModeler)(nil).InsertCategory), name)
}

// UpdateCategory mocks base method
func (m *MockModeler) UpdateCategory(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateCategory", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockModelerMockRecorder) UpdateCategory(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockModeler)(nil).UpdateCategory), id, name)
}

// DeleteCategory mocks base method
func (m *MockModeler) DeleteCategory(id int) error {
	ret := m.ctrl.Call(m, "DeleteCategory", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory
func (mr *MockModelerMockRecorder) DeleteCategory(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockModeler)(nil).DeleteCategory), id)
}

// GetEditionTypeByID mocks base method
func (m *MockModeler) GetEditionTypeByID(id int) (*model.EditionType, error) {
	ret := m.ctrl.Call(m, "GetEditionTypeByID", id)
	ret0, _ := ret[0].(*model.EditionType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditionTypeByID indicates an expected call of GetEditionTypeByID
func (mr *MockModelerMockRecorder) GetEditionTypeByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditionTypeByID", reflect.TypeOf((*MockModeler)(nil).GetEditionTypeByID), id)
}

// GetEditionTypeByName mocks base method
func (m *MockModeler) GetEditionTypeByName(name string) (*model.EditionType, error) {
	ret := m.ctrl.Call(m, "GetEditionTypeByName", name)
	ret0, _ := ret[0].(*model.EditionType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditionTypeByName indicates an expected call of GetEditionTypeByName
func (mr *MockModelerMockRecorder) GetEditionTypeByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditionTypeByName", reflect.TypeOf((*MockModeler)(nil).GetEditionTypeByName), name)
}

// ListEditionTypes mocks base method
func (m *MockModeler) ListEditionTypes() ([]*model.EditionType, error) {
	ret := m.ctrl.Call(m, "ListEditionTypes")
	ret0, _ := ret[0].([]*model.EditionType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditionTypes indicates an expected call of ListEditionTypes
func (mr *MockModelerMockRecorder) ListEditionTypes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditionTypes", reflect.TypeOf((*MockModeler)(nil).ListEditionTypes))
}

// InsertEditionType mocks base method
func (m *MockModeler) InsertEditionType(name string) (*model.EditionType, error) {
	ret := m.ctrl.Call(m, "InsertEditionType", name)
	ret0, _ := ret[0].(*model.EditionType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEditionType indicates an expected call of InsertEditionType
func (mr *MockModelerMockRecorder) InsertEditionType(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEditionType", reflect.TypeOf((*MockModeler)(nil).InsertEditionType), name)
}

// UpdateEditionType mocks base method
func (m *MockModeler) UpdateEditionType(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateEditionType", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEditionType indicates an expected call of UpdateEditionType
func (mr *MockModelerMockRecorder) UpdateEditionType(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEditionType", reflect.TypeOf((*MockModeler)(nil).UpdateEditionType), id, name)
}

// DeleteEditionType mocks base method
func (m *MockModeler) DeleteEditionType(id int) error {
	ret := m.ctrl.Call(m, "DeleteEditionType", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEditionType indicates an expected call of DeleteEditionType
func (mr *MockModelerMockRecorder) DeleteEditionType(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEditionType", reflect.TypeOf((*MockModeler)(nil).DeleteEditionType), id)
}

// GetEditorByID mocks base method
func (m *MockModeler) GetEditorByID(id int) (*model.Editor, error) {
	ret := m.ctrl.Call(m, "GetEditorByID", id)
	ret0, _ := ret[0].(*model.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorByID indicates an expected call of GetEditorByID
func (mr *MockModelerMockRecorder) GetEditorByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorByID", reflect.TypeOf((*MockModeler)(nil).GetEditorByID), id)
}

// GetEditorByName mocks base method
func (m *MockModeler) GetEditorByName(name string) (*model.Editor, error) {
	ret := m.ctrl.Call(m, "GetEditorByName", name)
	ret0, _ := ret[0].(*model.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditorByName indicates an expected call of GetEditorByName
func (mr *MockModelerMockRecorder) GetEditorByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditorByName", reflect.TypeOf((*MockModeler)(nil).GetEditorByName), name)
}

// ListEditors mocks base method
func (m *MockModeler) ListEditors() ([]*model.Editor, error) {
	ret := m.ctrl.Call(m, "ListEditors")
	ret0, _ := ret[0].([]*model.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEditors indicates an expected call of ListEditors
func (mr *MockModelerMockRecorder) ListEditors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEditors", reflect.TypeOf((*MockModeler)(nil).ListEditors))
}

// InsertEditor mocks base method
func (m *MockModeler) InsertEditor(name string) (*model.Editor, error) {
	ret := m.ctrl.Call(m, "InsertEditor", name)
	ret0, _ := ret[0].(*model.Editor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEditor indicates an expected call of InsertEditor
func (mr *MockModelerMockRecorder) InsertEditor(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEditor", reflect.TypeOf((*MockModeler)(nil).InsertEditor), name)
}

// UpdateEditor mocks base method
func (m *MockModeler) UpdateEditor(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateEditor", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEditor indicates an expected call of UpdateEditor
func (mr *MockModelerMockRecorder) UpdateEditor(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEditor", reflect.TypeOf((*MockModeler)(nil).UpdateEditor), id, name)
}

// DeleteEditor mocks base method
func (m *MockModeler) DeleteEditor(id int) error {
	ret := m.ctrl.Call(m, "DeleteEditor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEditor indicates an expected call of DeleteEditor
func (mr *MockModelerMockRecorder) DeleteEditor(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEditor", reflect.TypeOf((*MockModeler)(nil).DeleteEditor), id)
}

// GetGenreByID mocks base method
func (m *MockModeler) GetGenreByID(id int) (*model.Genre, error) {
	ret := m.ctrl.Call(m, "GetGenreByID", id)
	ret0, _ := ret[0].(*model.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreByID indicates an expected call of GetGenreByID
func (mr *MockModelerMockRecorder) GetGenreByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreByID", reflect.TypeOf((*MockModeler)(nil).GetGenreByID), id)
}

// GetGenreByName mocks base method
func (m *MockModeler) GetGenreByName(name string) (*model.Genre, error) {
	ret := m.ctrl.Call(m, "GetGenreByName", name)
	ret0, _ := ret[0].(*model.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenreByName indicates an expected call of GetGenreByName
func (mr *MockModelerMockRecorder) GetGenreByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenreByName", reflect.TypeOf((*MockModeler)(nil).GetGenreByName), name)
}

// ListGenres mocks base method
func (m *MockModeler) ListGenres() ([]*model.Genre, error) {
	ret := m.ctrl.Call(m, "ListGenres")
	ret0, _ := ret[0].([]*model.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGenres indicates an expected call of ListGenres
func (mr *MockModelerMockRecorder) ListGenres() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGenres", reflect.TypeOf((*MockModeler)(nil).ListGenres))
}

// InsertGenre mocks base method
func (m *MockModeler) InsertGenre(name string) (*model.Genre, error) {
	ret := m.ctrl.Call(m, "InsertGenre", name)
	ret0, _ := ret[0].(*model.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertGenre indicates an expected call of InsertGenre
func (mr *MockModelerMockRecorder) InsertGenre(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGenre", reflect.TypeOf((*MockModeler)(nil).InsertGenre), name)
}

// UpdateGenre mocks base method
func (m *MockModeler) UpdateGenre(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateGenre", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGenre indicates an expected call of UpdateGenre
func (mr *MockModelerMockRecorder) UpdateGenre(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenre", reflect.TypeOf((*MockModeler)(nil).UpdateGenre), id, name)
}

// DeleteGenre mocks base method
func (m *MockModeler) DeleteGenre(id int) error {
	ret := m.ctrl.Call(m, "DeleteGenre", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGenre indicates an expected call of DeleteGenre
func (mr *MockModelerMockRecorder) DeleteGenre(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGenre", reflect.TypeOf((*MockModeler)(nil).DeleteGenre), id)
}

// GetOwnership mocks base method
func (m *MockModeler) GetOwnership(userID, bookID int) (*model.Ownership, error) {
	ret := m.ctrl.Call(m, "GetOwnership", userID, bookID)
	ret0, _ := ret[0].(*model.Ownership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnership indicates an expected call of GetOwnership
func (mr *MockModelerMockRecorder) GetOwnership(userID, bookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnership", reflect.TypeOf((*MockModeler)(nil).GetOwnership), userID, bookID)
}

// ListOwnershipsByUserID mocks base method
func (m *MockModeler) ListOwnershipsByUserID(userID int) ([]*model.Ownership, error) {
	ret := m.ctrl.Call(m, "ListOwnershipsByUserID", userID)
	ret0, _ := ret[0].([]*model.Ownership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOwnershipsByUserID indicates an expected call of ListOwnershipsByUserID
func (mr *MockModelerMockRecorder) ListOwnershipsByUserID(userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOwnershipsByUserID", reflect.TypeOf((*MockModeler)(nil).ListOwnershipsByUserID), userID)
}

// InsertOwnership mocks base method
func (m *MockModeler) InsertOwnership(userID, bookID int) (*model.Ownership, error) {
	ret := m.ctrl.Call(m, "InsertOwnership", userID, bookID)
	ret0, _ := ret[0].(*model.Ownership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOwnership indicates an expected call of InsertOwnership
func (mr *MockModelerMockRecorder) InsertOwnership(userID, bookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOwnership", reflect.TypeOf((*MockModeler)(nil).InsertOwnership), userID, bookID)
}

// UpdateOwnership mocks base method
func (m *MockModeler) UpdateOwnership(userID, bookID int) error {
	ret := m.ctrl.Call(m, "UpdateOwnership", userID, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOwnership indicates an expected call of UpdateOwnership
func (mr *MockModelerMockRecorder) UpdateOwnership(userID, bookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOwnership", reflect.TypeOf((*MockModeler)(nil).UpdateOwnership), userID, bookID)
}

// DeleteOwnership mocks base method
func (m *MockModeler) DeleteOwnership(userID, bookID int) error {
	ret := m.ctrl.Call(m, "DeleteOwnership", userID, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOwnership indicates an expected call of DeleteOwnership
func (mr *MockModelerMockRecorder) DeleteOwnership(userID, bookID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOwnership", reflect.TypeOf((*MockModeler)(nil).DeleteOwnership), userID, bookID)
}

// GetRoleByID mocks base method
func (m *MockModeler) GetRoleByID(id int) (*model.Role, error) {
	ret := m.ctrl.Call(m, "GetRoleByID", id)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID
func (mr *MockModelerMockRecorder) GetRoleByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockModeler)(nil).GetRoleByID), id)
}

// GetRoleByName mocks base method
func (m *MockModeler) GetRoleByName(name string) (*model.Role, error) {
	ret := m.ctrl.Call(m, "GetRoleByName", name)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByName indicates an expected call of GetRoleByName
func (mr *MockModelerMockRecorder) GetRoleByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByName", reflect.TypeOf((*MockModeler)(nil).GetRoleByName), name)
}

// ListRoles mocks base method
func (m *MockModeler) ListRoles() ([]*model.Role, error) {
	ret := m.ctrl.Call(m, "ListRoles")
	ret0, _ := ret[0].([]*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles
func (mr *MockModelerMockRecorder) ListRoles() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockModeler)(nil).ListRoles))
}

// InsertRole mocks base method
func (m *MockModeler) InsertRole(name string) (*model.Role, error) {
	ret := m.ctrl.Call(m, "InsertRole", name)
	ret0, _ := ret[0].(*model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRole indicates an expected call of InsertRole
func (mr *MockModelerMockRecorder) InsertRole(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRole", reflect.TypeOf((*MockModeler)(nil).InsertRole), name)
}

// UpdateRole mocks base method
func (m *MockModeler) UpdateRole(id int, name string) error {
	ret := m.ctrl.Call(m, "UpdateRole", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole
func (mr *MockModelerMockRecorder) UpdateRole(id, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockModeler)(nil).UpdateRole), id, name)
}

// DeleteRole mocks base method
func (m *MockModeler) DeleteRole(id int) error {
	ret := m.ctrl.Call(m, "DeleteRole", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockModelerMockRecorder) DeleteRole(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockModeler)(nil).DeleteRole), id)
}

// GetCollectionByID mocks base method
func (m *MockModeler) GetCollectionByID(id int) (*model.Collection, error) {
	ret := m.ctrl.Call(m, "GetCollectionByID", id)
	ret0, _ := ret[0].(*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionByID indicates an expected call of GetCollectionByID
func (mr *MockModelerMockRecorder) GetCollectionByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionByID", reflect.TypeOf((*MockModeler)(nil).GetCollectionByID), id)
}

// GetCollectionByName mocks base method
func (m *MockModeler) GetCollectionByName(name string) (*model.Collection, error) {
	ret := m.ctrl.Call(m, "GetCollectionByName", name)
	ret0, _ := ret[0].(*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionByName indicates an expected call of GetCollectionByName
func (mr *MockModelerMockRecorder) GetCollectionByName(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionByName", reflect.TypeOf((*MockModeler)(nil).GetCollectionByName), name)
}

// InsertCollection mocks base method
func (m *MockModeler) InsertCollection(name string, editorID int) (*model.Collection, error) {
	ret := m.ctrl.Call(m, "InsertCollection", name, editorID)
	ret0, _ := ret[0].(*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCollection indicates an expected call of InsertCollection
func (mr *MockModelerMockRecorder) InsertCollection(name, editorID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCollection", reflect.TypeOf((*MockModeler)(nil).InsertCollection), name, editorID)
}

// UpdateCollection mocks base method
func (m *MockModeler) UpdateCollection(name *string, editorID *int) error {
	ret := m.ctrl.Call(m, "UpdateCollection", name, editorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCollection indicates an expected call of UpdateCollection
func (mr *MockModelerMockRecorder) UpdateCollection(name, editorID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCollection", reflect.TypeOf((*MockModeler)(nil).UpdateCollection), name, editorID)
}

// DeleteCollection mocks base method
func (m *MockModeler) DeleteCollection(id int) error {
	ret := m.ctrl.Call(m, "DeleteCollection", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection
func (mr *MockModelerMockRecorder) DeleteCollection(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockModeler)(nil).DeleteCollection), id)
}

// ListCollections mocks base method
func (m *MockModeler) ListCollections() ([]*model.Collection, error) {
	ret := m.ctrl.Call(m, "ListCollections")
	ret0, _ := ret[0].([]*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollections indicates an expected call of ListCollections
func (mr *MockModelerMockRecorder) ListCollections() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollections", reflect.TypeOf((*MockModeler)(nil).ListCollections))
}

// ListCollectionsByEditorID mocks base method
func (m *MockModeler) ListCollectionsByEditorID(id int) ([]*model.Collection, error) {
	ret := m.ctrl.Call(m, "ListCollectionsByEditorID", id)
	ret0, _ := ret[0].([]*model.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCollectionsByEditorID indicates an expected call of ListCollectionsByEditorID
func (mr *MockModelerMockRecorder) ListCollectionsByEditorID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollectionsByEditorID", reflect.TypeOf((*MockModeler)(nil).ListCollectionsByEditorID), id)
}

// ListUsers mocks base method
func (m *MockModeler) ListUsers() ([]model.User, error) {
	ret := m.ctrl.Call(m, "ListUsers")
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (mr *MockModelerMockRecorder) ListUsers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockModeler)(nil).ListUsers))
}

// GetUserByID mocks base method
func (m *MockModeler) GetUserByID(id int) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockModelerMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockModeler)(nil).GetUserByID), id)
}

// GetUserByEmail mocks base method
func (m *MockModeler) GetUserByEmail(email string) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockModelerMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockModeler)(nil).GetUserByEmail), email)
}

// GetUserByNickname mocks base method
func (m *MockModeler) GetUserByNickname(nickname string) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetUserByNickname", nickname)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByNickname indicates an expected call of GetUserByNickname
func (mr *MockModelerMockRecorder) GetUserByNickname(nickname interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByNickname", reflect.TypeOf((*MockModeler)(nil).GetUserByNickname), nickname)
}

// GetUserByEmailOrNickname mocks base method
func (m *MockModeler) GetUserByEmailOrNickname(email, nickname string) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetUserByEmailOrNickname", email, nickname)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmailOrNickname indicates an expected call of GetUserByEmailOrNickname
func (mr *MockModelerMockRecorder) GetUserByEmailOrNickname(email, nickname interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailOrNickname", reflect.TypeOf((*MockModeler)(nil).GetUserByEmailOrNickname), email, nickname)
}

// GetAuthenticatedUser mocks base method
func (m *MockModeler) GetAuthenticatedUser(login, password string) (*model.User, error) {
	ret := m.ctrl.Call(m, "GetAuthenticatedUser", login, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticatedUser indicates an expected call of GetAuthenticatedUser
func (mr *MockModelerMockRecorder) GetAuthenticatedUser(login, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatedUser", reflect.TypeOf((*MockModeler)(nil).GetAuthenticatedUser), login, password)
}

// InsertUser mocks base method
func (m *MockModeler) InsertUser(email, nickname, password string) (*model.User, error) {
	ret := m.ctrl.Call(m, "InsertUser", email, nickname, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockModelerMockRecorder) InsertUser(email, nickname, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockModeler)(nil).InsertUser), email, nickname, password)
}

// UpdateUserNickname mocks base method
func (m *MockModeler) UpdateUserNickname(id int, nickname string) error {
	ret := m.ctrl.Call(m, "UpdateUserNickname", id, nickname)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserNickname indicates an expected call of UpdateUserNickname
func (mr *MockModelerMockRecorder) UpdateUserNickname(id, nickname interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserNickname", reflect.TypeOf((*MockModeler)(nil).UpdateUserNickname), id, nickname)
}

// UpdateUserPassword mocks base method
func (m *MockModeler) UpdateUserPassword(id int, password string) error {
	ret := m.ctrl.Call(m, "UpdateUserPassword", id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword
func (mr *MockModelerMockRecorder) UpdateUserPassword(id, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockModeler)(nil).UpdateUserPassword), id, password)
}

// UpdateUserActivation mocks base method
func (m *MockModeler) UpdateUserActivation(id int, activated bool) error {
	ret := m.ctrl.Call(m, "UpdateUserActivation", id, activated)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserActivation indicates an expected call of UpdateUserActivation
func (mr *MockModelerMockRecorder) UpdateUserActivation(id, activated interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserActivation", reflect.TypeOf((*MockModeler)(nil).UpdateUserActivation), id, activated)
}

// DeleteUser mocks base method
func (m *MockModeler) DeleteUser(id int) error {
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockModelerMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockModeler)(nil).DeleteUser), id)
}

// MockTokenHelper is a mock of TokenHelper interface
type MockTokenHelper struct {
	ctrl     *gomock.Controller
	recorder *MockTokenHelperMockRecorder
}

// MockTokenHelperMockRecorder is the mock recorder for MockTokenHelper
type MockTokenHelperMockRecorder struct {
	mock *MockTokenHelper
}

// NewMockTokenHelper creates a new mock instance
func NewMockTokenHelper(ctrl *gomock.Controller) *MockTokenHelper {
	mock := &MockTokenHelper{ctrl: ctrl}
	mock.recorder = &MockTokenHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTokenHelper) EXPECT() *MockTokenHelperMockRecorder {
	return m.recorder
}

// GetPasswordToken mocks base method
func (m *MockTokenHelper) GetPasswordToken(userID int64, email string) (string, error) {
	ret := m.ctrl.Call(m, "GetPasswordToken", userID, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordToken indicates an expected call of GetPasswordToken
func (mr *MockTokenHelperMockRecorder) GetPasswordToken(userID, email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordToken", reflect.TypeOf((*MockTokenHelper)(nil).GetPasswordToken), userID, email)
}

// ValidatePasswordToken mocks base method
func (m *MockTokenHelper) ValidatePasswordToken(token string) (int64, string, error) {
	ret := m.ctrl.Call(m, "ValidatePasswordToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidatePasswordToken indicates an expected call of ValidatePasswordToken
func (mr *MockTokenHelperMockRecorder) ValidatePasswordToken(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePasswordToken", reflect.TypeOf((*MockTokenHelper)(nil).ValidatePasswordToken), token)
}

// GetValidationToken mocks base method
func (m *MockTokenHelper) GetValidationToken(userID int64, email string) (string, error) {
	ret := m.ctrl.Call(m, "GetValidationToken", userID, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidationToken indicates an expected call of GetValidationToken
func (mr *MockTokenHelperMockRecorder) GetValidationToken(userID, email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidationToken", reflect.TypeOf((*MockTokenHelper)(nil).GetValidationToken), userID, email)
}

// ValidateValidationToken mocks base method
func (m *MockTokenHelper) ValidateValidationToken(token string) (int64, string, error) {
	ret := m.ctrl.Call(m, "ValidateValidationToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateValidationToken indicates an expected call of ValidateValidationToken
func (mr *MockTokenHelperMockRecorder) ValidateValidationToken(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateValidationToken", reflect.TypeOf((*MockTokenHelper)(nil).ValidateValidationToken), token)
}

// GetAuthToken mocks base method
func (m *MockTokenHelper) GetAuthToken(userID int64, isAdmin bool) (string, error) {
	ret := m.ctrl.Call(m, "GetAuthToken", userID, isAdmin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthToken indicates an expected call of GetAuthToken
func (mr *MockTokenHelperMockRecorder) GetAuthToken(userID, isAdmin interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockTokenHelper)(nil).GetAuthToken), userID, isAdmin)
}

// GetRefreshToken mocks base method
func (m *MockTokenHelper) GetRefreshToken(userID int64, isAdmin bool) (string, error) {
	ret := m.ctrl.Call(m, "GetRefreshToken", userID, isAdmin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken
func (mr *MockTokenHelperMockRecorder) GetRefreshToken(userID, isAdmin interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockTokenHelper)(nil).GetRefreshToken), userID, isAdmin)
}

// ValidateRefreshToken mocks base method
func (m *MockTokenHelper) ValidateRefreshToken(token string) (int64, error) {
	ret := m.ctrl.Call(m, "ValidateRefreshToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRefreshToken indicates an expected call of ValidateRefreshToken
func (mr *MockTokenHelperMockRecorder) ValidateRefreshToken(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRefreshToken", reflect.TypeOf((*MockTokenHelper)(nil).ValidateRefreshToken), token)
}

// MockMailSender is a mock of MailSender interface
type MockMailSender struct {
	ctrl     *gomock.Controller
	recorder *MockMailSenderMockRecorder
}

// MockMailSenderMockRecorder is the mock recorder for MockMailSender
type MockMailSenderMockRecorder struct {
	mock *MockMailSender
}

// NewMockMailSender creates a new mock instance
func NewMockMailSender(ctrl *gomock.Controller) *MockMailSender {
	mock := &MockMailSender{ctrl: ctrl}
	mock.recorder = &MockMailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMailSender) EXPECT() *MockMailSenderMockRecorder {
	return m.recorder
}

// SendResetPasswordMail mocks base method
func (m *MockMailSender) SendResetPasswordMail(email, token string) error {
	ret := m.ctrl.Call(m, "SendResetPasswordMail", email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendResetPasswordMail indicates an expected call of SendResetPasswordMail
func (mr *MockMailSenderMockRecorder) SendResetPasswordMail(email, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendResetPasswordMail", reflect.TypeOf((*MockMailSender)(nil).SendResetPasswordMail), email, token)
}

// SendPasswordUpdatedMail mocks base method
func (m *MockMailSender) SendPasswordUpdatedMail(email string) error {
	ret := m.ctrl.Call(m, "SendPasswordUpdatedMail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPasswordUpdatedMail indicates an expected call of SendPasswordUpdatedMail
func (mr *MockMailSenderMockRecorder) SendPasswordUpdatedMail(email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordUpdatedMail", reflect.TypeOf((*MockMailSender)(nil).SendPasswordUpdatedMail), email)
}

// SendNewUserMail mocks base method
func (m *MockMailSender) SendNewUserMail(u *model.User, token string) error {
	ret := m.ctrl.Call(m, "SendNewUserMail", u, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNewUserMail indicates an expected call of SendNewUserMail
func (mr *MockMailSenderMockRecorder) SendNewUserMail(u, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNewUserMail", reflect.TypeOf((*MockMailSender)(nil).SendNewUserMail), u, token)
}

// SendActivationMail mocks base method
func (m *MockMailSender) SendActivationMail(u *model.User, token string) error {
	ret := m.ctrl.Call(m, "SendActivationMail", u, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendActivationMail indicates an expected call of SendActivationMail
func (mr *MockMailSenderMockRecorder) SendActivationMail(u, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendActivationMail", reflect.TypeOf((*MockMailSender)(nil).SendActivationMail), u, token)
}

// SendUserActivatedMail mocks base method
func (m *MockMailSender) SendUserActivatedMail(email string) error {
	ret := m.ctrl.Call(m, "SendUserActivatedMail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUserActivatedMail indicates an expected call of SendUserActivatedMail
func (mr *MockMailSenderMockRecorder) SendUserActivatedMail(email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserActivatedMail", reflect.TypeOf((*MockMailSender)(nil).SendUserActivatedMail), email)
}

// MockAPIHelper is a mock of APIHelper interface
type MockAPIHelper struct {
	ctrl     *gomock.Controller
	recorder *MockAPIHelperMockRecorder
}

// MockAPIHelperMockRecorder is the mock recorder for MockAPIHelper
type MockAPIHelperMockRecorder struct {
	mock *MockAPIHelper
}

// NewMockAPIHelper creates a new mock instance
func NewMockAPIHelper(ctrl *gomock.Controller) *MockAPIHelper {
	mock := &MockAPIHelper{ctrl: ctrl}
	mock.recorder = &MockAPIHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIHelper) EXPECT() *MockAPIHelperMockRecorder {
	return m.recorder
}

// GetBookName mocks base method
func (m *MockAPIHelper) GetBookName(isbn string) (string, error) {
	ret := m.ctrl.Call(m, "GetBookName", isbn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookName indicates an expected call of GetBookName
func (mr *MockAPIHelperMockRecorder) GetBookName(isbn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookName", reflect.TypeOf((*MockAPIHelper)(nil).GetBookName), isbn)
}
