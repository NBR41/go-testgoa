// Code generated by MockGen. DO NOT EDIT.
// Source: listbuilder.go

// Package controllers is a generated GoMock package.
package controllers

import (
	app "github.com/NBR41/go-testgoa/app"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MocklistResponse is a mock of listResponse interface
type MocklistResponse struct {
	ctrl     *gomock.Controller
	recorder *MocklistResponseMockRecorder
}

// MocklistResponseMockRecorder is the mock recorder for MocklistResponse
type MocklistResponseMockRecorder struct {
	mock *MocklistResponse
}

// NewMocklistResponse creates a new mock instance
func NewMocklistResponse(ctrl *gomock.Controller) *MocklistResponse {
	mock := &MocklistResponse{ctrl: ctrl}
	mock.recorder = &MocklistResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocklistResponse) EXPECT() *MocklistResponseMockRecorder {
	return m.recorder
}

// NotFound mocks base method
func (m *MocklistResponse) NotFound() error {
	ret := m.ctrl.Call(m, "NotFound")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotFound indicates an expected call of NotFound
func (mr *MocklistResponseMockRecorder) NotFound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MocklistResponse)(nil).NotFound))
}

// InternalServerError mocks base method
func (m *MocklistResponse) InternalServerError() error {
	ret := m.ctrl.Call(m, "InternalServerError")
	ret0, _ := ret[0].(error)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError
func (mr *MocklistResponseMockRecorder) InternalServerError() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MocklistResponse)(nil).InternalServerError))
}

// ServiceUnavailable mocks base method
func (m *MocklistResponse) ServiceUnavailable() error {
	ret := m.ctrl.Call(m, "ServiceUnavailable")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceUnavailable indicates an expected call of ServiceUnavailable
func (mr *MocklistResponseMockRecorder) ServiceUnavailable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUnavailable", reflect.TypeOf((*MocklistResponse)(nil).ServiceUnavailable))
}

// MockauthorsResponse is a mock of authorsResponse interface
type MockauthorsResponse struct {
	ctrl     *gomock.Controller
	recorder *MockauthorsResponseMockRecorder
}

// MockauthorsResponseMockRecorder is the mock recorder for MockauthorsResponse
type MockauthorsResponseMockRecorder struct {
	mock *MockauthorsResponse
}

// NewMockauthorsResponse creates a new mock instance
func NewMockauthorsResponse(ctrl *gomock.Controller) *MockauthorsResponse {
	mock := &MockauthorsResponse{ctrl: ctrl}
	mock.recorder = &MockauthorsResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockauthorsResponse) EXPECT() *MockauthorsResponseMockRecorder {
	return m.recorder
}

// OK mocks base method
func (m *MockauthorsResponse) OK(r app.AuthorCollection) error {
	ret := m.ctrl.Call(m, "OK", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// OK indicates an expected call of OK
func (mr *MockauthorsResponseMockRecorder) OK(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OK", reflect.TypeOf((*MockauthorsResponse)(nil).OK), r)
}

// NotFound mocks base method
func (m *MockauthorsResponse) NotFound() error {
	ret := m.ctrl.Call(m, "NotFound")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotFound indicates an expected call of NotFound
func (mr *MockauthorsResponseMockRecorder) NotFound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockauthorsResponse)(nil).NotFound))
}

// InternalServerError mocks base method
func (m *MockauthorsResponse) InternalServerError() error {
	ret := m.ctrl.Call(m, "InternalServerError")
	ret0, _ := ret[0].(error)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError
func (mr *MockauthorsResponseMockRecorder) InternalServerError() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockauthorsResponse)(nil).InternalServerError))
}

// ServiceUnavailable mocks base method
func (m *MockauthorsResponse) ServiceUnavailable() error {
	ret := m.ctrl.Call(m, "ServiceUnavailable")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceUnavailable indicates an expected call of ServiceUnavailable
func (mr *MockauthorsResponseMockRecorder) ServiceUnavailable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUnavailable", reflect.TypeOf((*MockauthorsResponse)(nil).ServiceUnavailable))
}

// MockbooksResponse is a mock of booksResponse interface
type MockbooksResponse struct {
	ctrl     *gomock.Controller
	recorder *MockbooksResponseMockRecorder
}

// MockbooksResponseMockRecorder is the mock recorder for MockbooksResponse
type MockbooksResponseMockRecorder struct {
	mock *MockbooksResponse
}

// NewMockbooksResponse creates a new mock instance
func NewMockbooksResponse(ctrl *gomock.Controller) *MockbooksResponse {
	mock := &MockbooksResponse{ctrl: ctrl}
	mock.recorder = &MockbooksResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockbooksResponse) EXPECT() *MockbooksResponseMockRecorder {
	return m.recorder
}

// OK mocks base method
func (m *MockbooksResponse) OK(r app.BookCollection) error {
	ret := m.ctrl.Call(m, "OK", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// OK indicates an expected call of OK
func (mr *MockbooksResponseMockRecorder) OK(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OK", reflect.TypeOf((*MockbooksResponse)(nil).OK), r)
}

// NotFound mocks base method
func (m *MockbooksResponse) NotFound() error {
	ret := m.ctrl.Call(m, "NotFound")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotFound indicates an expected call of NotFound
func (mr *MockbooksResponseMockRecorder) NotFound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockbooksResponse)(nil).NotFound))
}

// InternalServerError mocks base method
func (m *MockbooksResponse) InternalServerError() error {
	ret := m.ctrl.Call(m, "InternalServerError")
	ret0, _ := ret[0].(error)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError
func (mr *MockbooksResponseMockRecorder) InternalServerError() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockbooksResponse)(nil).InternalServerError))
}

// ServiceUnavailable mocks base method
func (m *MockbooksResponse) ServiceUnavailable() error {
	ret := m.ctrl.Call(m, "ServiceUnavailable")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceUnavailable indicates an expected call of ServiceUnavailable
func (mr *MockbooksResponseMockRecorder) ServiceUnavailable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUnavailable", reflect.TypeOf((*MockbooksResponse)(nil).ServiceUnavailable))
}

// MockcategoriesResponse is a mock of categoriesResponse interface
type MockcategoriesResponse struct {
	ctrl     *gomock.Controller
	recorder *MockcategoriesResponseMockRecorder
}

// MockcategoriesResponseMockRecorder is the mock recorder for MockcategoriesResponse
type MockcategoriesResponseMockRecorder struct {
	mock *MockcategoriesResponse
}

// NewMockcategoriesResponse creates a new mock instance
func NewMockcategoriesResponse(ctrl *gomock.Controller) *MockcategoriesResponse {
	mock := &MockcategoriesResponse{ctrl: ctrl}
	mock.recorder = &MockcategoriesResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcategoriesResponse) EXPECT() *MockcategoriesResponseMockRecorder {
	return m.recorder
}

// OK mocks base method
func (m *MockcategoriesResponse) OK(r app.CategoryCollection) error {
	ret := m.ctrl.Call(m, "OK", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// OK indicates an expected call of OK
func (mr *MockcategoriesResponseMockRecorder) OK(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OK", reflect.TypeOf((*MockcategoriesResponse)(nil).OK), r)
}

// NotFound mocks base method
func (m *MockcategoriesResponse) NotFound() error {
	ret := m.ctrl.Call(m, "NotFound")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotFound indicates an expected call of NotFound
func (mr *MockcategoriesResponseMockRecorder) NotFound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockcategoriesResponse)(nil).NotFound))
}

// InternalServerError mocks base method
func (m *MockcategoriesResponse) InternalServerError() error {
	ret := m.ctrl.Call(m, "InternalServerError")
	ret0, _ := ret[0].(error)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError
func (mr *MockcategoriesResponseMockRecorder) InternalServerError() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockcategoriesResponse)(nil).InternalServerError))
}

// ServiceUnavailable mocks base method
func (m *MockcategoriesResponse) ServiceUnavailable() error {
	ret := m.ctrl.Call(m, "ServiceUnavailable")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceUnavailable indicates an expected call of ServiceUnavailable
func (mr *MockcategoriesResponseMockRecorder) ServiceUnavailable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUnavailable", reflect.TypeOf((*MockcategoriesResponse)(nil).ServiceUnavailable))
}

// MockclassesResponse is a mock of classesResponse interface
type MockclassesResponse struct {
	ctrl     *gomock.Controller
	recorder *MockclassesResponseMockRecorder
}

// MockclassesResponseMockRecorder is the mock recorder for MockclassesResponse
type MockclassesResponseMockRecorder struct {
	mock *MockclassesResponse
}

// NewMockclassesResponse creates a new mock instance
func NewMockclassesResponse(ctrl *gomock.Controller) *MockclassesResponse {
	mock := &MockclassesResponse{ctrl: ctrl}
	mock.recorder = &MockclassesResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockclassesResponse) EXPECT() *MockclassesResponseMockRecorder {
	return m.recorder
}

// OK mocks base method
func (m *MockclassesResponse) OK(r app.ClassCollection) error {
	ret := m.ctrl.Call(m, "OK", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// OK indicates an expected call of OK
func (mr *MockclassesResponseMockRecorder) OK(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OK", reflect.TypeOf((*MockclassesResponse)(nil).OK), r)
}

// NotFound mocks base method
func (m *MockclassesResponse) NotFound() error {
	ret := m.ctrl.Call(m, "NotFound")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotFound indicates an expected call of NotFound
func (mr *MockclassesResponseMockRecorder) NotFound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockclassesResponse)(nil).NotFound))
}

// InternalServerError mocks base method
func (m *MockclassesResponse) InternalServerError() error {
	ret := m.ctrl.Call(m, "InternalServerError")
	ret0, _ := ret[0].(error)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError
func (mr *MockclassesResponseMockRecorder) InternalServerError() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockclassesResponse)(nil).InternalServerError))
}

// ServiceUnavailable mocks base method
func (m *MockclassesResponse) ServiceUnavailable() error {
	ret := m.ctrl.Call(m, "ServiceUnavailable")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceUnavailable indicates an expected call of ServiceUnavailable
func (mr *MockclassesResponseMockRecorder) ServiceUnavailable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUnavailable", reflect.TypeOf((*MockclassesResponse)(nil).ServiceUnavailable))
}

// MockcollectionsResponse is a mock of collectionsResponse interface
type MockcollectionsResponse struct {
	ctrl     *gomock.Controller
	recorder *MockcollectionsResponseMockRecorder
}

// MockcollectionsResponseMockRecorder is the mock recorder for MockcollectionsResponse
type MockcollectionsResponseMockRecorder struct {
	mock *MockcollectionsResponse
}

// NewMockcollectionsResponse creates a new mock instance
func NewMockcollectionsResponse(ctrl *gomock.Controller) *MockcollectionsResponse {
	mock := &MockcollectionsResponse{ctrl: ctrl}
	mock.recorder = &MockcollectionsResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcollectionsResponse) EXPECT() *MockcollectionsResponseMockRecorder {
	return m.recorder
}

// OK mocks base method
func (m *MockcollectionsResponse) OK(r app.CollectionCollection) error {
	ret := m.ctrl.Call(m, "OK", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// OK indicates an expected call of OK
func (mr *MockcollectionsResponseMockRecorder) OK(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OK", reflect.TypeOf((*MockcollectionsResponse)(nil).OK), r)
}

// NotFound mocks base method
func (m *MockcollectionsResponse) NotFound() error {
	ret := m.ctrl.Call(m, "NotFound")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotFound indicates an expected call of NotFound
func (mr *MockcollectionsResponseMockRecorder) NotFound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockcollectionsResponse)(nil).NotFound))
}

// InternalServerError mocks base method
func (m *MockcollectionsResponse) InternalServerError() error {
	ret := m.ctrl.Call(m, "InternalServerError")
	ret0, _ := ret[0].(error)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError
func (mr *MockcollectionsResponseMockRecorder) InternalServerError() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockcollectionsResponse)(nil).InternalServerError))
}

// ServiceUnavailable mocks base method
func (m *MockcollectionsResponse) ServiceUnavailable() error {
	ret := m.ctrl.Call(m, "ServiceUnavailable")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceUnavailable indicates an expected call of ServiceUnavailable
func (mr *MockcollectionsResponseMockRecorder) ServiceUnavailable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUnavailable", reflect.TypeOf((*MockcollectionsResponse)(nil).ServiceUnavailable))
}

// MockeditorsResponse is a mock of editorsResponse interface
type MockeditorsResponse struct {
	ctrl     *gomock.Controller
	recorder *MockeditorsResponseMockRecorder
}

// MockeditorsResponseMockRecorder is the mock recorder for MockeditorsResponse
type MockeditorsResponseMockRecorder struct {
	mock *MockeditorsResponse
}

// NewMockeditorsResponse creates a new mock instance
func NewMockeditorsResponse(ctrl *gomock.Controller) *MockeditorsResponse {
	mock := &MockeditorsResponse{ctrl: ctrl}
	mock.recorder = &MockeditorsResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockeditorsResponse) EXPECT() *MockeditorsResponseMockRecorder {
	return m.recorder
}

// OK mocks base method
func (m *MockeditorsResponse) OK(r app.EditorCollection) error {
	ret := m.ctrl.Call(m, "OK", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// OK indicates an expected call of OK
func (mr *MockeditorsResponseMockRecorder) OK(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OK", reflect.TypeOf((*MockeditorsResponse)(nil).OK), r)
}

// NotFound mocks base method
func (m *MockeditorsResponse) NotFound() error {
	ret := m.ctrl.Call(m, "NotFound")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotFound indicates an expected call of NotFound
func (mr *MockeditorsResponseMockRecorder) NotFound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockeditorsResponse)(nil).NotFound))
}

// InternalServerError mocks base method
func (m *MockeditorsResponse) InternalServerError() error {
	ret := m.ctrl.Call(m, "InternalServerError")
	ret0, _ := ret[0].(error)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError
func (mr *MockeditorsResponseMockRecorder) InternalServerError() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockeditorsResponse)(nil).InternalServerError))
}

// ServiceUnavailable mocks base method
func (m *MockeditorsResponse) ServiceUnavailable() error {
	ret := m.ctrl.Call(m, "ServiceUnavailable")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceUnavailable indicates an expected call of ServiceUnavailable
func (mr *MockeditorsResponseMockRecorder) ServiceUnavailable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUnavailable", reflect.TypeOf((*MockeditorsResponse)(nil).ServiceUnavailable))
}

// MockprintsResponse is a mock of printsResponse interface
type MockprintsResponse struct {
	ctrl     *gomock.Controller
	recorder *MockprintsResponseMockRecorder
}

// MockprintsResponseMockRecorder is the mock recorder for MockprintsResponse
type MockprintsResponseMockRecorder struct {
	mock *MockprintsResponse
}

// NewMockprintsResponse creates a new mock instance
func NewMockprintsResponse(ctrl *gomock.Controller) *MockprintsResponse {
	mock := &MockprintsResponse{ctrl: ctrl}
	mock.recorder = &MockprintsResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockprintsResponse) EXPECT() *MockprintsResponseMockRecorder {
	return m.recorder
}

// OK mocks base method
func (m *MockprintsResponse) OK(r app.PrintCollection) error {
	ret := m.ctrl.Call(m, "OK", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// OK indicates an expected call of OK
func (mr *MockprintsResponseMockRecorder) OK(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OK", reflect.TypeOf((*MockprintsResponse)(nil).OK), r)
}

// NotFound mocks base method
func (m *MockprintsResponse) NotFound() error {
	ret := m.ctrl.Call(m, "NotFound")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotFound indicates an expected call of NotFound
func (mr *MockprintsResponseMockRecorder) NotFound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockprintsResponse)(nil).NotFound))
}

// InternalServerError mocks base method
func (m *MockprintsResponse) InternalServerError() error {
	ret := m.ctrl.Call(m, "InternalServerError")
	ret0, _ := ret[0].(error)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError
func (mr *MockprintsResponseMockRecorder) InternalServerError() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockprintsResponse)(nil).InternalServerError))
}

// ServiceUnavailable mocks base method
func (m *MockprintsResponse) ServiceUnavailable() error {
	ret := m.ctrl.Call(m, "ServiceUnavailable")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceUnavailable indicates an expected call of ServiceUnavailable
func (mr *MockprintsResponseMockRecorder) ServiceUnavailable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUnavailable", reflect.TypeOf((*MockprintsResponse)(nil).ServiceUnavailable))
}

// MockseriesResponse is a mock of seriesResponse interface
type MockseriesResponse struct {
	ctrl     *gomock.Controller
	recorder *MockseriesResponseMockRecorder
}

// MockseriesResponseMockRecorder is the mock recorder for MockseriesResponse
type MockseriesResponseMockRecorder struct {
	mock *MockseriesResponse
}

// NewMockseriesResponse creates a new mock instance
func NewMockseriesResponse(ctrl *gomock.Controller) *MockseriesResponse {
	mock := &MockseriesResponse{ctrl: ctrl}
	mock.recorder = &MockseriesResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockseriesResponse) EXPECT() *MockseriesResponseMockRecorder {
	return m.recorder
}

// OK mocks base method
func (m *MockseriesResponse) OK(r app.SeriesCollection) error {
	ret := m.ctrl.Call(m, "OK", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// OK indicates an expected call of OK
func (mr *MockseriesResponseMockRecorder) OK(r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OK", reflect.TypeOf((*MockseriesResponse)(nil).OK), r)
}

// NotFound mocks base method
func (m *MockseriesResponse) NotFound() error {
	ret := m.ctrl.Call(m, "NotFound")
	ret0, _ := ret[0].(error)
	return ret0
}

// NotFound indicates an expected call of NotFound
func (mr *MockseriesResponseMockRecorder) NotFound() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockseriesResponse)(nil).NotFound))
}

// InternalServerError mocks base method
func (m *MockseriesResponse) InternalServerError() error {
	ret := m.ctrl.Call(m, "InternalServerError")
	ret0, _ := ret[0].(error)
	return ret0
}

// InternalServerError indicates an expected call of InternalServerError
func (mr *MockseriesResponseMockRecorder) InternalServerError() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalServerError", reflect.TypeOf((*MockseriesResponse)(nil).InternalServerError))
}

// ServiceUnavailable mocks base method
func (m *MockseriesResponse) ServiceUnavailable() error {
	ret := m.ctrl.Call(m, "ServiceUnavailable")
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceUnavailable indicates an expected call of ServiceUnavailable
func (mr *MockseriesResponseMockRecorder) ServiceUnavailable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUnavailable", reflect.TypeOf((*MockseriesResponse)(nil).ServiceUnavailable))
}
