// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "my-inventory": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/NBR41/go-testgoa/design
// --out=$(GOPATH)/src/github.com/NBR41/go-testgoa
// --version=v1.3.1

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/NBR41/go-testgoa/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// AuthAuthenticateCommand is the command line data structure for the auth action of authenticate
	AuthAuthenticateCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// CreateAuthorsCommand is the command line data structure for the create action of authors
	CreateAuthorsCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteAuthorsCommand is the command line data structure for the delete action of authors
	DeleteAuthorsCommand struct {
		// Unique Author ID
		AuthorID    int
		PrettyPrint bool
	}

	// ListAuthorsCommand is the command line data structure for the list action of authors
	ListAuthorsCommand struct {
		PrettyPrint bool
	}

	// ShowAuthorsCommand is the command line data structure for the show action of authors
	ShowAuthorsCommand struct {
		// Unique Author ID
		AuthorID    int
		PrettyPrint bool
	}

	// UpdateAuthorsCommand is the command line data structure for the update action of authors
	UpdateAuthorsCommand struct {
		Payload     string
		ContentType string
		// Unique Author ID
		AuthorID    int
		PrettyPrint bool
	}

	// CreateAuthorshipsCommand is the command line data structure for the create action of authorships
	CreateAuthorshipsCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteAuthorshipsCommand is the command line data structure for the delete action of authorships
	DeleteAuthorshipsCommand struct {
		// Unique Authorship ID
		AuthorshipID int
		PrettyPrint  bool
	}

	// ListAuthorshipsCommand is the command line data structure for the list action of authorships
	ListAuthorshipsCommand struct {
		PrettyPrint bool
	}

	// ShowAuthorshipsCommand is the command line data structure for the show action of authorships
	ShowAuthorshipsCommand struct {
		// Unique Authorship ID
		AuthorshipID int
		PrettyPrint  bool
	}

	// CreateBooksCommand is the command line data structure for the create action of books
	CreateBooksCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteBooksCommand is the command line data structure for the delete action of books
	DeleteBooksCommand struct {
		// Unique Book ID
		BookID      int
		PrettyPrint bool
	}

	// ListBooksCommand is the command line data structure for the list action of books
	ListBooksCommand struct {
		PrettyPrint bool
	}

	// ShowBooksCommand is the command line data structure for the show action of books
	ShowBooksCommand struct {
		// Unique Book ID
		BookID      int
		PrettyPrint bool
	}

	// UpdateBooksCommand is the command line data structure for the update action of books
	UpdateBooksCommand struct {
		Payload     string
		ContentType string
		// Unique Book ID
		BookID      int
		PrettyPrint bool
	}

	// CreateCategoriesCommand is the command line data structure for the create action of categories
	CreateCategoriesCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteCategoriesCommand is the command line data structure for the delete action of categories
	DeleteCategoriesCommand struct {
		// Unique Category ID
		CategoryID  int
		PrettyPrint bool
	}

	// ListCategoriesCommand is the command line data structure for the list action of categories
	ListCategoriesCommand struct {
		PrettyPrint bool
	}

	// ShowCategoriesCommand is the command line data structure for the show action of categories
	ShowCategoriesCommand struct {
		// Unique Category ID
		CategoryID  int
		PrettyPrint bool
	}

	// UpdateCategoriesCommand is the command line data structure for the update action of categories
	UpdateCategoriesCommand struct {
		Payload     string
		ContentType string
		// Unique Category ID
		CategoryID  int
		PrettyPrint bool
	}

	// CreateClassesCommand is the command line data structure for the create action of classes
	CreateClassesCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteClassesCommand is the command line data structure for the delete action of classes
	DeleteClassesCommand struct {
		// Unique Class ID
		ClassID     int
		PrettyPrint bool
	}

	// ListClassesCommand is the command line data structure for the list action of classes
	ListClassesCommand struct {
		PrettyPrint bool
	}

	// ShowClassesCommand is the command line data structure for the show action of classes
	ShowClassesCommand struct {
		// Unique Class ID
		ClassID     int
		PrettyPrint bool
	}

	// UpdateClassesCommand is the command line data structure for the update action of classes
	UpdateClassesCommand struct {
		Payload     string
		ContentType string
		// Unique Class ID
		ClassID     int
		PrettyPrint bool
	}

	// CreateClassificationsCommand is the command line data structure for the create action of classifications
	CreateClassificationsCommand struct {
		Payload     string
		ContentType string
		// Unique Series ID
		SeriesID    int
		PrettyPrint bool
	}

	// DeleteClassificationsCommand is the command line data structure for the delete action of classifications
	DeleteClassificationsCommand struct {
		// Unique Class ID
		ClassID int
		// Unique Series ID
		SeriesID    int
		PrettyPrint bool
	}

	// ListClassificationsCommand is the command line data structure for the list action of classifications
	ListClassificationsCommand struct {
		// Unique Series ID
		SeriesID    int
		PrettyPrint bool
	}

	// ShowClassificationsCommand is the command line data structure for the show action of classifications
	ShowClassificationsCommand struct {
		// Unique Class ID
		ClassID int
		// Unique Series ID
		SeriesID    int
		PrettyPrint bool
	}

	// CreateCollectionsCommand is the command line data structure for the create action of collections
	CreateCollectionsCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteCollectionsCommand is the command line data structure for the delete action of collections
	DeleteCollectionsCommand struct {
		// Unique Collection ID
		CollectionID int
		PrettyPrint  bool
	}

	// ListCollectionsCommand is the command line data structure for the list action of collections
	ListCollectionsCommand struct {
		PrettyPrint bool
	}

	// ShowCollectionsCommand is the command line data structure for the show action of collections
	ShowCollectionsCommand struct {
		// Unique Collection ID
		CollectionID int
		PrettyPrint  bool
	}

	// UpdateCollectionsCommand is the command line data structure for the update action of collections
	UpdateCollectionsCommand struct {
		Payload     string
		ContentType string
		// Unique Collection ID
		CollectionID int
		PrettyPrint  bool
	}

	// CreateEditionsCommand is the command line data structure for the create action of editions
	CreateEditionsCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteEditionsCommand is the command line data structure for the delete action of editions
	DeleteEditionsCommand struct {
		// Unique Edition ID
		EditionID   int
		PrettyPrint bool
	}

	// ListEditionsCommand is the command line data structure for the list action of editions
	ListEditionsCommand struct {
		PrettyPrint bool
	}

	// ShowEditionsCommand is the command line data structure for the show action of editions
	ShowEditionsCommand struct {
		// Unique Edition ID
		EditionID   int
		PrettyPrint bool
	}

	// CreateEditorsCommand is the command line data structure for the create action of editors
	CreateEditorsCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteEditorsCommand is the command line data structure for the delete action of editors
	DeleteEditorsCommand struct {
		// Unique Editor ID
		EditorID    int
		PrettyPrint bool
	}

	// ListEditorsCommand is the command line data structure for the list action of editors
	ListEditorsCommand struct {
		PrettyPrint bool
	}

	// ShowEditorsCommand is the command line data structure for the show action of editors
	ShowEditorsCommand struct {
		// Unique Editor ID
		EditorID    int
		PrettyPrint bool
	}

	// UpdateEditorsCommand is the command line data structure for the update action of editors
	UpdateEditorsCommand struct {
		Payload     string
		ContentType string
		// Unique Editor ID
		EditorID    int
		PrettyPrint bool
	}

	// HealthHealthCommand is the command line data structure for the health action of health
	HealthHealthCommand struct {
		PrettyPrint bool
	}

	// AddOwnershipsCommand is the command line data structure for the add action of ownerships
	AddOwnershipsCommand struct {
		Payload     string
		ContentType string
		// Unique User ID
		UserID      int
		PrettyPrint bool
	}

	// CreateOwnershipsCommand is the command line data structure for the create action of ownerships
	CreateOwnershipsCommand struct {
		Payload     string
		ContentType string
		// Unique User ID
		UserID      int
		PrettyPrint bool
	}

	// DeleteOwnershipsCommand is the command line data structure for the delete action of ownerships
	DeleteOwnershipsCommand struct {
		// Unique Book ID
		BookID int
		// Unique User ID
		UserID      int
		PrettyPrint bool
	}

	// ListOwnershipsCommand is the command line data structure for the list action of ownerships
	ListOwnershipsCommand struct {
		// Unique User ID
		UserID      int
		PrettyPrint bool
	}

	// ShowOwnershipsCommand is the command line data structure for the show action of ownerships
	ShowOwnershipsCommand struct {
		// Unique Book ID
		BookID int
		// Unique User ID
		UserID      int
		PrettyPrint bool
	}

	// GetPasswordCommand is the command line data structure for the get action of password
	GetPasswordCommand struct {
		// user email
		Email       string
		PrettyPrint bool
	}

	// UpdatePasswordCommand is the command line data structure for the update action of password
	UpdatePasswordCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// CreatePrintsCommand is the command line data structure for the create action of prints
	CreatePrintsCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeletePrintsCommand is the command line data structure for the delete action of prints
	DeletePrintsCommand struct {
		// Unique Print ID
		PrintID     int
		PrettyPrint bool
	}

	// ListPrintsCommand is the command line data structure for the list action of prints
	ListPrintsCommand struct {
		PrettyPrint bool
	}

	// ShowPrintsCommand is the command line data structure for the show action of prints
	ShowPrintsCommand struct {
		// Unique Print ID
		PrintID     int
		PrettyPrint bool
	}

	// UpdatePrintsCommand is the command line data structure for the update action of prints
	UpdatePrintsCommand struct {
		Payload     string
		ContentType string
		// Unique Print ID
		PrintID     int
		PrettyPrint bool
	}

	// ListCategoriesRelationAuthorCommand is the command line data structure for the listCategories action of relationAuthor
	ListCategoriesRelationAuthorCommand struct {
		// Unique Author ID
		AuthorID    int
		PrettyPrint bool
	}

	// ListClassesRelationAuthorCommand is the command line data structure for the listClasses action of relationAuthor
	ListClassesRelationAuthorCommand struct {
		// Unique Author ID
		AuthorID    int
		PrettyPrint bool
	}

	// ListRolesRelationAuthorCommand is the command line data structure for the listRoles action of relationAuthor
	ListRolesRelationAuthorCommand struct {
		// Unique Author ID
		AuthorID    int
		PrettyPrint bool
	}

	// ListSeriesRelationAuthorCommand is the command line data structure for the listSeries action of relationAuthor
	ListSeriesRelationAuthorCommand struct {
		// Unique Author ID
		AuthorID    int
		PrettyPrint bool
	}

	// ListSeriesByCategoryRelationAuthorCommand is the command line data structure for the listSeriesByCategory action of relationAuthor
	ListSeriesByCategoryRelationAuthorCommand struct {
		// Unique Author ID
		AuthorID int
		// Unique Category ID
		CategoryID  int
		PrettyPrint bool
	}

	// ListSeriesByClassRelationAuthorCommand is the command line data structure for the listSeriesByClass action of relationAuthor
	ListSeriesByClassRelationAuthorCommand struct {
		// Unique Author ID
		AuthorID int
		// Unique Class ID
		ClassID     int
		PrettyPrint bool
	}

	// ListSeriesByRoleRelationAuthorCommand is the command line data structure for the listSeriesByRole action of relationAuthor
	ListSeriesByRoleRelationAuthorCommand struct {
		// Unique Author ID
		AuthorID int
		// Unique Role ID
		RoleID      int
		PrettyPrint bool
	}

	// ListAuthorsRelationCategoryCommand is the command line data structure for the listAuthors action of relationCategory
	ListAuthorsRelationCategoryCommand struct {
		// Unique Category ID
		CategoryID  int
		PrettyPrint bool
	}

	// ListClassesRelationCategoryCommand is the command line data structure for the listClasses action of relationCategory
	ListClassesRelationCategoryCommand struct {
		// Unique Category ID
		CategoryID  int
		PrettyPrint bool
	}

	// ListSeriesRelationCategoryCommand is the command line data structure for the listSeries action of relationCategory
	ListSeriesRelationCategoryCommand struct {
		// Unique Category ID
		CategoryID  int
		PrettyPrint bool
	}

	// ListSeriesByClassRelationCategoryCommand is the command line data structure for the listSeriesByClass action of relationCategory
	ListSeriesByClassRelationCategoryCommand struct {
		// Unique Category ID
		CategoryID int
		// Unique Class ID
		ClassID     int
		PrettyPrint bool
	}

	// ListCategoriesRelationClassCommand is the command line data structure for the listCategories action of relationClass
	ListCategoriesRelationClassCommand struct {
		// Unique Class ID
		ClassID     int
		PrettyPrint bool
	}

	// ListSeriesRelationClassCommand is the command line data structure for the listSeries action of relationClass
	ListSeriesRelationClassCommand struct {
		// Unique Class ID
		ClassID     int
		PrettyPrint bool
	}

	// ListSeriesByCategoryRelationClassCommand is the command line data structure for the listSeriesByCategory action of relationClass
	ListSeriesByCategoryRelationClassCommand struct {
		// Unique Category ID
		CategoryID int
		// Unique Class ID
		ClassID     int
		PrettyPrint bool
	}

	// ListBooksRelationCollectionCommand is the command line data structure for the listBooks action of relationCollection
	ListBooksRelationCollectionCommand struct {
		// Unique Collection ID
		CollectionID int
		PrettyPrint  bool
	}

	// ListBooksByPrintRelationCollectionCommand is the command line data structure for the listBooksByPrint action of relationCollection
	ListBooksByPrintRelationCollectionCommand struct {
		// Unique Collection ID
		CollectionID int
		// Unique Print ID
		PrintID     int
		PrettyPrint bool
	}

	// ListBooksByPrintsSeriesRelationCollectionCommand is the command line data structure for the listBooksByPrintsSeries action of relationCollection
	ListBooksByPrintsSeriesRelationCollectionCommand struct {
		// Unique Collection ID
		CollectionID int
		// Unique Print ID
		PrintID int
		// Unique Series ID
		SeriesID    int
		PrettyPrint bool
	}

	// ListBooksBySeriesRelationCollectionCommand is the command line data structure for the listBooksBySeries action of relationCollection
	ListBooksBySeriesRelationCollectionCommand struct {
		// Unique Collection ID
		CollectionID int
		// Unique Series ID
		SeriesID    int
		PrettyPrint bool
	}

	// ListBooksBySeriesPrintRelationCollectionCommand is the command line data structure for the listBooksBySeriesPrint action of relationCollection
	ListBooksBySeriesPrintRelationCollectionCommand struct {
		// Unique Collection ID
		CollectionID int
		// Unique Print ID
		PrintID int
		// Unique Series ID
		SeriesID    int
		PrettyPrint bool
	}

	// ListPrintsRelationCollectionCommand is the command line data structure for the listPrints action of relationCollection
	ListPrintsRelationCollectionCommand struct {
		// Unique Collection ID
		CollectionID int
		PrettyPrint  bool
	}

	// ListPrintsBySeriesRelationCollectionCommand is the command line data structure for the listPrintsBySeries action of relationCollection
	ListPrintsBySeriesRelationCollectionCommand struct {
		// Unique Collection ID
		CollectionID int
		// Unique Series ID
		SeriesID    int
		PrettyPrint bool
	}

	// ListSeriesRelationCollectionCommand is the command line data structure for the listSeries action of relationCollection
	ListSeriesRelationCollectionCommand struct {
		// Unique Collection ID
		CollectionID int
		PrettyPrint  bool
	}

	// ListSeriesByPrintRelationCollectionCommand is the command line data structure for the listSeriesByPrint action of relationCollection
	ListSeriesByPrintRelationCollectionCommand struct {
		// Unique Collection ID
		CollectionID int
		// Unique Print ID
		PrintID     int
		PrettyPrint bool
	}

	// CreateRolesCommand is the command line data structure for the create action of roles
	CreateRolesCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteRolesCommand is the command line data structure for the delete action of roles
	DeleteRolesCommand struct {
		// Unique Role ID
		RoleID      int
		PrettyPrint bool
	}

	// ListRolesCommand is the command line data structure for the list action of roles
	ListRolesCommand struct {
		PrettyPrint bool
	}

	// ShowRolesCommand is the command line data structure for the show action of roles
	ShowRolesCommand struct {
		// Unique Role ID
		RoleID      int
		PrettyPrint bool
	}

	// UpdateRolesCommand is the command line data structure for the update action of roles
	UpdateRolesCommand struct {
		Payload     string
		ContentType string
		// Unique Role ID
		RoleID      int
		PrettyPrint bool
	}

	// ListAuthorsRelationRoleCommand is the command line data structure for the listAuthors action of relationRole
	ListAuthorsRelationRoleCommand struct {
		// Unique Role ID
		RoleID      int
		PrettyPrint bool
	}

	// ListSeriesByAuthorRelationRoleCommand is the command line data structure for the listSeriesByAuthor action of relationRole
	ListSeriesByAuthorRelationRoleCommand struct {
		// Unique Author ID
		AuthorID int
		// Unique Role ID
		RoleID      int
		PrettyPrint bool
	}

	// CreateSeriesCommand is the command line data structure for the create action of series
	CreateSeriesCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteSeriesCommand is the command line data structure for the delete action of series
	DeleteSeriesCommand struct {
		// Unique Series ID
		SeriesID    int
		PrettyPrint bool
	}

	// ListSeriesCommand is the command line data structure for the list action of series
	ListSeriesCommand struct {
		PrettyPrint bool
	}

	// ShowSeriesCommand is the command line data structure for the show action of series
	ShowSeriesCommand struct {
		// Unique Series ID
		SeriesID    int
		PrettyPrint bool
	}

	// UpdateSeriesCommand is the command line data structure for the update action of series
	UpdateSeriesCommand struct {
		Payload     string
		ContentType string
		// Unique Series ID
		SeriesID    int
		PrettyPrint bool
	}

	// AccessTokenCommand is the command line data structure for the access action of token
	AccessTokenCommand struct {
		PrettyPrint bool
	}

	// AuthTokenCommand is the command line data structure for the auth action of token
	AuthTokenCommand struct {
		PrettyPrint bool
	}

	// CreateUsersCommand is the command line data structure for the create action of users
	CreateUsersCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteUsersCommand is the command line data structure for the delete action of users
	DeleteUsersCommand struct {
		// Unique User ID
		UserID      int
		PrettyPrint bool
	}

	// ListUsersCommand is the command line data structure for the list action of users
	ListUsersCommand struct {
		// user email
		Email string
		// user nickname
		Nickname    string
		PrettyPrint bool
	}

	// ShowUsersCommand is the command line data structure for the show action of users
	ShowUsersCommand struct {
		// Unique User ID
		UserID      int
		PrettyPrint bool
	}

	// UpdateUsersCommand is the command line data structure for the update action of users
	UpdateUsersCommand struct {
		Payload     string
		ContentType string
		// Unique User ID
		UserID      int
		PrettyPrint bool
	}

	// GetValidationCommand is the command line data structure for the get action of validation
	GetValidationCommand struct {
		// Unique User ID
		UserID      int
		PrettyPrint bool
	}

	// ValidateValidationCommand is the command line data structure for the validate action of validation
	ValidateValidationCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "access",
		Short: `Get users`,
	}
	tmp1 := new(AccessTokenCommand)
	sub = &cobra.Command{
		Use:   `token ["/token/access_token"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "add",
		Short: `Create new book and ownership by isbn`,
	}
	tmp2 := new(AddOwnershipsCommand)
	sub = &cobra.Command{
		Use:   `ownerships ["/users/USER_ID/ownerships/isbn"]`,
		Short: ``,
		Long: `

Payload example:

{
   "book_isbn": "4"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "auth",
		Short: `auth action`,
	}
	tmp3 := new(AuthAuthenticateCommand)
	sub = &cobra.Command{
		Use:   `authenticate ["/authenticate"]`,
		Short: ``,
		Long: `

Payload example:

{
   "login": "sdkxatg",
   "password": "05"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp4 := new(AuthTokenCommand)
	sub = &cobra.Command{
		Use:   `token ["/token/auth"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "create",
		Short: `create action`,
	}
	tmp5 := new(CreateAuthorsCommand)
	sub = &cobra.Command{
		Use:   `authors ["/authors"]`,
		Short: ``,
		Long: `

Payload example:

{
   "author_name": "lq8tesfn9w"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp6 := new(CreateAuthorshipsCommand)
	sub = &cobra.Command{
		Use:   `authorships ["/authorships"]`,
		Short: ``,
		Long: `

Payload example:

{
   "author_id": 1,
   "book_id": 1,
   "role_id": 1
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp7 := new(CreateBooksCommand)
	sub = &cobra.Command{
		Use:   `books ["/books"]`,
		Short: ``,
		Long: `

Payload example:

{
   "book_isbn": "p237tpd",
   "book_name": "00qlg5o",
   "series_id": 1
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp8 := new(CreateCategoriesCommand)
	sub = &cobra.Command{
		Use:   `categories ["/categories"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category_name": "x102j4z5wm"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp9 := new(CreateClassesCommand)
	sub = &cobra.Command{
		Use:   `classes ["/classes"]`,
		Short: ``,
		Long: `

Payload example:

{
   "class_name": "lyhi"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp10 := new(CreateClassificationsCommand)
	sub = &cobra.Command{
		Use:   `classifications ["/series/SERIES_ID/classifications"]`,
		Short: ``,
		Long: `

Payload example:

{
   "class_id": 1
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp11 := new(CreateCollectionsCommand)
	sub = &cobra.Command{
		Use:   `collections ["/collections"]`,
		Short: ``,
		Long: `

Payload example:

{
   "collection_name": "q6ak74",
   "editor_id": 1
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp11.Run(c, args) },
	}
	tmp11.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp11.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp12 := new(CreateEditionsCommand)
	sub = &cobra.Command{
		Use:   `editions ["/editions"]`,
		Short: ``,
		Long: `

Payload example:

{
   "book_id": 1,
   "collection_id": 1,
   "print_id": 1
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp12.Run(c, args) },
	}
	tmp12.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp12.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp13 := new(CreateEditorsCommand)
	sub = &cobra.Command{
		Use:   `editors ["/editors"]`,
		Short: ``,
		Long: `

Payload example:

{
   "editor_name": "hroe46r3ox"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp13.Run(c, args) },
	}
	tmp13.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp13.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp14 := new(CreateOwnershipsCommand)
	sub = &cobra.Command{
		Use:   `ownerships ["/users/USER_ID/ownerships"]`,
		Short: ``,
		Long: `

Payload example:

{
   "book_id": 1
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp14.Run(c, args) },
	}
	tmp14.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp14.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp15 := new(CreatePrintsCommand)
	sub = &cobra.Command{
		Use:   `prints ["/prints"]`,
		Short: ``,
		Long: `

Payload example:

{
   "print_name": "fsq"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp15.Run(c, args) },
	}
	tmp15.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp15.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp16 := new(CreateRolesCommand)
	sub = &cobra.Command{
		Use:   `roles ["/roles"]`,
		Short: ``,
		Long: `

Payload example:

{
   "role_name": "859xjhdbe"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp16.Run(c, args) },
	}
	tmp16.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp16.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp17 := new(CreateSeriesCommand)
	sub = &cobra.Command{
		Use:   `series ["/series"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category_id": 1,
   "series_name": "7lx"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp17.Run(c, args) },
	}
	tmp17.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp17.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp18 := new(CreateUsersCommand)
	sub = &cobra.Command{
		Use:   `users ["/users"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "me@foo.bar",
   "nickname": "j",
   "password": "9"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp18.Run(c, args) },
	}
	tmp18.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp18.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `delete action`,
	}
	tmp19 := new(DeleteAuthorsCommand)
	sub = &cobra.Command{
		Use:   `authors ["/authors/AUTHOR_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp19.Run(c, args) },
	}
	tmp19.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp19.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp20 := new(DeleteAuthorshipsCommand)
	sub = &cobra.Command{
		Use:   `authorships ["/authorships/AUTHORSHIP_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp20.Run(c, args) },
	}
	tmp20.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp20.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp21 := new(DeleteBooksCommand)
	sub = &cobra.Command{
		Use:   `books ["/books/BOOK_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp21.Run(c, args) },
	}
	tmp21.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp21.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp22 := new(DeleteCategoriesCommand)
	sub = &cobra.Command{
		Use:   `categories ["/categories/CATEGORY_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp22.Run(c, args) },
	}
	tmp22.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp22.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp23 := new(DeleteClassesCommand)
	sub = &cobra.Command{
		Use:   `classes ["/classes/CLASS_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp23.Run(c, args) },
	}
	tmp23.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp23.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp24 := new(DeleteClassificationsCommand)
	sub = &cobra.Command{
		Use:   `classifications ["/series/SERIES_ID/classifications/CLASS_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp24.Run(c, args) },
	}
	tmp24.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp24.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp25 := new(DeleteCollectionsCommand)
	sub = &cobra.Command{
		Use:   `collections ["/collections/COLLECTION_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp25.Run(c, args) },
	}
	tmp25.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp25.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp26 := new(DeleteEditionsCommand)
	sub = &cobra.Command{
		Use:   `editions ["/editions/EDITION_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp26.Run(c, args) },
	}
	tmp26.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp26.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp27 := new(DeleteEditorsCommand)
	sub = &cobra.Command{
		Use:   `editors ["/editors/EDITOR_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp27.Run(c, args) },
	}
	tmp27.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp27.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp28 := new(DeleteOwnershipsCommand)
	sub = &cobra.Command{
		Use:   `ownerships ["/users/USER_ID/ownerships/BOOK_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp28.Run(c, args) },
	}
	tmp28.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp28.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp29 := new(DeletePrintsCommand)
	sub = &cobra.Command{
		Use:   `prints ["/prints/PRINT_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp29.Run(c, args) },
	}
	tmp29.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp29.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp30 := new(DeleteRolesCommand)
	sub = &cobra.Command{
		Use:   `roles ["/roles/ROLE_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp30.Run(c, args) },
	}
	tmp30.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp30.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp31 := new(DeleteSeriesCommand)
	sub = &cobra.Command{
		Use:   `series ["/series/SERIES_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp31.Run(c, args) },
	}
	tmp31.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp31.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp32 := new(DeleteUsersCommand)
	sub = &cobra.Command{
		Use:   `users ["/users/USER_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp32.Run(c, args) },
	}
	tmp32.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp32.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get",
		Short: `get action`,
	}
	tmp33 := new(GetPasswordCommand)
	sub = &cobra.Command{
		Use:   `password ["/password"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp33.Run(c, args) },
	}
	tmp33.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp33.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp34 := new(GetValidationCommand)
	sub = &cobra.Command{
		Use:   `validation ["/validation/USER_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp34.Run(c, args) },
	}
	tmp34.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp34.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "health",
		Short: `Perform health check.`,
	}
	tmp35 := new(HealthHealthCommand)
	sub = &cobra.Command{
		Use:   `health ["/_ah/health"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp35.Run(c, args) },
	}
	tmp35.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp35.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp36 := new(ListAuthorsCommand)
	sub = &cobra.Command{
		Use:   `authors ["/authors"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp36.Run(c, args) },
	}
	tmp36.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp36.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp37 := new(ListAuthorshipsCommand)
	sub = &cobra.Command{
		Use:   `authorships ["/authorships"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp37.Run(c, args) },
	}
	tmp37.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp37.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp38 := new(ListBooksCommand)
	sub = &cobra.Command{
		Use:   `books ["/books"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp38.Run(c, args) },
	}
	tmp38.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp38.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp39 := new(ListCategoriesCommand)
	sub = &cobra.Command{
		Use:   `categories ["/categories"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp39.Run(c, args) },
	}
	tmp39.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp39.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp40 := new(ListClassesCommand)
	sub = &cobra.Command{
		Use:   `classes ["/classes"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp40.Run(c, args) },
	}
	tmp40.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp40.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp41 := new(ListClassificationsCommand)
	sub = &cobra.Command{
		Use:   `classifications ["/series/SERIES_ID/classifications"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp41.Run(c, args) },
	}
	tmp41.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp41.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp42 := new(ListCollectionsCommand)
	sub = &cobra.Command{
		Use:   `collections ["/collections"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp42.Run(c, args) },
	}
	tmp42.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp42.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp43 := new(ListEditionsCommand)
	sub = &cobra.Command{
		Use:   `editions ["/editions"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp43.Run(c, args) },
	}
	tmp43.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp43.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp44 := new(ListEditorsCommand)
	sub = &cobra.Command{
		Use:   `editors ["/editors"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp44.Run(c, args) },
	}
	tmp44.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp44.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp45 := new(ListOwnershipsCommand)
	sub = &cobra.Command{
		Use:   `ownerships ["/users/USER_ID/ownerships"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp45.Run(c, args) },
	}
	tmp45.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp45.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp46 := new(ListPrintsCommand)
	sub = &cobra.Command{
		Use:   `prints ["/prints"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp46.Run(c, args) },
	}
	tmp46.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp46.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp47 := new(ListRolesCommand)
	sub = &cobra.Command{
		Use:   `roles ["/roles"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp47.Run(c, args) },
	}
	tmp47.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp47.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp48 := new(ListSeriesCommand)
	sub = &cobra.Command{
		Use:   `series ["/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp48.Run(c, args) },
	}
	tmp48.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp48.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp49 := new(ListUsersCommand)
	sub = &cobra.Command{
		Use:   `users ["/users"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp49.Run(c, args) },
	}
	tmp49.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp49.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-authors",
		Short: `listAuthors action`,
	}
	tmp50 := new(ListAuthorsRelationCategoryCommand)
	sub = &cobra.Command{
		Use:   `relation-category ["/categories/CATEGORY_ID/authors"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp50.Run(c, args) },
	}
	tmp50.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp50.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp51 := new(ListAuthorsRelationRoleCommand)
	sub = &cobra.Command{
		Use:   `relation-role ["/roles/ROLE_ID/authors"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp51.Run(c, args) },
	}
	tmp51.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp51.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-books",
		Short: `List books by collection`,
	}
	tmp52 := new(ListBooksRelationCollectionCommand)
	sub = &cobra.Command{
		Use:   `relation-collection ["/collections/COLLECTION_ID/books"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp52.Run(c, args) },
	}
	tmp52.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp52.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-books-by-print",
		Short: `List books by collection and print`,
	}
	tmp53 := new(ListBooksByPrintRelationCollectionCommand)
	sub = &cobra.Command{
		Use:   `relation-collection ["/collections/COLLECTION_ID/prints/PRINT_ID/books"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp53.Run(c, args) },
	}
	tmp53.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp53.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-books-by-prints-series",
		Short: `List books by collection, prints and series`,
	}
	tmp54 := new(ListBooksByPrintsSeriesRelationCollectionCommand)
	sub = &cobra.Command{
		Use:   `relation-collection ["/collections/COLLECTION_ID/prints/PRINT_ID/series/SERIES_ID/books"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp54.Run(c, args) },
	}
	tmp54.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp54.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-books-by-series",
		Short: `List books by collection and series`,
	}
	tmp55 := new(ListBooksBySeriesRelationCollectionCommand)
	sub = &cobra.Command{
		Use:   `relation-collection ["/collections/COLLECTION_ID/series/SERIES_ID/books"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp55.Run(c, args) },
	}
	tmp55.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp55.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-books-by-series-print",
		Short: `List books by collection, series and print`,
	}
	tmp56 := new(ListBooksBySeriesPrintRelationCollectionCommand)
	sub = &cobra.Command{
		Use:   `relation-collection ["/collections/COLLECTION_ID/series/SERIES_ID/prints/PRINT_ID/books"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp56.Run(c, args) },
	}
	tmp56.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp56.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-categories",
		Short: `listCategories action`,
	}
	tmp57 := new(ListCategoriesRelationAuthorCommand)
	sub = &cobra.Command{
		Use:   `relation-author ["/authors/AUTHOR_ID/categories"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp57.Run(c, args) },
	}
	tmp57.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp57.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp58 := new(ListCategoriesRelationClassCommand)
	sub = &cobra.Command{
		Use:   `relation-class ["/classes/CLASS_ID/categories"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp58.Run(c, args) },
	}
	tmp58.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp58.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-classes",
		Short: `listClasses action`,
	}
	tmp59 := new(ListClassesRelationAuthorCommand)
	sub = &cobra.Command{
		Use:   `relation-author ["/authors/AUTHOR_ID/classes"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp59.Run(c, args) },
	}
	tmp59.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp59.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp60 := new(ListClassesRelationCategoryCommand)
	sub = &cobra.Command{
		Use:   `relation-category ["/categories/CATEGORY_ID/classes"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp60.Run(c, args) },
	}
	tmp60.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp60.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-prints",
		Short: `List prints by collection`,
	}
	tmp61 := new(ListPrintsRelationCollectionCommand)
	sub = &cobra.Command{
		Use:   `relation-collection ["/collections/COLLECTION_ID/prints"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp61.Run(c, args) },
	}
	tmp61.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp61.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-prints-by-series",
		Short: `List prints by collection and series`,
	}
	tmp62 := new(ListPrintsBySeriesRelationCollectionCommand)
	sub = &cobra.Command{
		Use:   `relation-collection ["/collections/COLLECTION_ID/series/SERIES_ID/prints"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp62.Run(c, args) },
	}
	tmp62.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp62.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-roles",
		Short: `List roles by author`,
	}
	tmp63 := new(ListRolesRelationAuthorCommand)
	sub = &cobra.Command{
		Use:   `relation-author ["/authors/AUTHOR_ID/roles"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp63.Run(c, args) },
	}
	tmp63.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp63.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-series",
		Short: `listSeries action`,
	}
	tmp64 := new(ListSeriesRelationAuthorCommand)
	sub = &cobra.Command{
		Use:   `relation-author ["/authors/AUTHOR_ID/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp64.Run(c, args) },
	}
	tmp64.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp64.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp65 := new(ListSeriesRelationCategoryCommand)
	sub = &cobra.Command{
		Use:   `relation-category ["/categories/CATEGORY_ID/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp65.Run(c, args) },
	}
	tmp65.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp65.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp66 := new(ListSeriesRelationClassCommand)
	sub = &cobra.Command{
		Use:   `relation-class ["/classes/CLASS_ID/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp66.Run(c, args) },
	}
	tmp66.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp66.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp67 := new(ListSeriesRelationCollectionCommand)
	sub = &cobra.Command{
		Use:   `relation-collection ["/collections/COLLECTION_ID/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp67.Run(c, args) },
	}
	tmp67.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp67.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-series-by-author",
		Short: `List series by role and author`,
	}
	tmp68 := new(ListSeriesByAuthorRelationRoleCommand)
	sub = &cobra.Command{
		Use:   `relation-role ["/roles/ROLE_ID/authors/AUTHOR_ID/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp68.Run(c, args) },
	}
	tmp68.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp68.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-series-by-category",
		Short: `listSeriesByCategory action`,
	}
	tmp69 := new(ListSeriesByCategoryRelationAuthorCommand)
	sub = &cobra.Command{
		Use:   `relation-author ["/authors/AUTHOR_ID/categories/CATEGORY_ID/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp69.Run(c, args) },
	}
	tmp69.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp69.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp70 := new(ListSeriesByCategoryRelationClassCommand)
	sub = &cobra.Command{
		Use:   `relation-class ["/classes/CLASS_ID/categories/CATEGORY_ID/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp70.Run(c, args) },
	}
	tmp70.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp70.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-series-by-class",
		Short: `listSeriesByClass action`,
	}
	tmp71 := new(ListSeriesByClassRelationAuthorCommand)
	sub = &cobra.Command{
		Use:   `relation-author ["/authors/AUTHOR_ID/classes/CLASS_ID/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp71.Run(c, args) },
	}
	tmp71.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp71.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp72 := new(ListSeriesByClassRelationCategoryCommand)
	sub = &cobra.Command{
		Use:   `relation-category ["/categories/CATEGORY_ID/classes/CLASS_ID/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp72.Run(c, args) },
	}
	tmp72.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp72.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-series-by-print",
		Short: `List series by collection and print`,
	}
	tmp73 := new(ListSeriesByPrintRelationCollectionCommand)
	sub = &cobra.Command{
		Use:   `relation-collection ["/collections/COLLECTION_ID/prints/PRINT_ID/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp73.Run(c, args) },
	}
	tmp73.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp73.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-series-by-role",
		Short: `List series by author and role`,
	}
	tmp74 := new(ListSeriesByRoleRelationAuthorCommand)
	sub = &cobra.Command{
		Use:   `relation-author ["/authors/AUTHOR_ID/roles/ROLE_ID/series"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp74.Run(c, args) },
	}
	tmp74.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp74.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `show action`,
	}
	tmp75 := new(ShowAuthorsCommand)
	sub = &cobra.Command{
		Use:   `authors ["/authors/AUTHOR_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp75.Run(c, args) },
	}
	tmp75.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp75.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp76 := new(ShowAuthorshipsCommand)
	sub = &cobra.Command{
		Use:   `authorships ["/authorships/AUTHORSHIP_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp76.Run(c, args) },
	}
	tmp76.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp76.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp77 := new(ShowBooksCommand)
	sub = &cobra.Command{
		Use:   `books ["/books/BOOK_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp77.Run(c, args) },
	}
	tmp77.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp77.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp78 := new(ShowCategoriesCommand)
	sub = &cobra.Command{
		Use:   `categories ["/categories/CATEGORY_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp78.Run(c, args) },
	}
	tmp78.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp78.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp79 := new(ShowClassesCommand)
	sub = &cobra.Command{
		Use:   `classes ["/classes/CLASS_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp79.Run(c, args) },
	}
	tmp79.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp79.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp80 := new(ShowClassificationsCommand)
	sub = &cobra.Command{
		Use:   `classifications ["/series/SERIES_ID/classifications/CLASS_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp80.Run(c, args) },
	}
	tmp80.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp80.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp81 := new(ShowCollectionsCommand)
	sub = &cobra.Command{
		Use:   `collections ["/collections/COLLECTION_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp81.Run(c, args) },
	}
	tmp81.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp81.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp82 := new(ShowEditionsCommand)
	sub = &cobra.Command{
		Use:   `editions ["/editions/EDITION_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp82.Run(c, args) },
	}
	tmp82.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp82.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp83 := new(ShowEditorsCommand)
	sub = &cobra.Command{
		Use:   `editors ["/editors/EDITOR_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp83.Run(c, args) },
	}
	tmp83.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp83.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp84 := new(ShowOwnershipsCommand)
	sub = &cobra.Command{
		Use:   `ownerships ["/users/USER_ID/ownerships/BOOK_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp84.Run(c, args) },
	}
	tmp84.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp84.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp85 := new(ShowPrintsCommand)
	sub = &cobra.Command{
		Use:   `prints ["/prints/PRINT_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp85.Run(c, args) },
	}
	tmp85.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp85.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp86 := new(ShowRolesCommand)
	sub = &cobra.Command{
		Use:   `roles ["/roles/ROLE_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp86.Run(c, args) },
	}
	tmp86.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp86.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp87 := new(ShowSeriesCommand)
	sub = &cobra.Command{
		Use:   `series ["/series/SERIES_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp87.Run(c, args) },
	}
	tmp87.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp87.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp88 := new(ShowUsersCommand)
	sub = &cobra.Command{
		Use:   `users ["/users/USER_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp88.Run(c, args) },
	}
	tmp88.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp88.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `update action`,
	}
	tmp89 := new(UpdateAuthorsCommand)
	sub = &cobra.Command{
		Use:   `authors ["/authors/AUTHOR_ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "author_name": "wq"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp89.Run(c, args) },
	}
	tmp89.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp89.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp90 := new(UpdateBooksCommand)
	sub = &cobra.Command{
		Use:   `books ["/books/BOOK_ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "book_name": "ape",
   "series_id": 1
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp90.Run(c, args) },
	}
	tmp90.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp90.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp91 := new(UpdateCategoriesCommand)
	sub = &cobra.Command{
		Use:   `categories ["/categories/CATEGORY_ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category_name": "3pur1t3p3"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp91.Run(c, args) },
	}
	tmp91.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp91.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp92 := new(UpdateClassesCommand)
	sub = &cobra.Command{
		Use:   `classes ["/classes/CLASS_ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "class_name": "66yc5y2n0j"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp92.Run(c, args) },
	}
	tmp92.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp92.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp93 := new(UpdateCollectionsCommand)
	sub = &cobra.Command{
		Use:   `collections ["/collections/COLLECTION_ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "collection_name": "84arft37",
   "editor_id": 1
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp93.Run(c, args) },
	}
	tmp93.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp93.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp94 := new(UpdateEditorsCommand)
	sub = &cobra.Command{
		Use:   `editors ["/editors/EDITOR_ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "editor_name": "6vyz"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp94.Run(c, args) },
	}
	tmp94.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp94.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp95 := new(UpdatePasswordCommand)
	sub = &cobra.Command{
		Use:   `password ["/password"]`,
		Short: ``,
		Long: `

Payload example:

{
   "password": "kjwr4nt",
   "token": "mp"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp95.Run(c, args) },
	}
	tmp95.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp95.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp96 := new(UpdatePrintsCommand)
	sub = &cobra.Command{
		Use:   `prints ["/prints/PRINT_ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "print_name": "xbvma0ty4p"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp96.Run(c, args) },
	}
	tmp96.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp96.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp97 := new(UpdateRolesCommand)
	sub = &cobra.Command{
		Use:   `roles ["/roles/ROLE_ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "role_name": "kgwh0vj"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp97.Run(c, args) },
	}
	tmp97.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp97.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp98 := new(UpdateSeriesCommand)
	sub = &cobra.Command{
		Use:   `series ["/series/SERIES_ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "category_id": 1,
   "series_name": "7ho2v7wulz"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp98.Run(c, args) },
	}
	tmp98.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp98.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp99 := new(UpdateUsersCommand)
	sub = &cobra.Command{
		Use:   `users ["/users/USER_ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "nickname": "7lv"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp99.Run(c, args) },
	}
	tmp99.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp99.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "validate",
		Short: `Validate user`,
	}
	tmp100 := new(ValidateValidationCommand)
	sub = &cobra.Command{
		Use:   `validation ["/validation"]`,
		Short: ``,
		Long: `

Payload example:

{
   "token": "3rm"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp100.Run(c, args) },
	}
	tmp100.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp100.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the AuthAuthenticateCommand command.
func (cmd *AuthAuthenticateCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/authenticate"
	}
	var payload client.AuthenticatePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AuthAuthenticate(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AuthAuthenticateCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the CreateAuthorsCommand command.
func (cmd *CreateAuthorsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/authors"
	}
	var payload client.CreateAuthorsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateAuthors(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateAuthorsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteAuthorsCommand command.
func (cmd *DeleteAuthorsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authors/%v", cmd.AuthorID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteAuthors(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteAuthorsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorID int
	cc.Flags().IntVar(&cmd.AuthorID, "author_id", authorID, `Unique Author ID`)
}

// Run makes the HTTP request corresponding to the ListAuthorsCommand command.
func (cmd *ListAuthorsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/authors"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAuthors(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAuthorsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowAuthorsCommand command.
func (cmd *ShowAuthorsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authors/%v", cmd.AuthorID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowAuthors(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowAuthorsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorID int
	cc.Flags().IntVar(&cmd.AuthorID, "author_id", authorID, `Unique Author ID`)
}

// Run makes the HTTP request corresponding to the UpdateAuthorsCommand command.
func (cmd *UpdateAuthorsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authors/%v", cmd.AuthorID)
	}
	var payload client.UpdateAuthorsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateAuthors(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateAuthorsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var authorID int
	cc.Flags().IntVar(&cmd.AuthorID, "author_id", authorID, `Unique Author ID`)
}

// Run makes the HTTP request corresponding to the CreateAuthorshipsCommand command.
func (cmd *CreateAuthorshipsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/authorships"
	}
	var payload client.CreateAuthorshipsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateAuthorships(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateAuthorshipsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteAuthorshipsCommand command.
func (cmd *DeleteAuthorshipsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authorships/%v", cmd.AuthorshipID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteAuthorships(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteAuthorshipsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorshipID int
	cc.Flags().IntVar(&cmd.AuthorshipID, "authorship_id", authorshipID, `Unique Authorship ID`)
}

// Run makes the HTTP request corresponding to the ListAuthorshipsCommand command.
func (cmd *ListAuthorshipsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/authorships"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAuthorships(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAuthorshipsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowAuthorshipsCommand command.
func (cmd *ShowAuthorshipsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authorships/%v", cmd.AuthorshipID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowAuthorships(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowAuthorshipsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorshipID int
	cc.Flags().IntVar(&cmd.AuthorshipID, "authorship_id", authorshipID, `Unique Authorship ID`)
}

// Run makes the HTTP request corresponding to the CreateBooksCommand command.
func (cmd *CreateBooksCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/books"
	}
	var payload client.CreateBooksPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateBooks(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateBooksCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteBooksCommand command.
func (cmd *DeleteBooksCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/books/%v", cmd.BookID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteBooks(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteBooksCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var bookID int
	cc.Flags().IntVar(&cmd.BookID, "book_id", bookID, `Unique Book ID`)
}

// Run makes the HTTP request corresponding to the ListBooksCommand command.
func (cmd *ListBooksCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/books"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBooks(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBooksCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowBooksCommand command.
func (cmd *ShowBooksCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/books/%v", cmd.BookID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowBooks(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowBooksCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var bookID int
	cc.Flags().IntVar(&cmd.BookID, "book_id", bookID, `Unique Book ID`)
}

// Run makes the HTTP request corresponding to the UpdateBooksCommand command.
func (cmd *UpdateBooksCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/books/%v", cmd.BookID)
	}
	var payload client.UpdateBooksPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateBooks(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateBooksCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var bookID int
	cc.Flags().IntVar(&cmd.BookID, "book_id", bookID, `Unique Book ID`)
}

// Run makes the HTTP request corresponding to the CreateCategoriesCommand command.
func (cmd *CreateCategoriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/categories"
	}
	var payload client.CreateCategoriesPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateCategories(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateCategoriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteCategoriesCommand command.
func (cmd *DeleteCategoriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/categories/%v", cmd.CategoryID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteCategories(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteCategoriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var categoryID int
	cc.Flags().IntVar(&cmd.CategoryID, "category_id", categoryID, `Unique Category ID`)
}

// Run makes the HTTP request corresponding to the ListCategoriesCommand command.
func (cmd *ListCategoriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/categories"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListCategories(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListCategoriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowCategoriesCommand command.
func (cmd *ShowCategoriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/categories/%v", cmd.CategoryID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowCategories(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowCategoriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var categoryID int
	cc.Flags().IntVar(&cmd.CategoryID, "category_id", categoryID, `Unique Category ID`)
}

// Run makes the HTTP request corresponding to the UpdateCategoriesCommand command.
func (cmd *UpdateCategoriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/categories/%v", cmd.CategoryID)
	}
	var payload client.UpdateCategoriesPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateCategories(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateCategoriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var categoryID int
	cc.Flags().IntVar(&cmd.CategoryID, "category_id", categoryID, `Unique Category ID`)
}

// Run makes the HTTP request corresponding to the CreateClassesCommand command.
func (cmd *CreateClassesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/classes"
	}
	var payload client.CreateClassesPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateClasses(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateClassesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteClassesCommand command.
func (cmd *DeleteClassesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/classes/%v", cmd.ClassID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteClasses(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteClassesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var classID int
	cc.Flags().IntVar(&cmd.ClassID, "class_id", classID, `Unique Class ID`)
}

// Run makes the HTTP request corresponding to the ListClassesCommand command.
func (cmd *ListClassesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/classes"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListClasses(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListClassesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowClassesCommand command.
func (cmd *ShowClassesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/classes/%v", cmd.ClassID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowClasses(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowClassesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var classID int
	cc.Flags().IntVar(&cmd.ClassID, "class_id", classID, `Unique Class ID`)
}

// Run makes the HTTP request corresponding to the UpdateClassesCommand command.
func (cmd *UpdateClassesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/classes/%v", cmd.ClassID)
	}
	var payload client.UpdateClassesPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateClasses(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateClassesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var classID int
	cc.Flags().IntVar(&cmd.ClassID, "class_id", classID, `Unique Class ID`)
}

// Run makes the HTTP request corresponding to the CreateSeriesCommand command.
func (cmd *CreateSeriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/series"
	}
	var payload client.CreateSeriesPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateSeries(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateSeriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteSeriesCommand command.
func (cmd *DeleteSeriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/series/%v", cmd.SeriesID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteSeries(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteSeriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var seriesID int
	cc.Flags().IntVar(&cmd.SeriesID, "series_id", seriesID, `Unique Series ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesCommand command.
func (cmd *ListSeriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/series"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeries(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowSeriesCommand command.
func (cmd *ShowSeriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/series/%v", cmd.SeriesID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowSeries(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowSeriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var seriesID int
	cc.Flags().IntVar(&cmd.SeriesID, "series_id", seriesID, `Unique Series ID`)
}

// Run makes the HTTP request corresponding to the UpdateSeriesCommand command.
func (cmd *UpdateSeriesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/series/%v", cmd.SeriesID)
	}
	var payload client.UpdateSeriesPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateSeries(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateSeriesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var seriesID int
	cc.Flags().IntVar(&cmd.SeriesID, "series_id", seriesID, `Unique Series ID`)
}

// Run makes the HTTP request corresponding to the CreateClassificationsCommand command.
func (cmd *CreateClassificationsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/series/%v/classifications", cmd.SeriesID)
	}
	var payload client.CreateClassificationsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateClassifications(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateClassificationsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var seriesID int
	cc.Flags().IntVar(&cmd.SeriesID, "series_id", seriesID, `Unique Series ID`)
}

// Run makes the HTTP request corresponding to the DeleteClassificationsCommand command.
func (cmd *DeleteClassificationsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/series/%v/classifications/%v", cmd.SeriesID, cmd.ClassID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteClassifications(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteClassificationsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var classID int
	cc.Flags().IntVar(&cmd.ClassID, "class_id", classID, `Unique Class ID`)
	var seriesID int
	cc.Flags().IntVar(&cmd.SeriesID, "series_id", seriesID, `Unique Series ID`)
}

// Run makes the HTTP request corresponding to the ListClassificationsCommand command.
func (cmd *ListClassificationsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/series/%v/classifications", cmd.SeriesID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListClassifications(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListClassificationsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var seriesID int
	cc.Flags().IntVar(&cmd.SeriesID, "series_id", seriesID, `Unique Series ID`)
}

// Run makes the HTTP request corresponding to the ShowClassificationsCommand command.
func (cmd *ShowClassificationsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/series/%v/classifications/%v", cmd.SeriesID, cmd.ClassID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowClassifications(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowClassificationsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var classID int
	cc.Flags().IntVar(&cmd.ClassID, "class_id", classID, `Unique Class ID`)
	var seriesID int
	cc.Flags().IntVar(&cmd.SeriesID, "series_id", seriesID, `Unique Series ID`)
}

// Run makes the HTTP request corresponding to the CreateCollectionsCommand command.
func (cmd *CreateCollectionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/collections"
	}
	var payload client.CreateCollectionsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateCollections(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateCollectionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteCollectionsCommand command.
func (cmd *DeleteCollectionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v", cmd.CollectionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteCollections(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteCollectionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
}

// Run makes the HTTP request corresponding to the ListCollectionsCommand command.
func (cmd *ListCollectionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/collections"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListCollections(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListCollectionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowCollectionsCommand command.
func (cmd *ShowCollectionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v", cmd.CollectionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowCollections(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowCollectionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
}

// Run makes the HTTP request corresponding to the UpdateCollectionsCommand command.
func (cmd *UpdateCollectionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v", cmd.CollectionID)
	}
	var payload client.UpdateCollectionsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateCollections(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateCollectionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
}

// Run makes the HTTP request corresponding to the CreateEditionsCommand command.
func (cmd *CreateEditionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/editions"
	}
	var payload client.CreateEditionsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateEditions(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateEditionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteEditionsCommand command.
func (cmd *DeleteEditionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/editions/%v", cmd.EditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteEditions(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteEditionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var editionID int
	cc.Flags().IntVar(&cmd.EditionID, "edition_id", editionID, `Unique Edition ID`)
}

// Run makes the HTTP request corresponding to the ListEditionsCommand command.
func (cmd *ListEditionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/editions"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListEditions(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListEditionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowEditionsCommand command.
func (cmd *ShowEditionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/editions/%v", cmd.EditionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowEditions(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowEditionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var editionID int
	cc.Flags().IntVar(&cmd.EditionID, "edition_id", editionID, `Unique Edition ID`)
}

// Run makes the HTTP request corresponding to the CreateEditorsCommand command.
func (cmd *CreateEditorsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/editors"
	}
	var payload client.CreateEditorsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateEditors(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateEditorsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteEditorsCommand command.
func (cmd *DeleteEditorsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/editors/%v", cmd.EditorID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteEditors(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteEditorsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var editorID int
	cc.Flags().IntVar(&cmd.EditorID, "editor_id", editorID, `Unique Editor ID`)
}

// Run makes the HTTP request corresponding to the ListEditorsCommand command.
func (cmd *ListEditorsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/editors"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListEditors(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListEditorsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowEditorsCommand command.
func (cmd *ShowEditorsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/editors/%v", cmd.EditorID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowEditors(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowEditorsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var editorID int
	cc.Flags().IntVar(&cmd.EditorID, "editor_id", editorID, `Unique Editor ID`)
}

// Run makes the HTTP request corresponding to the UpdateEditorsCommand command.
func (cmd *UpdateEditorsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/editors/%v", cmd.EditorID)
	}
	var payload client.UpdateEditorsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateEditors(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateEditorsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var editorID int
	cc.Flags().IntVar(&cmd.EditorID, "editor_id", editorID, `Unique Editor ID`)
}

// Run makes the HTTP request corresponding to the HealthHealthCommand command.
func (cmd *HealthHealthCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/_ah/health"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.HealthHealth(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *HealthHealthCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the AddOwnershipsCommand command.
func (cmd *AddOwnershipsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/ownerships/isbn", cmd.UserID)
	}
	var payload client.AddOwnershipsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddOwnerships(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddOwnershipsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, `Unique User ID`)
}

// Run makes the HTTP request corresponding to the CreateOwnershipsCommand command.
func (cmd *CreateOwnershipsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/ownerships", cmd.UserID)
	}
	var payload client.CreateOwnershipsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateOwnerships(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateOwnershipsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, `Unique User ID`)
}

// Run makes the HTTP request corresponding to the DeleteOwnershipsCommand command.
func (cmd *DeleteOwnershipsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/ownerships/%v", cmd.UserID, cmd.BookID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteOwnerships(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteOwnershipsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var bookID int
	cc.Flags().IntVar(&cmd.BookID, "book_id", bookID, `Unique Book ID`)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, `Unique User ID`)
}

// Run makes the HTTP request corresponding to the ListOwnershipsCommand command.
func (cmd *ListOwnershipsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/ownerships", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListOwnerships(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListOwnershipsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, `Unique User ID`)
}

// Run makes the HTTP request corresponding to the ShowOwnershipsCommand command.
func (cmd *ShowOwnershipsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v/ownerships/%v", cmd.UserID, cmd.BookID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowOwnerships(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowOwnershipsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var bookID int
	cc.Flags().IntVar(&cmd.BookID, "book_id", bookID, `Unique Book ID`)
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, `Unique User ID`)
}

// Run makes the HTTP request corresponding to the GetPasswordCommand command.
func (cmd *GetPasswordCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/password"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetPassword(ctx, path, cmd.Email)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetPasswordCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, `user email`)
}

// Run makes the HTTP request corresponding to the UpdatePasswordCommand command.
func (cmd *UpdatePasswordCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/password"
	}
	var payload client.PasswordChangePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdatePassword(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdatePasswordCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the CreatePrintsCommand command.
func (cmd *CreatePrintsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/prints"
	}
	var payload client.CreatePrintsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreatePrints(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreatePrintsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeletePrintsCommand command.
func (cmd *DeletePrintsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/prints/%v", cmd.PrintID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeletePrints(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeletePrintsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var printID int
	cc.Flags().IntVar(&cmd.PrintID, "print_id", printID, `Unique Print ID`)
}

// Run makes the HTTP request corresponding to the ListPrintsCommand command.
func (cmd *ListPrintsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/prints"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListPrints(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListPrintsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowPrintsCommand command.
func (cmd *ShowPrintsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/prints/%v", cmd.PrintID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowPrints(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowPrintsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var printID int
	cc.Flags().IntVar(&cmd.PrintID, "print_id", printID, `Unique Print ID`)
}

// Run makes the HTTP request corresponding to the UpdatePrintsCommand command.
func (cmd *UpdatePrintsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/prints/%v", cmd.PrintID)
	}
	var payload client.UpdatePrintsPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdatePrints(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdatePrintsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var printID int
	cc.Flags().IntVar(&cmd.PrintID, "print_id", printID, `Unique Print ID`)
}

// Run makes the HTTP request corresponding to the ListCategoriesRelationAuthorCommand command.
func (cmd *ListCategoriesRelationAuthorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authors/%v/categories", cmd.AuthorID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListCategoriesRelationAuthor(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListCategoriesRelationAuthorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorID int
	cc.Flags().IntVar(&cmd.AuthorID, "author_id", authorID, `Unique Author ID`)
}

// Run makes the HTTP request corresponding to the ListClassesRelationAuthorCommand command.
func (cmd *ListClassesRelationAuthorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authors/%v/classes", cmd.AuthorID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListClassesRelationAuthor(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListClassesRelationAuthorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorID int
	cc.Flags().IntVar(&cmd.AuthorID, "author_id", authorID, `Unique Author ID`)
}

// Run makes the HTTP request corresponding to the ListRolesRelationAuthorCommand command.
func (cmd *ListRolesRelationAuthorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authors/%v/roles", cmd.AuthorID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListRolesRelationAuthor(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListRolesRelationAuthorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorID int
	cc.Flags().IntVar(&cmd.AuthorID, "author_id", authorID, `Unique Author ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesRelationAuthorCommand command.
func (cmd *ListSeriesRelationAuthorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authors/%v/series", cmd.AuthorID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeriesRelationAuthor(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesRelationAuthorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorID int
	cc.Flags().IntVar(&cmd.AuthorID, "author_id", authorID, `Unique Author ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesByCategoryRelationAuthorCommand command.
func (cmd *ListSeriesByCategoryRelationAuthorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authors/%v/categories/%v/series", cmd.AuthorID, cmd.CategoryID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeriesByCategoryRelationAuthor(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesByCategoryRelationAuthorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorID int
	cc.Flags().IntVar(&cmd.AuthorID, "author_id", authorID, `Unique Author ID`)
	var categoryID int
	cc.Flags().IntVar(&cmd.CategoryID, "category_id", categoryID, `Unique Category ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesByClassRelationAuthorCommand command.
func (cmd *ListSeriesByClassRelationAuthorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authors/%v/classes/%v/series", cmd.AuthorID, cmd.ClassID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeriesByClassRelationAuthor(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesByClassRelationAuthorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorID int
	cc.Flags().IntVar(&cmd.AuthorID, "author_id", authorID, `Unique Author ID`)
	var classID int
	cc.Flags().IntVar(&cmd.ClassID, "class_id", classID, `Unique Class ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesByRoleRelationAuthorCommand command.
func (cmd *ListSeriesByRoleRelationAuthorCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/authors/%v/roles/%v/series", cmd.AuthorID, cmd.RoleID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeriesByRoleRelationAuthor(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesByRoleRelationAuthorCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorID int
	cc.Flags().IntVar(&cmd.AuthorID, "author_id", authorID, `Unique Author ID`)
	var roleID int
	cc.Flags().IntVar(&cmd.RoleID, "role_id", roleID, `Unique Role ID`)
}

// Run makes the HTTP request corresponding to the ListAuthorsRelationCategoryCommand command.
func (cmd *ListAuthorsRelationCategoryCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/categories/%v/authors", cmd.CategoryID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAuthorsRelationCategory(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAuthorsRelationCategoryCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var categoryID int
	cc.Flags().IntVar(&cmd.CategoryID, "category_id", categoryID, `Unique Category ID`)
}

// Run makes the HTTP request corresponding to the ListClassesRelationCategoryCommand command.
func (cmd *ListClassesRelationCategoryCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/categories/%v/classes", cmd.CategoryID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListClassesRelationCategory(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListClassesRelationCategoryCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var categoryID int
	cc.Flags().IntVar(&cmd.CategoryID, "category_id", categoryID, `Unique Category ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesRelationCategoryCommand command.
func (cmd *ListSeriesRelationCategoryCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/categories/%v/series", cmd.CategoryID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeriesRelationCategory(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesRelationCategoryCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var categoryID int
	cc.Flags().IntVar(&cmd.CategoryID, "category_id", categoryID, `Unique Category ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesByClassRelationCategoryCommand command.
func (cmd *ListSeriesByClassRelationCategoryCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/categories/%v/classes/%v/series", cmd.CategoryID, cmd.ClassID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeriesByClassRelationCategory(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesByClassRelationCategoryCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var categoryID int
	cc.Flags().IntVar(&cmd.CategoryID, "category_id", categoryID, `Unique Category ID`)
	var classID int
	cc.Flags().IntVar(&cmd.ClassID, "class_id", classID, `Unique Class ID`)
}

// Run makes the HTTP request corresponding to the ListCategoriesRelationClassCommand command.
func (cmd *ListCategoriesRelationClassCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/classes/%v/categories", cmd.ClassID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListCategoriesRelationClass(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListCategoriesRelationClassCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var classID int
	cc.Flags().IntVar(&cmd.ClassID, "class_id", classID, `Unique Class ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesRelationClassCommand command.
func (cmd *ListSeriesRelationClassCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/classes/%v/series", cmd.ClassID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeriesRelationClass(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesRelationClassCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var classID int
	cc.Flags().IntVar(&cmd.ClassID, "class_id", classID, `Unique Class ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesByCategoryRelationClassCommand command.
func (cmd *ListSeriesByCategoryRelationClassCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/classes/%v/categories/%v/series", cmd.ClassID, cmd.CategoryID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeriesByCategoryRelationClass(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesByCategoryRelationClassCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var categoryID int
	cc.Flags().IntVar(&cmd.CategoryID, "category_id", categoryID, `Unique Category ID`)
	var classID int
	cc.Flags().IntVar(&cmd.ClassID, "class_id", classID, `Unique Class ID`)
}

// Run makes the HTTP request corresponding to the ListBooksRelationCollectionCommand command.
func (cmd *ListBooksRelationCollectionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v/books", cmd.CollectionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBooksRelationCollection(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBooksRelationCollectionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
}

// Run makes the HTTP request corresponding to the ListBooksByPrintRelationCollectionCommand command.
func (cmd *ListBooksByPrintRelationCollectionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v/prints/%v/books", cmd.CollectionID, cmd.PrintID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBooksByPrintRelationCollection(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBooksByPrintRelationCollectionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
	var printID int
	cc.Flags().IntVar(&cmd.PrintID, "print_id", printID, `Unique Print ID`)
}

// Run makes the HTTP request corresponding to the ListBooksByPrintsSeriesRelationCollectionCommand command.
func (cmd *ListBooksByPrintsSeriesRelationCollectionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v/prints/%v/series/%v/books", cmd.CollectionID, cmd.PrintID, cmd.SeriesID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBooksByPrintsSeriesRelationCollection(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBooksByPrintsSeriesRelationCollectionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
	var printID int
	cc.Flags().IntVar(&cmd.PrintID, "print_id", printID, `Unique Print ID`)
	var seriesID int
	cc.Flags().IntVar(&cmd.SeriesID, "series_id", seriesID, `Unique Series ID`)
}

// Run makes the HTTP request corresponding to the ListBooksBySeriesRelationCollectionCommand command.
func (cmd *ListBooksBySeriesRelationCollectionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v/series/%v/books", cmd.CollectionID, cmd.SeriesID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBooksBySeriesRelationCollection(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBooksBySeriesRelationCollectionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
	var seriesID int
	cc.Flags().IntVar(&cmd.SeriesID, "series_id", seriesID, `Unique Series ID`)
}

// Run makes the HTTP request corresponding to the ListBooksBySeriesPrintRelationCollectionCommand command.
func (cmd *ListBooksBySeriesPrintRelationCollectionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v/series/%v/prints/%v/books", cmd.CollectionID, cmd.SeriesID, cmd.PrintID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBooksBySeriesPrintRelationCollection(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBooksBySeriesPrintRelationCollectionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
	var printID int
	cc.Flags().IntVar(&cmd.PrintID, "print_id", printID, `Unique Print ID`)
	var seriesID int
	cc.Flags().IntVar(&cmd.SeriesID, "series_id", seriesID, `Unique Series ID`)
}

// Run makes the HTTP request corresponding to the ListPrintsRelationCollectionCommand command.
func (cmd *ListPrintsRelationCollectionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v/prints", cmd.CollectionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListPrintsRelationCollection(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListPrintsRelationCollectionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
}

// Run makes the HTTP request corresponding to the ListPrintsBySeriesRelationCollectionCommand command.
func (cmd *ListPrintsBySeriesRelationCollectionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v/series/%v/prints", cmd.CollectionID, cmd.SeriesID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListPrintsBySeriesRelationCollection(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListPrintsBySeriesRelationCollectionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
	var seriesID int
	cc.Flags().IntVar(&cmd.SeriesID, "series_id", seriesID, `Unique Series ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesRelationCollectionCommand command.
func (cmd *ListSeriesRelationCollectionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v/series", cmd.CollectionID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeriesRelationCollection(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesRelationCollectionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesByPrintRelationCollectionCommand command.
func (cmd *ListSeriesByPrintRelationCollectionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/collections/%v/prints/%v/series", cmd.CollectionID, cmd.PrintID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeriesByPrintRelationCollection(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesByPrintRelationCollectionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var collectionID int
	cc.Flags().IntVar(&cmd.CollectionID, "collection_id", collectionID, `Unique Collection ID`)
	var printID int
	cc.Flags().IntVar(&cmd.PrintID, "print_id", printID, `Unique Print ID`)
}

// Run makes the HTTP request corresponding to the CreateRolesCommand command.
func (cmd *CreateRolesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/roles"
	}
	var payload client.CreateRolesPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateRoles(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateRolesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteRolesCommand command.
func (cmd *DeleteRolesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/roles/%v", cmd.RoleID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteRoles(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteRolesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var roleID int
	cc.Flags().IntVar(&cmd.RoleID, "role_id", roleID, `Unique Role ID`)
}

// Run makes the HTTP request corresponding to the ListRolesCommand command.
func (cmd *ListRolesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/roles"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListRoles(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListRolesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowRolesCommand command.
func (cmd *ShowRolesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/roles/%v", cmd.RoleID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowRoles(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowRolesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var roleID int
	cc.Flags().IntVar(&cmd.RoleID, "role_id", roleID, `Unique Role ID`)
}

// Run makes the HTTP request corresponding to the UpdateRolesCommand command.
func (cmd *UpdateRolesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/roles/%v", cmd.RoleID)
	}
	var payload client.UpdateRolesPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateRoles(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateRolesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var roleID int
	cc.Flags().IntVar(&cmd.RoleID, "role_id", roleID, `Unique Role ID`)
}

// Run makes the HTTP request corresponding to the ListAuthorsRelationRoleCommand command.
func (cmd *ListAuthorsRelationRoleCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/roles/%v/authors", cmd.RoleID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAuthorsRelationRole(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAuthorsRelationRoleCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var roleID int
	cc.Flags().IntVar(&cmd.RoleID, "role_id", roleID, `Unique Role ID`)
}

// Run makes the HTTP request corresponding to the ListSeriesByAuthorRelationRoleCommand command.
func (cmd *ListSeriesByAuthorRelationRoleCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/roles/%v/authors/%v/series", cmd.RoleID, cmd.AuthorID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSeriesByAuthorRelationRole(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSeriesByAuthorRelationRoleCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var authorID int
	cc.Flags().IntVar(&cmd.AuthorID, "author_id", authorID, `Unique Author ID`)
	var roleID int
	cc.Flags().IntVar(&cmd.RoleID, "role_id", roleID, `Unique Role ID`)
}

// Run makes the HTTP request corresponding to the AccessTokenCommand command.
func (cmd *AccessTokenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/token/access_token"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AccessToken(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AccessTokenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the AuthTokenCommand command.
func (cmd *AuthTokenCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/token/auth"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AuthToken(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AuthTokenCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the CreateUsersCommand command.
func (cmd *CreateUsersCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/users"
	}
	var payload client.UserCreatePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateUsers(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateUsersCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteUsersCommand command.
func (cmd *DeleteUsersCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteUsers(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteUsersCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, `Unique User ID`)
}

// Run makes the HTTP request corresponding to the ListUsersCommand command.
func (cmd *ListUsersCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/users"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListUsers(ctx, path, stringFlagVal("email", cmd.Email), stringFlagVal("nickname", cmd.Nickname))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListUsersCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, `user email`)
	var nickname string
	cc.Flags().StringVar(&cmd.Nickname, "nickname", nickname, `user nickname`)
}

// Run makes the HTTP request corresponding to the ShowUsersCommand command.
func (cmd *ShowUsersCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowUsers(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowUsersCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, `Unique User ID`)
}

// Run makes the HTTP request corresponding to the UpdateUsersCommand command.
func (cmd *UpdateUsersCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/users/%v", cmd.UserID)
	}
	var payload client.UpdateUsersPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateUsers(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateUsersCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, `Unique User ID`)
}

// Run makes the HTTP request corresponding to the GetValidationCommand command.
func (cmd *GetValidationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/validation/%v", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetValidation(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetValidationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "user_id", userID, `Unique User ID`)
}

// Run makes the HTTP request corresponding to the ValidateValidationCommand command.
func (cmd *ValidateValidationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/validation"
	}
	var payload client.ValidateValidationPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ValidateValidation(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ValidateValidationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}
